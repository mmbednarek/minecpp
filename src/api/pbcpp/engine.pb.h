// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_engine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_engine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_engine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_engine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_2eproto;
namespace minecpp {
namespace engine {
class AcceptPlayerRequest;
class AcceptPlayerRequestDefaultTypeInternal;
extern AcceptPlayerRequestDefaultTypeInternal _AcceptPlayerRequest_default_instance_;
class AcceptPlayerResponse;
class AcceptPlayerResponseDefaultTypeInternal;
extern AcceptPlayerResponseDefaultTypeInternal _AcceptPlayerResponse_default_instance_;
class GamePlay;
class GamePlayDefaultTypeInternal;
extern GamePlayDefaultTypeInternal _GamePlay_default_instance_;
class PlayerData;
class PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
}  // namespace engine
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::engine::AcceptPlayerRequest* Arena::CreateMaybeMessage<::minecpp::engine::AcceptPlayerRequest>(Arena*);
template<> ::minecpp::engine::AcceptPlayerResponse* Arena::CreateMaybeMessage<::minecpp::engine::AcceptPlayerResponse>(Arena*);
template<> ::minecpp::engine::GamePlay* Arena::CreateMaybeMessage<::minecpp::engine::GamePlay>(Arena*);
template<> ::minecpp::engine::PlayerData* Arena::CreateMaybeMessage<::minecpp::engine::PlayerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace engine {

enum DimensionType : int {
  Overworld = 0,
  Nether = 1,
  End = 2,
  DimensionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DimensionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DimensionType_IsValid(int value);
constexpr DimensionType DimensionType_MIN = Overworld;
constexpr DimensionType DimensionType_MAX = End;
constexpr int DimensionType_ARRAYSIZE = DimensionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionType_descriptor();
template<typename T>
inline const std::string& DimensionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionType_descriptor(), enum_t_value);
}
inline bool DimensionType_Parse(
    const std::string& name, DimensionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionType>(
    DimensionType_descriptor(), name, value);
}
enum Difficulty : int {
  Easy = 0,
  Medium = 1,
  Hard = 2,
  Difficulty_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Difficulty_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Difficulty_IsValid(int value);
constexpr Difficulty Difficulty_MIN = Easy;
constexpr Difficulty Difficulty_MAX = Hard;
constexpr int Difficulty_ARRAYSIZE = Difficulty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difficulty_descriptor();
template<typename T>
inline const std::string& Difficulty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Difficulty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Difficulty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Difficulty_descriptor(), enum_t_value);
}
inline bool Difficulty_Parse(
    const std::string& name, Difficulty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Difficulty>(
    Difficulty_descriptor(), name, value);
}
enum GameMode : int {
  Survival = 0,
  Creative = 1,
  Adventure = 2,
  Spectator = 3,
  GameMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameMode_IsValid(int value);
constexpr GameMode GameMode_MIN = Survival;
constexpr GameMode GameMode_MAX = Spectator;
constexpr int GameMode_ARRAYSIZE = GameMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMode_descriptor();
template<typename T>
inline const std::string& GameMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameMode_descriptor(), enum_t_value);
}
inline bool GameMode_Parse(
    const std::string& name, GameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMode>(
    GameMode_descriptor(), name, value);
}
enum WorldType : int {
  Default = 0,
  Flat = 1,
  LargeBiomes = 2,
  Amplified = 3,
  Customised = 4,
  WorldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorldType_IsValid(int value);
constexpr WorldType WorldType_MIN = Default;
constexpr WorldType WorldType_MAX = Customised;
constexpr int WorldType_ARRAYSIZE = WorldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor();
template<typename T>
inline const std::string& WorldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorldType_descriptor(), enum_t_value);
}
inline bool WorldType_Parse(
    const std::string& name, WorldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorldType>(
    WorldType_descriptor(), name, value);
}
enum PlayerAcceptState : int {
  DENIED = 0,
  ACCEPTED = 1,
  MOVED = 2,
  PlayerAcceptState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerAcceptState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerAcceptState_IsValid(int value);
constexpr PlayerAcceptState PlayerAcceptState_MIN = DENIED;
constexpr PlayerAcceptState PlayerAcceptState_MAX = MOVED;
constexpr int PlayerAcceptState_ARRAYSIZE = PlayerAcceptState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerAcceptState_descriptor();
template<typename T>
inline const std::string& PlayerAcceptState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerAcceptState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerAcceptState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerAcceptState_descriptor(), enum_t_value);
}
inline bool PlayerAcceptState_Parse(
    const std::string& name, PlayerAcceptState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerAcceptState>(
    PlayerAcceptState_descriptor(), name, value);
}
// ===================================================================

class AcceptPlayerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.engine.AcceptPlayerRequest) */ {
 public:
  AcceptPlayerRequest();
  virtual ~AcceptPlayerRequest();

  AcceptPlayerRequest(const AcceptPlayerRequest& from);
  AcceptPlayerRequest(AcceptPlayerRequest&& from) noexcept
    : AcceptPlayerRequest() {
    *this = ::std::move(from);
  }

  inline AcceptPlayerRequest& operator=(const AcceptPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptPlayerRequest& operator=(AcceptPlayerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptPlayerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptPlayerRequest*>(
               &_AcceptPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AcceptPlayerRequest* other);
  friend void swap(AcceptPlayerRequest& a, AcceptPlayerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptPlayerRequest* New() const final {
    return CreateMaybeMessage<AcceptPlayerRequest>(nullptr);
  }

  AcceptPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPlayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptPlayerRequest& from);
  void MergeFrom(const AcceptPlayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPlayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.engine.AcceptPlayerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_engine_2eproto);
    return ::descriptor_table_engine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // @@protoc_insertion_point(class_scope:minecpp.engine.AcceptPlayerRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// -------------------------------------------------------------------

class AcceptPlayerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.engine.AcceptPlayerResponse) */ {
 public:
  AcceptPlayerResponse();
  virtual ~AcceptPlayerResponse();

  AcceptPlayerResponse(const AcceptPlayerResponse& from);
  AcceptPlayerResponse(AcceptPlayerResponse&& from) noexcept
    : AcceptPlayerResponse() {
    *this = ::std::move(from);
  }

  inline AcceptPlayerResponse& operator=(const AcceptPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptPlayerResponse& operator=(AcceptPlayerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptPlayerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPlayerResponse* internal_default_instance() {
    return reinterpret_cast<const AcceptPlayerResponse*>(
               &_AcceptPlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AcceptPlayerResponse* other);
  friend void swap(AcceptPlayerResponse& a, AcceptPlayerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptPlayerResponse* New() const final {
    return CreateMaybeMessage<AcceptPlayerResponse>(nullptr);
  }

  AcceptPlayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPlayerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptPlayerResponse& from);
  void MergeFrom(const AcceptPlayerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPlayerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.engine.AcceptPlayerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_engine_2eproto);
    return ::descriptor_table_engine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .minecpp.engine.GamePlay game_info = 4;
  bool has_game_info() const;
  void clear_game_info();
  static const int kGameInfoFieldNumber = 4;
  const ::minecpp::engine::GamePlay& game_info() const;
  ::minecpp::engine::GamePlay* release_game_info();
  ::minecpp::engine::GamePlay* mutable_game_info();
  void set_allocated_game_info(::minecpp::engine::GamePlay* game_info);

  // .minecpp.engine.PlayerAcceptState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::minecpp::engine::PlayerAcceptState state() const;
  void set_state(::minecpp::engine::PlayerAcceptState value);

  // uint32 player_id = 2;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:minecpp.engine.AcceptPlayerResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::minecpp::engine::GamePlay* game_info_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// -------------------------------------------------------------------

class PlayerData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.engine.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayerData* other);
  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const final {
    return CreateMaybeMessage<PlayerData>(nullptr);
  }

  PlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.engine.PlayerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_engine_2eproto);
    return ::descriptor_table_engine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.engine.PlayerData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// -------------------------------------------------------------------

class GamePlay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.engine.GamePlay) */ {
 public:
  GamePlay();
  virtual ~GamePlay();

  GamePlay(const GamePlay& from);
  GamePlay(GamePlay&& from) noexcept
    : GamePlay() {
    *this = ::std::move(from);
  }

  inline GamePlay& operator=(const GamePlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePlay& operator=(GamePlay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePlay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePlay* internal_default_instance() {
    return reinterpret_cast<const GamePlay*>(
               &_GamePlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GamePlay* other);
  friend void swap(GamePlay& a, GamePlay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GamePlay* New() const final {
    return CreateMaybeMessage<GamePlay>(nullptr);
  }

  GamePlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePlay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePlay& from);
  void MergeFrom(const GamePlay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePlay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.engine.GamePlay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_engine_2eproto);
    return ::descriptor_table_engine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 seed = 2;
  void clear_seed();
  static const int kSeedFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .minecpp.engine.DimensionType dimension = 1;
  void clear_dimension();
  static const int kDimensionFieldNumber = 1;
  ::minecpp::engine::DimensionType dimension() const;
  void set_dimension(::minecpp::engine::DimensionType value);

  // .minecpp.engine.GameMode mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::minecpp::engine::GameMode mode() const;
  void set_mode(::minecpp::engine::GameMode value);

  // .minecpp.engine.WorldType world = 4;
  void clear_world();
  static const int kWorldFieldNumber = 4;
  ::minecpp::engine::WorldType world() const;
  void set_world(::minecpp::engine::WorldType value);

  // int32 view_distance = 5;
  void clear_view_distance();
  static const int kViewDistanceFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 view_distance() const;
  void set_view_distance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_players = 7;
  void clear_max_players();
  static const int kMaxPlayersFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 max_players() const;
  void set_max_players(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool hardcore = 6;
  void clear_hardcore();
  static const int kHardcoreFieldNumber = 6;
  bool hardcore() const;
  void set_hardcore(bool value);

  // bool reduced_debug_info = 8;
  void clear_reduced_debug_info();
  static const int kReducedDebugInfoFieldNumber = 8;
  bool reduced_debug_info() const;
  void set_reduced_debug_info(bool value);

  // bool do_immediate_respawn = 9;
  void clear_do_immediate_respawn();
  static const int kDoImmediateRespawnFieldNumber = 9;
  bool do_immediate_respawn() const;
  void set_do_immediate_respawn(bool value);

  // .minecpp.engine.Difficulty difficulty = 10;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 10;
  ::minecpp::engine::Difficulty difficulty() const;
  void set_difficulty(::minecpp::engine::Difficulty value);

  // @@protoc_insertion_point(class_scope:minecpp.engine.GamePlay)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seed_;
  int dimension_;
  int mode_;
  int world_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_players_;
  bool hardcore_;
  bool reduced_debug_info_;
  bool do_immediate_respawn_;
  int difficulty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_engine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AcceptPlayerRequest

// string name = 1;
inline void AcceptPlayerRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AcceptPlayerRequest::name() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerRequest.name)
  return name_.GetNoArena();
}
inline void AcceptPlayerRequest::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.engine.AcceptPlayerRequest.name)
}
inline void AcceptPlayerRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.engine.AcceptPlayerRequest.name)
}
inline void AcceptPlayerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.engine.AcceptPlayerRequest.name)
}
inline void AcceptPlayerRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.engine.AcceptPlayerRequest.name)
}
inline std::string* AcceptPlayerRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.engine.AcceptPlayerRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AcceptPlayerRequest::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.engine.AcceptPlayerRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:minecpp.engine.AcceptPlayerRequest.name)
}

// string uuid = 2;
inline void AcceptPlayerRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AcceptPlayerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerRequest.uuid)
  return uuid_.GetNoArena();
}
inline void AcceptPlayerRequest::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.engine.AcceptPlayerRequest.uuid)
}
inline void AcceptPlayerRequest::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.engine.AcceptPlayerRequest.uuid)
}
inline void AcceptPlayerRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.engine.AcceptPlayerRequest.uuid)
}
inline void AcceptPlayerRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.engine.AcceptPlayerRequest.uuid)
}
inline std::string* AcceptPlayerRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.engine.AcceptPlayerRequest.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AcceptPlayerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.engine.AcceptPlayerRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.engine.AcceptPlayerRequest.uuid)
}

// -------------------------------------------------------------------

// AcceptPlayerResponse

// .minecpp.engine.PlayerAcceptState state = 1;
inline void AcceptPlayerResponse::clear_state() {
  state_ = 0;
}
inline ::minecpp::engine::PlayerAcceptState AcceptPlayerResponse::state() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerResponse.state)
  return static_cast< ::minecpp::engine::PlayerAcceptState >(state_);
}
inline void AcceptPlayerResponse::set_state(::minecpp::engine::PlayerAcceptState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.AcceptPlayerResponse.state)
}

// uint32 player_id = 2;
inline void AcceptPlayerResponse::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptPlayerResponse::player_id() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerResponse.player_id)
  return player_id_;
}
inline void AcceptPlayerResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.AcceptPlayerResponse.player_id)
}

// uint32 node_id = 3;
inline void AcceptPlayerResponse::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptPlayerResponse::node_id() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerResponse.node_id)
  return node_id_;
}
inline void AcceptPlayerResponse::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.AcceptPlayerResponse.node_id)
}

// .minecpp.engine.GamePlay game_info = 4;
inline bool AcceptPlayerResponse::has_game_info() const {
  return this != internal_default_instance() && game_info_ != nullptr;
}
inline void AcceptPlayerResponse::clear_game_info() {
  if (GetArenaNoVirtual() == nullptr && game_info_ != nullptr) {
    delete game_info_;
  }
  game_info_ = nullptr;
}
inline const ::minecpp::engine::GamePlay& AcceptPlayerResponse::game_info() const {
  const ::minecpp::engine::GamePlay* p = game_info_;
  // @@protoc_insertion_point(field_get:minecpp.engine.AcceptPlayerResponse.game_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::minecpp::engine::GamePlay*>(
      &::minecpp::engine::_GamePlay_default_instance_);
}
inline ::minecpp::engine::GamePlay* AcceptPlayerResponse::release_game_info() {
  // @@protoc_insertion_point(field_release:minecpp.engine.AcceptPlayerResponse.game_info)
  
  ::minecpp::engine::GamePlay* temp = game_info_;
  game_info_ = nullptr;
  return temp;
}
inline ::minecpp::engine::GamePlay* AcceptPlayerResponse::mutable_game_info() {
  
  if (game_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::engine::GamePlay>(GetArenaNoVirtual());
    game_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:minecpp.engine.AcceptPlayerResponse.game_info)
  return game_info_;
}
inline void AcceptPlayerResponse::set_allocated_game_info(::minecpp::engine::GamePlay* game_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_info_;
  }
  if (game_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    
  } else {
    
  }
  game_info_ = game_info;
  // @@protoc_insertion_point(field_set_allocated:minecpp.engine.AcceptPlayerResponse.game_info)
}

// -------------------------------------------------------------------

// PlayerData

// -------------------------------------------------------------------

// GamePlay

// .minecpp.engine.DimensionType dimension = 1;
inline void GamePlay::clear_dimension() {
  dimension_ = 0;
}
inline ::minecpp::engine::DimensionType GamePlay::dimension() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.dimension)
  return static_cast< ::minecpp::engine::DimensionType >(dimension_);
}
inline void GamePlay::set_dimension(::minecpp::engine::DimensionType value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.dimension)
}

// uint64 seed = 2;
inline void GamePlay::clear_seed() {
  seed_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GamePlay::seed() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.seed)
  return seed_;
}
inline void GamePlay::set_seed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.seed)
}

// .minecpp.engine.GameMode mode = 3;
inline void GamePlay::clear_mode() {
  mode_ = 0;
}
inline ::minecpp::engine::GameMode GamePlay::mode() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.mode)
  return static_cast< ::minecpp::engine::GameMode >(mode_);
}
inline void GamePlay::set_mode(::minecpp::engine::GameMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.mode)
}

// .minecpp.engine.WorldType world = 4;
inline void GamePlay::clear_world() {
  world_ = 0;
}
inline ::minecpp::engine::WorldType GamePlay::world() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.world)
  return static_cast< ::minecpp::engine::WorldType >(world_);
}
inline void GamePlay::set_world(::minecpp::engine::WorldType value) {
  
  world_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.world)
}

// int32 view_distance = 5;
inline void GamePlay::clear_view_distance() {
  view_distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlay::view_distance() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.view_distance)
  return view_distance_;
}
inline void GamePlay::set_view_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_distance_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.view_distance)
}

// bool hardcore = 6;
inline void GamePlay::clear_hardcore() {
  hardcore_ = false;
}
inline bool GamePlay::hardcore() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.hardcore)
  return hardcore_;
}
inline void GamePlay::set_hardcore(bool value) {
  
  hardcore_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.hardcore)
}

// int32 max_players = 7;
inline void GamePlay::clear_max_players() {
  max_players_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePlay::max_players() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.max_players)
  return max_players_;
}
inline void GamePlay::set_max_players(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_players_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.max_players)
}

// bool reduced_debug_info = 8;
inline void GamePlay::clear_reduced_debug_info() {
  reduced_debug_info_ = false;
}
inline bool GamePlay::reduced_debug_info() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.reduced_debug_info)
  return reduced_debug_info_;
}
inline void GamePlay::set_reduced_debug_info(bool value) {
  
  reduced_debug_info_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.reduced_debug_info)
}

// bool do_immediate_respawn = 9;
inline void GamePlay::clear_do_immediate_respawn() {
  do_immediate_respawn_ = false;
}
inline bool GamePlay::do_immediate_respawn() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.do_immediate_respawn)
  return do_immediate_respawn_;
}
inline void GamePlay::set_do_immediate_respawn(bool value) {
  
  do_immediate_respawn_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.do_immediate_respawn)
}

// .minecpp.engine.Difficulty difficulty = 10;
inline void GamePlay::clear_difficulty() {
  difficulty_ = 0;
}
inline ::minecpp::engine::Difficulty GamePlay::difficulty() const {
  // @@protoc_insertion_point(field_get:minecpp.engine.GamePlay.difficulty)
  return static_cast< ::minecpp::engine::Difficulty >(difficulty_);
}
inline void GamePlay::set_difficulty(::minecpp::engine::Difficulty value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:minecpp.engine.GamePlay.difficulty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace minecpp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minecpp::engine::DimensionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::engine::DimensionType>() {
  return ::minecpp::engine::DimensionType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::engine::Difficulty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::engine::Difficulty>() {
  return ::minecpp::engine::Difficulty_descriptor();
}
template <> struct is_proto_enum< ::minecpp::engine::GameMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::engine::GameMode>() {
  return ::minecpp::engine::GameMode_descriptor();
}
template <> struct is_proto_enum< ::minecpp::engine::WorldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::engine::WorldType>() {
  return ::minecpp::engine::WorldType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::engine::PlayerAcceptState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::engine::PlayerAcceptState>() {
  return ::minecpp::engine::PlayerAcceptState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_engine_2eproto
