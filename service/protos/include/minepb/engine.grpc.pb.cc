// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: engine.proto

#include "engine.pb.h"
#include "engine.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minecpp {
namespace engine {

static const char* PlayerService_method_names[] = {
  "/minecpp.engine.PlayerService/AcceptPlayer",
  "/minecpp.engine.PlayerService/SetPlayerPosition",
  "/minecpp.engine.PlayerService/SetPlayerRotation",
  "/minecpp.engine.PlayerService/ChatMessage",
  "/minecpp.engine.PlayerService/ListPlayers",
  "/minecpp.engine.PlayerService/ListPlayerEntities",
  "/minecpp.engine.PlayerService/RemovePlayer",
  "/minecpp.engine.PlayerService/DestroyBlock",
  "/minecpp.engine.PlayerService/UpdatePing",
  "/minecpp.engine.PlayerService/AnimateHand",
  "/minecpp.engine.PlayerService/LoadInitialChunks",
  "/minecpp.engine.PlayerService/GetServiceId",
  "/minecpp.engine.PlayerService/GetServiceStatus",
  "/minecpp.engine.PlayerService/FetchEvents",
};

std::unique_ptr< PlayerService::Stub> PlayerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerService::Stub> stub(new PlayerService::Stub(channel));
  return stub;
}

PlayerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AcceptPlayer_(PlayerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlayerPosition_(PlayerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlayerRotation_(PlayerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChatMessage_(PlayerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPlayers_(PlayerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPlayerEntities_(PlayerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePlayer_(PlayerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyBlock_(PlayerService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePing_(PlayerService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AnimateHand_(PlayerService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadInitialChunks_(PlayerService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceId_(PlayerService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceStatus_(PlayerService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchEvents_(PlayerService_method_names[13], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status PlayerService::Stub::AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::minecpp::engine::AcceptPlayerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AcceptPlayer_, context, request, response);
}

void PlayerService::Stub::experimental_async::AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayer_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AcceptPlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>* PlayerService::Stub::PrepareAsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::AcceptPlayerResponse, ::minecpp::engine::AcceptPlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AcceptPlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>* PlayerService::Stub::AsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAcceptPlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPlayerPosition_, context, request, response);
}

void PlayerService::Stub::experimental_async::SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerPosition_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::SetPlayerPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPlayerPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPlayerPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPlayerRotation_, context, request, response);
}

void PlayerService::Stub::experimental_async::SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerRotation_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlayerRotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::SetPlayerRotationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPlayerRotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPlayerRotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChatMessage_, context, request, response);
}

void PlayerService::Stub::experimental_async::ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChatMessage_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChatMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::ChatMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChatMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChatMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPlayers_, context, request, response);
}

void PlayerService::Stub::experimental_async::ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlayers_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlayers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>* PlayerService::Stub::PrepareAsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::ListPlayersResponse, ::minecpp::engine::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPlayers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>* PlayerService::Stub::AsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPlayersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayerEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPlayerEntities_, context, request, response);
}

void PlayerService::Stub::experimental_async::ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlayerEntities_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPlayerEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>* PlayerService::Stub::PrepareAsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::ListPlayerEntitiesResponse, ::minecpp::engine::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPlayerEntities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>* PlayerService::Stub::AsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPlayerEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePlayer_, context, request, response);
}

void PlayerService::Stub::experimental_async::RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePlayer_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::RemovePlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyBlock_, context, request, response);
}

void PlayerService::Stub::experimental_async::DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyBlock_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::DestroyBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdatePing_, context, request, response);
}

void PlayerService::Stub::experimental_async::UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePing_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::UpdatePingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdatePing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AnimateHand_, context, request, response);
}

void PlayerService::Stub::experimental_async::AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnimateHand_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnimateHand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::AnimateHandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AnimateHand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnimateHandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::minecpp::engine::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadInitialChunks_, context, request, response);
}

void PlayerService::Stub::experimental_async::LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadInitialChunks_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadInitialChunks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::PrepareAsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::EmptyResponse, ::minecpp::engine::LoadInitialChunksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadInitialChunks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PlayerService::Stub::AsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadInitialChunksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceId_, context, request, response);
}

void PlayerService::Stub::experimental_async::GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceId_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>* PlayerService::Stub::PrepareAsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::GetServiceIdResponse, ::minecpp::engine::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>* PlayerService::Stub::AsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerService::Stub::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceStatus_, context, request, response);
}

void PlayerService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>* PlayerService::Stub::PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::engine::GetServiceStatusResponse, ::minecpp::engine::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>* PlayerService::Stub::AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::minecpp::engine::Event>* PlayerService::Stub::FetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::minecpp::engine::Event>::Create(channel_.get(), rpcmethod_FetchEvents_, context, request);
}

void PlayerService::Stub::experimental_async::FetchEvents(::grpc::ClientContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::minecpp::engine::Event>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::minecpp::engine::Event>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::minecpp::engine::Event>* PlayerService::Stub::AsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minecpp::engine::Event>::Create(channel_.get(), cq, rpcmethod_FetchEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::minecpp::engine::Event>* PlayerService::Stub::PrepareAsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::minecpp::engine::Event>::Create(channel_.get(), cq, rpcmethod_FetchEvents_, context, request, false, nullptr);
}

PlayerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::AcceptPlayerRequest* req,
             ::minecpp::engine::AcceptPlayerResponse* resp) {
               return service->AcceptPlayer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::SetPlayerPositionRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->SetPlayerPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::SetPlayerRotationRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->SetPlayerRotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::ChatMessageRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->ChatMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::EmptyRequest* req,
             ::minecpp::engine::ListPlayersResponse* resp) {
               return service->ListPlayers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::EmptyRequest* req,
             ::minecpp::engine::ListPlayerEntitiesResponse* resp) {
               return service->ListPlayerEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::RemovePlayerRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->RemovePlayer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::DestroyBlockRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->DestroyBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::UpdatePingRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->UpdatePing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::AnimateHandRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->AnimateHand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::LoadInitialChunksRequest* req,
             ::minecpp::engine::EmptyResponse* resp) {
               return service->LoadInitialChunks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::EmptyRequest* req,
             ::minecpp::engine::GetServiceIdResponse* resp) {
               return service->GetServiceId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::EmptyRequest* req,
             ::minecpp::engine::GetServiceStatusResponse* resp) {
               return service->GetServiceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PlayerService::Service, ::minecpp::engine::FetchEventsRequest, ::minecpp::engine::Event>(
          [](PlayerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::engine::FetchEventsRequest* req,
             ::grpc::ServerWriter<::minecpp::engine::Event>* writer) {
               return service->FetchEvents(ctx, req, writer);
             }, this)));
}

PlayerService::Service::~Service() {
}

::grpc::Status PlayerService::Service::AcceptPlayer(::grpc::ServerContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::SetPlayerPosition(::grpc::ServerContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::SetPlayerRotation(::grpc::ServerContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::ChatMessage(::grpc::ServerContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::ListPlayers(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::ListPlayerEntities(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::RemovePlayer(::grpc::ServerContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::DestroyBlock(::grpc::ServerContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::UpdatePing(::grpc::ServerContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::AnimateHand(::grpc::ServerContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::LoadInitialChunks(::grpc::ServerContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::GetServiceId(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::GetServiceStatus(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::FetchEvents(::grpc::ServerContext* context, const ::minecpp::engine::FetchEventsRequest* request, ::grpc::ServerWriter< ::minecpp::engine::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minecpp
}  // namespace engine

