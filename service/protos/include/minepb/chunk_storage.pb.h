// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunk_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chunk_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chunk_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "chunk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chunk_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chunk_5fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunk_5fstorage_2eproto;
namespace minecpp {
namespace chunk_storage {
class AddReferencesRequest;
class AddReferencesRequestDefaultTypeInternal;
extern AddReferencesRequestDefaultTypeInternal _AddReferencesRequest_default_instance_;
class AddReferencesResponse;
class AddReferencesResponseDefaultTypeInternal;
extern AddReferencesResponseDefaultTypeInternal _AddReferencesResponse_default_instance_;
class Coord;
class CoordDefaultTypeInternal;
extern CoordDefaultTypeInternal _Coord_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class HeightAtRequest;
class HeightAtRequestDefaultTypeInternal;
extern HeightAtRequestDefaultTypeInternal _HeightAtRequest_default_instance_;
class HeightAtResponse;
class HeightAtResponseDefaultTypeInternal;
extern HeightAtResponseDefaultTypeInternal _HeightAtResponse_default_instance_;
class LoadChunkRequest;
class LoadChunkRequestDefaultTypeInternal;
extern LoadChunkRequestDefaultTypeInternal _LoadChunkRequest_default_instance_;
class RemoveReferencesRequest;
class RemoveReferencesRequestDefaultTypeInternal;
extern RemoveReferencesRequestDefaultTypeInternal _RemoveReferencesRequest_default_instance_;
class SetBlockRequest;
class SetBlockRequestDefaultTypeInternal;
extern SetBlockRequestDefaultTypeInternal _SetBlockRequest_default_instance_;
}  // namespace chunk_storage
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::chunk_storage::AddReferencesRequest* Arena::CreateMaybeMessage<::minecpp::chunk_storage::AddReferencesRequest>(Arena*);
template<> ::minecpp::chunk_storage::AddReferencesResponse* Arena::CreateMaybeMessage<::minecpp::chunk_storage::AddReferencesResponse>(Arena*);
template<> ::minecpp::chunk_storage::Coord* Arena::CreateMaybeMessage<::minecpp::chunk_storage::Coord>(Arena*);
template<> ::minecpp::chunk_storage::EmptyResponse* Arena::CreateMaybeMessage<::minecpp::chunk_storage::EmptyResponse>(Arena*);
template<> ::minecpp::chunk_storage::HeightAtRequest* Arena::CreateMaybeMessage<::minecpp::chunk_storage::HeightAtRequest>(Arena*);
template<> ::minecpp::chunk_storage::HeightAtResponse* Arena::CreateMaybeMessage<::minecpp::chunk_storage::HeightAtResponse>(Arena*);
template<> ::minecpp::chunk_storage::LoadChunkRequest* Arena::CreateMaybeMessage<::minecpp::chunk_storage::LoadChunkRequest>(Arena*);
template<> ::minecpp::chunk_storage::RemoveReferencesRequest* Arena::CreateMaybeMessage<::minecpp::chunk_storage::RemoveReferencesRequest>(Arena*);
template<> ::minecpp::chunk_storage::SetBlockRequest* Arena::CreateMaybeMessage<::minecpp::chunk_storage::SetBlockRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace chunk_storage {

enum ReferenceStatus : int {
  OK = 0,
  MUST_MOVE = 1,
  ReferenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReferenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReferenceStatus_IsValid(int value);
constexpr ReferenceStatus ReferenceStatus_MIN = OK;
constexpr ReferenceStatus ReferenceStatus_MAX = MUST_MOVE;
constexpr int ReferenceStatus_ARRAYSIZE = ReferenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceStatus_descriptor();
template<typename T>
inline const std::string& ReferenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReferenceStatus_descriptor(), enum_t_value);
}
inline bool ReferenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReferenceStatus>(
    ReferenceStatus_descriptor(), name, value);
}
// ===================================================================

class LoadChunkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.LoadChunkRequest) */ {
 public:
  inline LoadChunkRequest() : LoadChunkRequest(nullptr) {}
  virtual ~LoadChunkRequest();

  LoadChunkRequest(const LoadChunkRequest& from);
  LoadChunkRequest(LoadChunkRequest&& from) noexcept
    : LoadChunkRequest() {
    *this = ::std::move(from);
  }

  inline LoadChunkRequest& operator=(const LoadChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadChunkRequest& operator=(LoadChunkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadChunkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadChunkRequest* internal_default_instance() {
    return reinterpret_cast<const LoadChunkRequest*>(
               &_LoadChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadChunkRequest& a, LoadChunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadChunkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadChunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadChunkRequest* New() const final {
    return CreateMaybeMessage<LoadChunkRequest>(nullptr);
  }

  LoadChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadChunkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadChunkRequest& from);
  void MergeFrom(const LoadChunkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadChunkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.LoadChunkRequest";
  }
  protected:
  explicit LoadChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 2;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.LoadChunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class SetBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.SetBlockRequest) */ {
 public:
  inline SetBlockRequest() : SetBlockRequest(nullptr) {}
  virtual ~SetBlockRequest();

  SetBlockRequest(const SetBlockRequest& from);
  SetBlockRequest(SetBlockRequest&& from) noexcept
    : SetBlockRequest() {
    *this = ::std::move(from);
  }

  inline SetBlockRequest& operator=(const SetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBlockRequest& operator=(SetBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const SetBlockRequest*>(
               &_SetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetBlockRequest& a, SetBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBlockRequest* New() const final {
    return CreateMaybeMessage<SetBlockRequest>(nullptr);
  }

  SetBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBlockRequest& from);
  void MergeFrom(const SetBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.SetBlockRequest";
  }
  protected:
  explicit SetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 3;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.SetBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class Coord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.Coord) */ {
 public:
  inline Coord() : Coord(nullptr) {}
  virtual ~Coord();

  Coord(const Coord& from);
  Coord(Coord&& from) noexcept
    : Coord() {
    *this = ::std::move(from);
  }

  inline Coord& operator=(const Coord& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coord& operator=(Coord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coord* internal_default_instance() {
    return reinterpret_cast<const Coord*>(
               &_Coord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Coord& a, Coord& b) {
    a.Swap(&b);
  }
  inline void Swap(Coord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coord* New() const final {
    return CreateMaybeMessage<Coord>(nullptr);
  }

  Coord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coord& from);
  void MergeFrom(const Coord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.Coord";
  }
  protected:
  explicit Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 2;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.Coord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class AddReferencesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.AddReferencesRequest) */ {
 public:
  inline AddReferencesRequest() : AddReferencesRequest(nullptr) {}
  virtual ~AddReferencesRequest();

  AddReferencesRequest(const AddReferencesRequest& from);
  AddReferencesRequest(AddReferencesRequest&& from) noexcept
    : AddReferencesRequest() {
    *this = ::std::move(from);
  }

  inline AddReferencesRequest& operator=(const AddReferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReferencesRequest& operator=(AddReferencesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReferencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReferencesRequest* internal_default_instance() {
    return reinterpret_cast<const AddReferencesRequest*>(
               &_AddReferencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddReferencesRequest& a, AddReferencesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReferencesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReferencesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReferencesRequest* New() const final {
    return CreateMaybeMessage<AddReferencesRequest>(nullptr);
  }

  AddReferencesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReferencesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReferencesRequest& from);
  void MergeFrom(const AddReferencesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReferencesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.AddReferencesRequest";
  }
  protected:
  explicit AddReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 3,
    kEngineIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // repeated .minecpp.chunk_storage.Coord coords = 3;
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  ::minecpp::chunk_storage::Coord* mutable_coords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >*
      mutable_coords();
  private:
  const ::minecpp::chunk_storage::Coord& _internal_coords(int index) const;
  ::minecpp::chunk_storage::Coord* _internal_add_coords();
  public:
  const ::minecpp::chunk_storage::Coord& coords(int index) const;
  ::minecpp::chunk_storage::Coord* add_coords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >&
      coords() const;

  // bytes engine_id = 1;
  void clear_engine_id();
  const std::string& engine_id() const;
  void set_engine_id(const std::string& value);
  void set_engine_id(std::string&& value);
  void set_engine_id(const char* value);
  void set_engine_id(const void* value, size_t size);
  std::string* mutable_engine_id();
  std::string* release_engine_id();
  void set_allocated_engine_id(std::string* engine_id);
  private:
  const std::string& _internal_engine_id() const;
  void _internal_set_engine_id(const std::string& value);
  std::string* _internal_mutable_engine_id();
  public:

  // bytes player_id = 2;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const void* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.AddReferencesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord > coords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class AddReferencesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.AddReferencesResponse) */ {
 public:
  inline AddReferencesResponse() : AddReferencesResponse(nullptr) {}
  virtual ~AddReferencesResponse();

  AddReferencesResponse(const AddReferencesResponse& from);
  AddReferencesResponse(AddReferencesResponse&& from) noexcept
    : AddReferencesResponse() {
    *this = ::std::move(from);
  }

  inline AddReferencesResponse& operator=(const AddReferencesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddReferencesResponse& operator=(AddReferencesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddReferencesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReferencesResponse* internal_default_instance() {
    return reinterpret_cast<const AddReferencesResponse*>(
               &_AddReferencesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddReferencesResponse& a, AddReferencesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddReferencesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddReferencesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddReferencesResponse* New() const final {
    return CreateMaybeMessage<AddReferencesResponse>(nullptr);
  }

  AddReferencesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddReferencesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddReferencesResponse& from);
  void MergeFrom(const AddReferencesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReferencesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.AddReferencesResponse";
  }
  protected:
  explicit AddReferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetEngineIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes target_engine_id = 2;
  void clear_target_engine_id();
  const std::string& target_engine_id() const;
  void set_target_engine_id(const std::string& value);
  void set_target_engine_id(std::string&& value);
  void set_target_engine_id(const char* value);
  void set_target_engine_id(const void* value, size_t size);
  std::string* mutable_target_engine_id();
  std::string* release_target_engine_id();
  void set_allocated_target_engine_id(std::string* target_engine_id);
  private:
  const std::string& _internal_target_engine_id() const;
  void _internal_set_target_engine_id(const std::string& value);
  std::string* _internal_mutable_target_engine_id();
  public:

  // .minecpp.chunk_storage.ReferenceStatus status = 1;
  void clear_status();
  ::minecpp::chunk_storage::ReferenceStatus status() const;
  void set_status(::minecpp::chunk_storage::ReferenceStatus value);
  private:
  ::minecpp::chunk_storage::ReferenceStatus _internal_status() const;
  void _internal_set_status(::minecpp::chunk_storage::ReferenceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.AddReferencesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_engine_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class RemoveReferencesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.RemoveReferencesRequest) */ {
 public:
  inline RemoveReferencesRequest() : RemoveReferencesRequest(nullptr) {}
  virtual ~RemoveReferencesRequest();

  RemoveReferencesRequest(const RemoveReferencesRequest& from);
  RemoveReferencesRequest(RemoveReferencesRequest&& from) noexcept
    : RemoveReferencesRequest() {
    *this = ::std::move(from);
  }

  inline RemoveReferencesRequest& operator=(const RemoveReferencesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveReferencesRequest& operator=(RemoveReferencesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveReferencesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveReferencesRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveReferencesRequest*>(
               &_RemoveReferencesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveReferencesRequest& a, RemoveReferencesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveReferencesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveReferencesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveReferencesRequest* New() const final {
    return CreateMaybeMessage<RemoveReferencesRequest>(nullptr);
  }

  RemoveReferencesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveReferencesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveReferencesRequest& from);
  void MergeFrom(const RemoveReferencesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReferencesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.RemoveReferencesRequest";
  }
  protected:
  explicit RemoveReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .minecpp.chunk_storage.Coord coords = 2;
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  ::minecpp::chunk_storage::Coord* mutable_coords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >*
      mutable_coords();
  private:
  const ::minecpp::chunk_storage::Coord& _internal_coords(int index) const;
  ::minecpp::chunk_storage::Coord* _internal_add_coords();
  public:
  const ::minecpp::chunk_storage::Coord& coords(int index) const;
  ::minecpp::chunk_storage::Coord* add_coords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >&
      coords() const;

  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const void* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.RemoveReferencesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord > coords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class HeightAtRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.HeightAtRequest) */ {
 public:
  inline HeightAtRequest() : HeightAtRequest(nullptr) {}
  virtual ~HeightAtRequest();

  HeightAtRequest(const HeightAtRequest& from);
  HeightAtRequest(HeightAtRequest&& from) noexcept
    : HeightAtRequest() {
    *this = ::std::move(from);
  }

  inline HeightAtRequest& operator=(const HeightAtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightAtRequest& operator=(HeightAtRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightAtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightAtRequest* internal_default_instance() {
    return reinterpret_cast<const HeightAtRequest*>(
               &_HeightAtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HeightAtRequest& a, HeightAtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightAtRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeightAtRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightAtRequest* New() const final {
    return CreateMaybeMessage<HeightAtRequest>(nullptr);
  }

  HeightAtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightAtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightAtRequest& from);
  void MergeFrom(const HeightAtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightAtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.HeightAtRequest";
  }
  protected:
  explicit HeightAtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 2;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.HeightAtRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class HeightAtResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.HeightAtResponse) */ {
 public:
  inline HeightAtResponse() : HeightAtResponse(nullptr) {}
  virtual ~HeightAtResponse();

  HeightAtResponse(const HeightAtResponse& from);
  HeightAtResponse(HeightAtResponse&& from) noexcept
    : HeightAtResponse() {
    *this = ::std::move(from);
  }

  inline HeightAtResponse& operator=(const HeightAtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightAtResponse& operator=(HeightAtResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightAtResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightAtResponse* internal_default_instance() {
    return reinterpret_cast<const HeightAtResponse*>(
               &_HeightAtResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HeightAtResponse& a, HeightAtResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightAtResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeightAtResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightAtResponse* New() const final {
    return CreateMaybeMessage<HeightAtResponse>(nullptr);
  }

  HeightAtResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightAtResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightAtResponse& from);
  void MergeFrom(const HeightAtResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightAtResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.HeightAtResponse";
  }
  protected:
  explicit HeightAtResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.HeightAtResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.chunk_storage.EmptyResponse) */ {
 public:
  inline EmptyResponse() : EmptyResponse(nullptr) {}
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.chunk_storage.EmptyResponse";
  }
  protected:
  explicit EmptyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chunk_5fstorage_2eproto);
    return ::descriptor_table_chunk_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.chunk_storage.EmptyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chunk_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadChunkRequest

// int32 x = 1;
inline void LoadChunkRequest::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadChunkRequest::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadChunkRequest::x() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.LoadChunkRequest.x)
  return _internal_x();
}
inline void LoadChunkRequest::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void LoadChunkRequest::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.LoadChunkRequest.x)
}

// int32 z = 2;
inline void LoadChunkRequest::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadChunkRequest::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadChunkRequest::z() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.LoadChunkRequest.z)
  return _internal_z();
}
inline void LoadChunkRequest::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void LoadChunkRequest::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.LoadChunkRequest.z)
}

// -------------------------------------------------------------------

// SetBlockRequest

// int32 x = 1;
inline void SetBlockRequest::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::x() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.SetBlockRequest.x)
  return _internal_x();
}
inline void SetBlockRequest::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void SetBlockRequest::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.SetBlockRequest.x)
}

// int32 y = 2;
inline void SetBlockRequest::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::y() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.SetBlockRequest.y)
  return _internal_y();
}
inline void SetBlockRequest::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void SetBlockRequest::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.SetBlockRequest.y)
}

// int32 z = 3;
inline void SetBlockRequest::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::z() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.SetBlockRequest.z)
  return _internal_z();
}
inline void SetBlockRequest::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void SetBlockRequest::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.SetBlockRequest.z)
}

// int32 state = 4;
inline void SetBlockRequest::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBlockRequest::state() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.SetBlockRequest.state)
  return _internal_state();
}
inline void SetBlockRequest::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SetBlockRequest::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.SetBlockRequest.state)
}

// -------------------------------------------------------------------

// Coord

// int32 x = 1;
inline void Coord::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coord::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coord::x() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.Coord.x)
  return _internal_x();
}
inline void Coord::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Coord::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.Coord.x)
}

// int32 z = 2;
inline void Coord::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coord::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coord::z() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.Coord.z)
  return _internal_z();
}
inline void Coord::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void Coord::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.Coord.z)
}

// -------------------------------------------------------------------

// AddReferencesRequest

// bytes engine_id = 1;
inline void AddReferencesRequest::clear_engine_id() {
  engine_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddReferencesRequest::engine_id() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.AddReferencesRequest.engine_id)
  return _internal_engine_id();
}
inline void AddReferencesRequest::set_engine_id(const std::string& value) {
  _internal_set_engine_id(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.AddReferencesRequest.engine_id)
}
inline std::string* AddReferencesRequest::mutable_engine_id() {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.AddReferencesRequest.engine_id)
  return _internal_mutable_engine_id();
}
inline const std::string& AddReferencesRequest::_internal_engine_id() const {
  return engine_id_.Get();
}
inline void AddReferencesRequest::_internal_set_engine_id(const std::string& value) {
  
  engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddReferencesRequest::set_engine_id(std::string&& value) {
  
  engine_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.chunk_storage.AddReferencesRequest.engine_id)
}
inline void AddReferencesRequest::set_engine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.chunk_storage.AddReferencesRequest.engine_id)
}
inline void AddReferencesRequest::set_engine_id(const void* value,
    size_t size) {
  
  engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.chunk_storage.AddReferencesRequest.engine_id)
}
inline std::string* AddReferencesRequest::_internal_mutable_engine_id() {
  
  return engine_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddReferencesRequest::release_engine_id() {
  // @@protoc_insertion_point(field_release:minecpp.chunk_storage.AddReferencesRequest.engine_id)
  return engine_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddReferencesRequest::set_allocated_engine_id(std::string* engine_id) {
  if (engine_id != nullptr) {
    
  } else {
    
  }
  engine_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.chunk_storage.AddReferencesRequest.engine_id)
}

// bytes player_id = 2;
inline void AddReferencesRequest::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddReferencesRequest::player_id() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.AddReferencesRequest.player_id)
  return _internal_player_id();
}
inline void AddReferencesRequest::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.AddReferencesRequest.player_id)
}
inline std::string* AddReferencesRequest::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.AddReferencesRequest.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& AddReferencesRequest::_internal_player_id() const {
  return player_id_.Get();
}
inline void AddReferencesRequest::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddReferencesRequest::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.chunk_storage.AddReferencesRequest.player_id)
}
inline void AddReferencesRequest::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.chunk_storage.AddReferencesRequest.player_id)
}
inline void AddReferencesRequest::set_player_id(const void* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.chunk_storage.AddReferencesRequest.player_id)
}
inline std::string* AddReferencesRequest::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddReferencesRequest::release_player_id() {
  // @@protoc_insertion_point(field_release:minecpp.chunk_storage.AddReferencesRequest.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddReferencesRequest::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.chunk_storage.AddReferencesRequest.player_id)
}

// repeated .minecpp.chunk_storage.Coord coords = 3;
inline int AddReferencesRequest::_internal_coords_size() const {
  return coords_.size();
}
inline int AddReferencesRequest::coords_size() const {
  return _internal_coords_size();
}
inline void AddReferencesRequest::clear_coords() {
  coords_.Clear();
}
inline ::minecpp::chunk_storage::Coord* AddReferencesRequest::mutable_coords(int index) {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.AddReferencesRequest.coords)
  return coords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >*
AddReferencesRequest::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:minecpp.chunk_storage.AddReferencesRequest.coords)
  return &coords_;
}
inline const ::minecpp::chunk_storage::Coord& AddReferencesRequest::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline const ::minecpp::chunk_storage::Coord& AddReferencesRequest::coords(int index) const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.AddReferencesRequest.coords)
  return _internal_coords(index);
}
inline ::minecpp::chunk_storage::Coord* AddReferencesRequest::_internal_add_coords() {
  return coords_.Add();
}
inline ::minecpp::chunk_storage::Coord* AddReferencesRequest::add_coords() {
  // @@protoc_insertion_point(field_add:minecpp.chunk_storage.AddReferencesRequest.coords)
  return _internal_add_coords();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >&
AddReferencesRequest::coords() const {
  // @@protoc_insertion_point(field_list:minecpp.chunk_storage.AddReferencesRequest.coords)
  return coords_;
}

// -------------------------------------------------------------------

// AddReferencesResponse

// .minecpp.chunk_storage.ReferenceStatus status = 1;
inline void AddReferencesResponse::clear_status() {
  status_ = 0;
}
inline ::minecpp::chunk_storage::ReferenceStatus AddReferencesResponse::_internal_status() const {
  return static_cast< ::minecpp::chunk_storage::ReferenceStatus >(status_);
}
inline ::minecpp::chunk_storage::ReferenceStatus AddReferencesResponse::status() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.AddReferencesResponse.status)
  return _internal_status();
}
inline void AddReferencesResponse::_internal_set_status(::minecpp::chunk_storage::ReferenceStatus value) {
  
  status_ = value;
}
inline void AddReferencesResponse::set_status(::minecpp::chunk_storage::ReferenceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.AddReferencesResponse.status)
}

// bytes target_engine_id = 2;
inline void AddReferencesResponse::clear_target_engine_id() {
  target_engine_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddReferencesResponse::target_engine_id() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
  return _internal_target_engine_id();
}
inline void AddReferencesResponse::set_target_engine_id(const std::string& value) {
  _internal_set_target_engine_id(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
}
inline std::string* AddReferencesResponse::mutable_target_engine_id() {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
  return _internal_mutable_target_engine_id();
}
inline const std::string& AddReferencesResponse::_internal_target_engine_id() const {
  return target_engine_id_.Get();
}
inline void AddReferencesResponse::_internal_set_target_engine_id(const std::string& value) {
  
  target_engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddReferencesResponse::set_target_engine_id(std::string&& value) {
  
  target_engine_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
}
inline void AddReferencesResponse::set_target_engine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
}
inline void AddReferencesResponse::set_target_engine_id(const void* value,
    size_t size) {
  
  target_engine_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
}
inline std::string* AddReferencesResponse::_internal_mutable_target_engine_id() {
  
  return target_engine_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddReferencesResponse::release_target_engine_id() {
  // @@protoc_insertion_point(field_release:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
  return target_engine_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddReferencesResponse::set_allocated_target_engine_id(std::string* target_engine_id) {
  if (target_engine_id != nullptr) {
    
  } else {
    
  }
  target_engine_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_engine_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.chunk_storage.AddReferencesResponse.target_engine_id)
}

// -------------------------------------------------------------------

// RemoveReferencesRequest

// bytes player_id = 1;
inline void RemoveReferencesRequest::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveReferencesRequest::player_id() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
  return _internal_player_id();
}
inline void RemoveReferencesRequest::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
}
inline std::string* RemoveReferencesRequest::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& RemoveReferencesRequest::_internal_player_id() const {
  return player_id_.Get();
}
inline void RemoveReferencesRequest::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveReferencesRequest::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
}
inline void RemoveReferencesRequest::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
}
inline void RemoveReferencesRequest::set_player_id(const void* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
}
inline std::string* RemoveReferencesRequest::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveReferencesRequest::release_player_id() {
  // @@protoc_insertion_point(field_release:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveReferencesRequest::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.chunk_storage.RemoveReferencesRequest.player_id)
}

// repeated .minecpp.chunk_storage.Coord coords = 2;
inline int RemoveReferencesRequest::_internal_coords_size() const {
  return coords_.size();
}
inline int RemoveReferencesRequest::coords_size() const {
  return _internal_coords_size();
}
inline void RemoveReferencesRequest::clear_coords() {
  coords_.Clear();
}
inline ::minecpp::chunk_storage::Coord* RemoveReferencesRequest::mutable_coords(int index) {
  // @@protoc_insertion_point(field_mutable:minecpp.chunk_storage.RemoveReferencesRequest.coords)
  return coords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >*
RemoveReferencesRequest::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:minecpp.chunk_storage.RemoveReferencesRequest.coords)
  return &coords_;
}
inline const ::minecpp::chunk_storage::Coord& RemoveReferencesRequest::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline const ::minecpp::chunk_storage::Coord& RemoveReferencesRequest::coords(int index) const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.RemoveReferencesRequest.coords)
  return _internal_coords(index);
}
inline ::minecpp::chunk_storage::Coord* RemoveReferencesRequest::_internal_add_coords() {
  return coords_.Add();
}
inline ::minecpp::chunk_storage::Coord* RemoveReferencesRequest::add_coords() {
  // @@protoc_insertion_point(field_add:minecpp.chunk_storage.RemoveReferencesRequest.coords)
  return _internal_add_coords();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::chunk_storage::Coord >&
RemoveReferencesRequest::coords() const {
  // @@protoc_insertion_point(field_list:minecpp.chunk_storage.RemoveReferencesRequest.coords)
  return coords_;
}

// -------------------------------------------------------------------

// HeightAtRequest

// int32 x = 1;
inline void HeightAtRequest::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtRequest::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtRequest::x() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.HeightAtRequest.x)
  return _internal_x();
}
inline void HeightAtRequest::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void HeightAtRequest::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.HeightAtRequest.x)
}

// int32 z = 2;
inline void HeightAtRequest::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtRequest::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtRequest::z() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.HeightAtRequest.z)
  return _internal_z();
}
inline void HeightAtRequest::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void HeightAtRequest::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.HeightAtRequest.z)
}

// -------------------------------------------------------------------

// HeightAtResponse

// int32 height = 1;
inline void HeightAtResponse::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeightAtResponse::height() const {
  // @@protoc_insertion_point(field_get:minecpp.chunk_storage.HeightAtResponse.height)
  return _internal_height();
}
inline void HeightAtResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void HeightAtResponse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:minecpp.chunk_storage.HeightAtResponse.height)
}

// -------------------------------------------------------------------

// EmptyResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunk_storage
}  // namespace minecpp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minecpp::chunk_storage::ReferenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::chunk_storage::ReferenceStatus>() {
  return ::minecpp::chunk_storage::ReferenceStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chunk_5fstorage_2eproto
