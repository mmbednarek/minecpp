// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace minecpp {
namespace game {
class GamePlayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlay> _instance;
} _GamePlay_default_instance_;
}  // namespace game
}  // namespace minecpp
static void InitDefaultsscc_info_GamePlay_game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minecpp::game::_GamePlay_default_instance_;
    new (ptr) ::minecpp::game::GamePlay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::minecpp::game::GamePlay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlay_game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlay_game_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_game_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, dimension_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, seed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, world_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, view_distance_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, hardcore_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, max_players_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, reduced_debug_info_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, do_immediate_respawn_),
  PROTOBUF_FIELD_OFFSET(::minecpp::game::GamePlay, difficulty_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minecpp::game::GamePlay)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::game::_GamePlay_default_instance_),
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\014minecpp.game\"\274\002\n\010GamePlay\022"
  ".\n\tdimension\030\001 \001(\0162\033.minecpp.game.Dimens"
  "ionType\022\014\n\004seed\030\002 \001(\004\022$\n\004mode\030\003 \001(\0162\026.mi"
  "necpp.game.GameMode\022&\n\005world\030\004 \001(\0162\027.min"
  "ecpp.game.WorldType\022\025\n\rview_distance\030\005 \001"
  "(\005\022\020\n\010hardcore\030\006 \001(\010\022\023\n\013max_players\030\007 \001("
  "\005\022\032\n\022reduced_debug_info\030\010 \001(\010\022\034\n\024do_imme"
  "diate_respawn\030\t \001(\010\022,\n\ndifficulty\030\n \001(\0162"
  "\030.minecpp.game.Difficulty*3\n\rDimensionTy"
  "pe\022\r\n\tOverworld\020\000\022\n\n\006Nether\020\001\022\007\n\003End\020\002*,"
  "\n\nDifficulty\022\010\n\004Easy\020\000\022\n\n\006Medium\020\001\022\010\n\004Ha"
  "rd\020\002*D\n\010GameMode\022\014\n\010Survival\020\000\022\014\n\010Creati"
  "ve\020\001\022\r\n\tAdventure\020\002\022\r\n\tSpectator\020\003*R\n\tWo"
  "rldType\022\013\n\007Default\020\000\022\010\n\004Flat\020\001\022\017\n\013LargeB"
  "iomes\020\002\022\r\n\tAmplified\020\003\022\016\n\nCustomised\020\004b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_game_2eproto_sccs[1] = {
  &scc_info_GamePlay_game_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto = {
  false, false, descriptor_table_protodef_game_2eproto, "game.proto", 606,
  &descriptor_table_game_2eproto_once, descriptor_table_game_2eproto_sccs, descriptor_table_game_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_game_2eproto::offsets,
  file_level_metadata_game_2eproto, 1, file_level_enum_descriptors_game_2eproto, file_level_service_descriptors_game_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_game_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_game_2eproto)), true);
namespace minecpp {
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
bool DimensionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difficulty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
bool Difficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[2];
}
bool GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[3];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GamePlay::InitAsDefaultInstance() {
}
class GamePlay::_Internal {
 public:
};

GamePlay::GamePlay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.game.GamePlay)
}
GamePlay::GamePlay(const GamePlay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seed_, &from.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&seed_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:minecpp.game.GamePlay)
}

void GamePlay::SharedCtor() {
  ::memset(&seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&seed_)) + sizeof(difficulty_));
}

GamePlay::~GamePlay() {
  // @@protoc_insertion_point(destructor:minecpp.game.GamePlay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePlay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePlay::ArenaDtor(void* object) {
  GamePlay* _this = reinterpret_cast< GamePlay* >(object);
  (void)_this;
}
void GamePlay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlay& GamePlay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlay_game_2eproto.base);
  return *internal_default_instance();
}


void GamePlay::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.game.GamePlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&seed_)) + sizeof(difficulty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .minecpp.game.DimensionType dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dimension(static_cast<::minecpp::game::DimensionType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minecpp.game.GameMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::minecpp::game::GameMode>(val));
        } else goto handle_unusual;
        continue;
      // .minecpp.game.WorldType world = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_world(static_cast<::minecpp::game::WorldType>(val));
        } else goto handle_unusual;
        continue;
      // int32 view_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          view_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hardcore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hardcore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reduced_debug_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reduced_debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_immediate_respawn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          do_immediate_respawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minecpp.game.Difficulty difficulty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_difficulty(static_cast<::minecpp::game::Difficulty>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.game.GamePlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.game.DimensionType dimension = 1;
  if (this->dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dimension(), target);
  }

  // uint64 seed = 2;
  if (this->seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seed(), target);
  }

  // .minecpp.game.GameMode mode = 3;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // .minecpp.game.WorldType world = 4;
  if (this->world() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_world(), target);
  }

  // int32 view_distance = 5;
  if (this->view_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_view_distance(), target);
  }

  // bool hardcore = 6;
  if (this->hardcore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hardcore(), target);
  }

  // int32 max_players = 7;
  if (this->max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_players(), target);
  }

  // bool reduced_debug_info = 8;
  if (this->reduced_debug_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_reduced_debug_info(), target);
  }

  // bool do_immediate_respawn = 9;
  if (this->do_immediate_respawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_do_immediate_respawn(), target);
  }

  // .minecpp.game.Difficulty difficulty = 10;
  if (this->difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.game.GamePlay)
  return target;
}

size_t GamePlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.game.GamePlay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seed = 2;
  if (this->seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seed());
  }

  // .minecpp.game.DimensionType dimension = 1;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dimension());
  }

  // .minecpp.game.GameMode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .minecpp.game.WorldType world = 4;
  if (this->world() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_world());
  }

  // int32 view_distance = 5;
  if (this->view_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view_distance());
  }

  // int32 max_players = 7;
  if (this->max_players() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_players());
  }

  // bool hardcore = 6;
  if (this->hardcore() != 0) {
    total_size += 1 + 1;
  }

  // bool reduced_debug_info = 8;
  if (this->reduced_debug_info() != 0) {
    total_size += 1 + 1;
  }

  // bool do_immediate_respawn = 9;
  if (this->do_immediate_respawn() != 0) {
    total_size += 1 + 1;
  }

  // .minecpp.game.Difficulty difficulty = 10;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_difficulty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minecpp.game.GamePlay)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePlay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePlay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minecpp.game.GamePlay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minecpp.game.GamePlay)
    MergeFrom(*source);
  }
}

void GamePlay::MergeFrom(const GamePlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.game.GamePlay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from.dimension() != 0) {
    _internal_set_dimension(from._internal_dimension());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.world() != 0) {
    _internal_set_world(from._internal_world());
  }
  if (from.view_distance() != 0) {
    _internal_set_view_distance(from._internal_view_distance());
  }
  if (from.max_players() != 0) {
    _internal_set_max_players(from._internal_max_players());
  }
  if (from.hardcore() != 0) {
    _internal_set_hardcore(from._internal_hardcore());
  }
  if (from.reduced_debug_info() != 0) {
    _internal_set_reduced_debug_info(from._internal_reduced_debug_info());
  }
  if (from.do_immediate_respawn() != 0) {
    _internal_set_do_immediate_respawn(from._internal_do_immediate_respawn());
  }
  if (from.difficulty() != 0) {
    _internal_set_difficulty(from._internal_difficulty());
  }
}

void GamePlay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minecpp.game.GamePlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlay::CopyFrom(const GamePlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.game.GamePlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlay::IsInitialized() const {
  return true;
}

void GamePlay::InternalSwap(GamePlay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlay, difficulty_)
      + sizeof(GamePlay::difficulty_)
      - PROTOBUF_FIELD_OFFSET(GamePlay, seed_)>(
          reinterpret_cast<char*>(&seed_),
          reinterpret_cast<char*>(&other->seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlay::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::game::GamePlay* Arena::CreateMaybeMessage< ::minecpp::game::GamePlay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::game::GamePlay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
