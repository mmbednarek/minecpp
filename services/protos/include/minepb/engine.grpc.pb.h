// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: engine.proto
#ifndef GRPC_engine_2eproto__INCLUDED
#define GRPC_engine_2eproto__INCLUDED

#include "engine.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace minecpp {
namespace engine {

class PlayerService final {
 public:
  static constexpr char const* service_full_name() {
    return "minecpp.engine.PlayerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::minecpp::engine::AcceptPlayerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>> AsyncAcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>>(AsyncAcceptPlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>> PrepareAsyncAcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>>(PrepareAsyncAcceptPlayerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncSetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncSetPlayerPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncSetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncSetPlayerPositionRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncSetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncSetPlayerRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncSetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncSetPlayerRotationRaw(context, request, cq));
    }
    virtual ::grpc::Status ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncChatMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>> AsyncListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>>(AsyncListPlayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>> PrepareAsyncListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>>(PrepareAsyncListPlayersRaw(context, request, cq));
    }
    virtual ::grpc::Status ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayerEntitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>> AsyncListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>>(AsyncListPlayerEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>> PrepareAsyncListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>>(PrepareAsyncListPlayerEntitiesRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncRemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncRemovePlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncRemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncRemovePlayerRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncDestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncDestroyBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncDestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncDestroyBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncUpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncUpdatePingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncUpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncUpdatePingRaw(context, request, cq));
    }
    virtual ::grpc::Status AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncAnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncAnimateHandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncAnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncAnimateHandRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::minecpp::engine::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> AsyncLoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(AsyncLoadInitialChunksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>> PrepareAsyncLoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>>(PrepareAsyncLoadInitialChunksRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>> AsyncGetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>>(AsyncGetServiceIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>> PrepareAsyncGetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>>(PrepareAsyncGetServiceIdRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::minecpp::engine::Event>> FetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::minecpp::engine::Event>>(FetchEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>> AsyncFetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>>(AsyncFetchEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>> PrepareAsyncFetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>>(PrepareAsyncFetchEventsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FetchEvents(::grpc::ClientContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::ClientReadReactor< ::minecpp::engine::Event>* reactor) = 0;
      #else
      virtual void FetchEvents(::grpc::ClientContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::minecpp::engine::Event>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>* AsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::AcceptPlayerResponse>* PrepareAsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>* AsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayersResponse>* PrepareAsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>* AsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::ListPlayerEntitiesResponse>* PrepareAsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* AsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::EmptyResponse>* PrepareAsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>* AsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceIdResponse>* PrepareAsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::minecpp::engine::GetServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::minecpp::engine::Event>* FetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>* AsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::minecpp::engine::Event>* PrepareAsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::minecpp::engine::AcceptPlayerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>> AsyncAcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>>(AsyncAcceptPlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>> PrepareAsyncAcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>>(PrepareAsyncAcceptPlayerRaw(context, request, cq));
    }
    ::grpc::Status SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncSetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncSetPlayerPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncSetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncSetPlayerPositionRaw(context, request, cq));
    }
    ::grpc::Status SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncSetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncSetPlayerRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncSetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncSetPlayerRotationRaw(context, request, cq));
    }
    ::grpc::Status ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncChatMessageRaw(context, request, cq));
    }
    ::grpc::Status ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>> AsyncListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>>(AsyncListPlayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>> PrepareAsyncListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>>(PrepareAsyncListPlayersRaw(context, request, cq));
    }
    ::grpc::Status ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::ListPlayerEntitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>> AsyncListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>>(AsyncListPlayerEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>> PrepareAsyncListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>>(PrepareAsyncListPlayerEntitiesRaw(context, request, cq));
    }
    ::grpc::Status RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncRemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncRemovePlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncRemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncRemovePlayerRaw(context, request, cq));
    }
    ::grpc::Status DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncDestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncDestroyBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncDestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncDestroyBlockRaw(context, request, cq));
    }
    ::grpc::Status UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncUpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncUpdatePingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncUpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncUpdatePingRaw(context, request, cq));
    }
    ::grpc::Status AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncAnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncAnimateHandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncAnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncAnimateHandRaw(context, request, cq));
    }
    ::grpc::Status LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::minecpp::engine::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> AsyncLoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(AsyncLoadInitialChunksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>> PrepareAsyncLoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>>(PrepareAsyncLoadInitialChunksRaw(context, request, cq));
    }
    ::grpc::Status GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>> AsyncGetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>>(AsyncGetServiceIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>> PrepareAsyncGetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>>(PrepareAsyncGetServiceIdRaw(context, request, cq));
    }
    ::grpc::Status GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::minecpp::engine::GetServiceStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>> AsyncGetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>>(AsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>> PrepareAsyncGetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>>(PrepareAsyncGetServiceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::minecpp::engine::Event>> FetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::minecpp::engine::Event>>(FetchEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minecpp::engine::Event>> AsyncFetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minecpp::engine::Event>>(AsyncFetchEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::minecpp::engine::Event>> PrepareAsyncFetchEvents(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::minecpp::engine::Event>>(PrepareAsyncFetchEventsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptPlayer(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPlayerPosition(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPlayerRotation(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChatMessage(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListPlayers(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListPlayerEntities(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemovePlayer(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DestroyBlock(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePing(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AnimateHand(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadInitialChunks(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceId(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FetchEvents(::grpc::ClientContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::ClientReadReactor< ::minecpp::engine::Event>* reactor) override;
      #else
      void FetchEvents(::grpc::ClientContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::minecpp::engine::Event>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>* AsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::AcceptPlayerResponse>* PrepareAsyncAcceptPlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::AcceptPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncSetPlayerPositionRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncSetPlayerRotationRaw(::grpc::ClientContext* context, const ::minecpp::engine::SetPlayerRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncChatMessageRaw(::grpc::ClientContext* context, const ::minecpp::engine::ChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>* AsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayersResponse>* PrepareAsyncListPlayersRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>* AsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::ListPlayerEntitiesResponse>* PrepareAsyncListPlayerEntitiesRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncRemovePlayerRaw(::grpc::ClientContext* context, const ::minecpp::engine::RemovePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncDestroyBlockRaw(::grpc::ClientContext* context, const ::minecpp::engine::DestroyBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncUpdatePingRaw(::grpc::ClientContext* context, const ::minecpp::engine::UpdatePingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncAnimateHandRaw(::grpc::ClientContext* context, const ::minecpp::engine::AnimateHandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* AsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::EmptyResponse>* PrepareAsyncLoadInitialChunksRaw(::grpc::ClientContext* context, const ::minecpp::engine::LoadInitialChunksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>* AsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceIdResponse>* PrepareAsyncGetServiceIdRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>* AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::minecpp::engine::GetServiceStatusResponse>* PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::engine::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::minecpp::engine::Event>* FetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::minecpp::engine::Event>* AsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::minecpp::engine::Event>* PrepareAsyncFetchEventsRaw(::grpc::ClientContext* context, const ::minecpp::engine::FetchEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptPlayer_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPlayerPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPlayerRotation_;
    const ::grpc::internal::RpcMethod rpcmethod_ChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPlayers_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPlayerEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePlayer_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePing_;
    const ::grpc::internal::RpcMethod rpcmethod_AnimateHand_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadInitialChunks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServiceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AcceptPlayer(::grpc::ServerContext* context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response);
    virtual ::grpc::Status SetPlayerPosition(::grpc::ServerContext* context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status SetPlayerRotation(::grpc::ServerContext* context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status ChatMessage(::grpc::ServerContext* context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status ListPlayers(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response);
    virtual ::grpc::Status ListPlayerEntities(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response);
    virtual ::grpc::Status RemovePlayer(::grpc::ServerContext* context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status DestroyBlock(::grpc::ServerContext* context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status UpdatePing(::grpc::ServerContext* context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status AnimateHand(::grpc::ServerContext* context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status LoadInitialChunks(::grpc::ServerContext* context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response);
    virtual ::grpc::Status GetServiceId(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response);
    virtual ::grpc::Status GetServiceStatus(::grpc::ServerContext* context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response);
    virtual ::grpc::Status FetchEvents(::grpc::ServerContext* context, const ::minecpp::engine::FetchEventsRequest* request, ::grpc::ServerWriter< ::minecpp::engine::Event>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptPlayer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPlayer(::grpc::ServerContext* context, ::minecpp::engine::AcceptPlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::AcceptPlayerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPlayerPosition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPlayerPosition(::grpc::ServerContext* context, ::minecpp::engine::SetPlayerPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPlayerRotation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPlayerRotation(::grpc::ServerContext* context, ::minecpp::engine::SetPlayerRotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChatMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatMessage(::grpc::ServerContext* context, ::minecpp::engine::ChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPlayers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPlayers(::grpc::ServerContext* context, ::minecpp::engine::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::ListPlayersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPlayerEntities() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPlayerEntities(::grpc::ServerContext* context, ::minecpp::engine::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::ListPlayerEntitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePlayer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePlayer(::grpc::ServerContext* context, ::minecpp::engine::RemovePlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyBlock() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyBlock(::grpc::ServerContext* context, ::minecpp::engine::DestroyBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePing() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePing(::grpc::ServerContext* context, ::minecpp::engine::UpdatePingRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnimateHand() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnimateHand(::grpc::ServerContext* context, ::minecpp::engine::AnimateHandRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadInitialChunks() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadInitialChunks(::grpc::ServerContext* context, ::minecpp::engine::LoadInitialChunksRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceId() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceId(::grpc::ServerContext* context, ::minecpp::engine::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::GetServiceIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::minecpp::engine::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::minecpp::engine::GetServiceStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchEvents() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchEvents(::grpc::ServerContext* context, ::minecpp::engine::FetchEventsRequest* request, ::grpc::ServerAsyncWriter< ::minecpp::engine::Event>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AcceptPlayer<WithAsyncMethod_SetPlayerPosition<WithAsyncMethod_SetPlayerRotation<WithAsyncMethod_ChatMessage<WithAsyncMethod_ListPlayers<WithAsyncMethod_ListPlayerEntities<WithAsyncMethod_RemovePlayer<WithAsyncMethod_DestroyBlock<WithAsyncMethod_UpdatePing<WithAsyncMethod_AnimateHand<WithAsyncMethod_LoadInitialChunks<WithAsyncMethod_GetServiceId<WithAsyncMethod_GetServiceStatus<WithAsyncMethod_FetchEvents<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AcceptPlayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::AcceptPlayerRequest* request, ::minecpp::engine::AcceptPlayerResponse* response) { return this->AcceptPlayer(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptPlayer(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptPlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptPlayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPlayerPosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::SetPlayerPositionRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->SetPlayerPosition(context, request, response); }));}
    void SetMessageAllocatorFor_SetPlayerPosition(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPlayerPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPlayerPosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPlayerRotation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::SetPlayerRotationRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->SetPlayerRotation(context, request, response); }));}
    void SetMessageAllocatorFor_SetPlayerRotation(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPlayerRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPlayerRotation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ChatMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::ChatMessageRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->ChatMessage(context, request, response); }));}
    void SetMessageAllocatorFor_ChatMessage(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChatMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListPlayers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayersResponse* response) { return this->ListPlayers(context, request, response); }));}
    void SetMessageAllocatorFor_ListPlayers(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPlayers(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPlayers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListPlayerEntities() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::ListPlayerEntitiesResponse* response) { return this->ListPlayerEntities(context, request, response); }));}
    void SetMessageAllocatorFor_ListPlayerEntities(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPlayerEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPlayerEntities(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemovePlayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::RemovePlayerRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->RemovePlayer(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePlayer(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePlayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DestroyBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::DestroyBlockRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->DestroyBlock(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyBlock(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DestroyBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DestroyBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdatePing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::UpdatePingRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->UpdatePing(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePing(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePing(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AnimateHand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::AnimateHandRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->AnimateHand(context, request, response); }));}
    void SetMessageAllocatorFor_AnimateHand(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AnimateHand(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AnimateHand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadInitialChunks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::LoadInitialChunksRequest* request, ::minecpp::engine::EmptyResponse* response) { return this->LoadInitialChunks(context, request, response); }));}
    void SetMessageAllocatorFor_LoadInitialChunks(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadInitialChunks(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadInitialChunks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceIdResponse* response) { return this->GetServiceId(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceId(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceId(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::EmptyRequest* request, ::minecpp::engine::GetServiceStatusResponse* response) { return this->GetServiceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServiceStatus(
        ::grpc::experimental::MessageAllocator< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FetchEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::minecpp::engine::FetchEventsRequest, ::minecpp::engine::Event>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::minecpp::engine::FetchEventsRequest* request) { return this->FetchEvents(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::minecpp::engine::Event>* FetchEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::minecpp::engine::Event>* FetchEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AcceptPlayer<ExperimentalWithCallbackMethod_SetPlayerPosition<ExperimentalWithCallbackMethod_SetPlayerRotation<ExperimentalWithCallbackMethod_ChatMessage<ExperimentalWithCallbackMethod_ListPlayers<ExperimentalWithCallbackMethod_ListPlayerEntities<ExperimentalWithCallbackMethod_RemovePlayer<ExperimentalWithCallbackMethod_DestroyBlock<ExperimentalWithCallbackMethod_UpdatePing<ExperimentalWithCallbackMethod_AnimateHand<ExperimentalWithCallbackMethod_LoadInitialChunks<ExperimentalWithCallbackMethod_GetServiceId<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_FetchEvents<Service > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AcceptPlayer<ExperimentalWithCallbackMethod_SetPlayerPosition<ExperimentalWithCallbackMethod_SetPlayerRotation<ExperimentalWithCallbackMethod_ChatMessage<ExperimentalWithCallbackMethod_ListPlayers<ExperimentalWithCallbackMethod_ListPlayerEntities<ExperimentalWithCallbackMethod_RemovePlayer<ExperimentalWithCallbackMethod_DestroyBlock<ExperimentalWithCallbackMethod_UpdatePing<ExperimentalWithCallbackMethod_AnimateHand<ExperimentalWithCallbackMethod_LoadInitialChunks<ExperimentalWithCallbackMethod_GetServiceId<ExperimentalWithCallbackMethod_GetServiceStatus<ExperimentalWithCallbackMethod_FetchEvents<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptPlayer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPlayerPosition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPlayerRotation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChatMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPlayers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPlayerEntities() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePlayer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyBlock() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePing() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnimateHand() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadInitialChunks() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceId() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchEvents() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptPlayer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptPlayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPlayerPosition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPlayerPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPlayerRotation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPlayerRotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChatMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPlayers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPlayers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPlayerEntities() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPlayerEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePlayer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePlayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyBlock() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePing() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnimateHand() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnimateHand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadInitialChunks() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadInitialChunks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceId() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServiceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchEvents() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(13, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AcceptPlayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptPlayer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptPlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptPlayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPlayerPosition() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPlayerPosition(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPlayerPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPlayerPosition(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPlayerRotation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPlayerRotation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPlayerRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPlayerRotation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ChatMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChatMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChatMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChatMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListPlayers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPlayers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPlayers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPlayers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListPlayerEntities() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPlayerEntities(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListPlayerEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListPlayerEntities(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemovePlayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePlayer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemovePlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemovePlayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DestroyBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyBlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DestroyBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DestroyBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdatePing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePing(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AnimateHand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AnimateHand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AnimateHand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AnimateHand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadInitialChunks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadInitialChunks(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadInitialChunks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadInitialChunks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetServiceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServiceStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetServiceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetServiceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->FetchEvents(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FetchEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* FetchEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptPlayer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::AcceptPlayerRequest, ::minecpp::engine::AcceptPlayerResponse>* streamer) {
                       return this->StreamedAcceptPlayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcceptPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptPlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AcceptPlayerRequest* /*request*/, ::minecpp::engine::AcceptPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptPlayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::AcceptPlayerRequest,::minecpp::engine::AcceptPlayerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPlayerPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPlayerPosition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::SetPlayerPositionRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedSetPlayerPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPlayerPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPlayerPosition(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerPositionRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPlayerPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::SetPlayerPositionRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPlayerRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPlayerRotation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::SetPlayerRotationRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedSetPlayerRotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPlayerRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPlayerRotation(::grpc::ServerContext* /*context*/, const ::minecpp::engine::SetPlayerRotationRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPlayerRotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::SetPlayerRotationRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChatMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::ChatMessageRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedChatMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChatMessage(::grpc::ServerContext* /*context*/, const ::minecpp::engine::ChatMessageRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::ChatMessageRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPlayers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayersResponse>* streamer) {
                       return this->StreamedListPlayers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPlayers(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPlayers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::EmptyRequest,::minecpp::engine::ListPlayersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPlayerEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPlayerEntities() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::EmptyRequest, ::minecpp::engine::ListPlayerEntitiesResponse>* streamer) {
                       return this->StreamedListPlayerEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPlayerEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPlayerEntities(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::ListPlayerEntitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPlayerEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::EmptyRequest,::minecpp::engine::ListPlayerEntitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePlayer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::RemovePlayerRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedRemovePlayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemovePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePlayer(::grpc::ServerContext* /*context*/, const ::minecpp::engine::RemovePlayerRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePlayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::RemovePlayerRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyBlock() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::DestroyBlockRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedDestroyBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyBlock(::grpc::ServerContext* /*context*/, const ::minecpp::engine::DestroyBlockRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::DestroyBlockRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePing() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::UpdatePingRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedUpdatePing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePing(::grpc::ServerContext* /*context*/, const ::minecpp::engine::UpdatePingRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::UpdatePingRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AnimateHand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AnimateHand() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::AnimateHandRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedAnimateHand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AnimateHand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnimateHand(::grpc::ServerContext* /*context*/, const ::minecpp::engine::AnimateHandRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAnimateHand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::AnimateHandRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadInitialChunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadInitialChunks() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::LoadInitialChunksRequest, ::minecpp::engine::EmptyResponse>* streamer) {
                       return this->StreamedLoadInitialChunks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadInitialChunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadInitialChunks(::grpc::ServerContext* /*context*/, const ::minecpp::engine::LoadInitialChunksRequest* /*request*/, ::minecpp::engine::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadInitialChunks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::LoadInitialChunksRequest,::minecpp::engine::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceId() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceIdResponse>* streamer) {
                       return this->StreamedGetServiceId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceId(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::EmptyRequest,::minecpp::engine::GetServiceIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServiceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServiceStatus() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::minecpp::engine::EmptyRequest, ::minecpp::engine::GetServiceStatusResponse>* streamer) {
                       return this->StreamedGetServiceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServiceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServiceStatus(::grpc::ServerContext* /*context*/, const ::minecpp::engine::EmptyRequest* /*request*/, ::minecpp::engine::GetServiceStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServiceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::minecpp::engine::EmptyRequest,::minecpp::engine::GetServiceStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AcceptPlayer<WithStreamedUnaryMethod_SetPlayerPosition<WithStreamedUnaryMethod_SetPlayerRotation<WithStreamedUnaryMethod_ChatMessage<WithStreamedUnaryMethod_ListPlayers<WithStreamedUnaryMethod_ListPlayerEntities<WithStreamedUnaryMethod_RemovePlayer<WithStreamedUnaryMethod_DestroyBlock<WithStreamedUnaryMethod_UpdatePing<WithStreamedUnaryMethod_AnimateHand<WithStreamedUnaryMethod_LoadInitialChunks<WithStreamedUnaryMethod_GetServiceId<WithStreamedUnaryMethod_GetServiceStatus<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FetchEvents() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::minecpp::engine::FetchEventsRequest, ::minecpp::engine::Event>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::minecpp::engine::FetchEventsRequest, ::minecpp::engine::Event>* streamer) {
                       return this->StreamedFetchEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FetchEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchEvents(::grpc::ServerContext* /*context*/, const ::minecpp::engine::FetchEventsRequest* /*request*/, ::grpc::ServerWriter< ::minecpp::engine::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::minecpp::engine::FetchEventsRequest,::minecpp::engine::Event>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchEvents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AcceptPlayer<WithStreamedUnaryMethod_SetPlayerPosition<WithStreamedUnaryMethod_SetPlayerRotation<WithStreamedUnaryMethod_ChatMessage<WithStreamedUnaryMethod_ListPlayers<WithStreamedUnaryMethod_ListPlayerEntities<WithStreamedUnaryMethod_RemovePlayer<WithStreamedUnaryMethod_DestroyBlock<WithStreamedUnaryMethod_UpdatePing<WithStreamedUnaryMethod_AnimateHand<WithStreamedUnaryMethod_LoadInitialChunks<WithStreamedUnaryMethod_GetServiceId<WithStreamedUnaryMethod_GetServiceStatus<WithSplitStreamingMethod_FetchEvents<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace engine
}  // namespace minecpp


#endif  // GRPC_engine_2eproto__INCLUDED
