// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
namespace minecpp {
namespace events {
class AddPlayer;
class AddPlayerDefaultTypeInternal;
extern AddPlayerDefaultTypeInternal _AddPlayer_default_instance_;
class AnimateHand;
class AnimateHandDefaultTypeInternal;
extern AnimateHandDefaultTypeInternal _AnimateHand_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class ChunkCoord;
class ChunkCoordDefaultTypeInternal;
extern ChunkCoordDefaultTypeInternal _ChunkCoord_default_instance_;
class EntityLook;
class EntityLookDefaultTypeInternal;
extern EntityLookDefaultTypeInternal _EntityLook_default_instance_;
class EntityMove;
class EntityMoveDefaultTypeInternal;
extern EntityMoveDefaultTypeInternal _EntityMove_default_instance_;
class LoadTerrain;
class LoadTerrainDefaultTypeInternal;
extern LoadTerrainDefaultTypeInternal _LoadTerrain_default_instance_;
class PlayerPositionRotation;
class PlayerPositionRotationDefaultTypeInternal;
extern PlayerPositionRotationDefaultTypeInternal _PlayerPositionRotation_default_instance_;
class RemovePlayer;
class RemovePlayerDefaultTypeInternal;
extern RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
class SpawnPlayer;
class SpawnPlayerDefaultTypeInternal;
extern SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
class TransferPlayer;
class TransferPlayerDefaultTypeInternal;
extern TransferPlayerDefaultTypeInternal _TransferPlayer_default_instance_;
class UpdateBlock;
class UpdateBlockDefaultTypeInternal;
extern UpdateBlockDefaultTypeInternal _UpdateBlock_default_instance_;
class UpdatePlayerAbilities;
class UpdatePlayerAbilitiesDefaultTypeInternal;
extern UpdatePlayerAbilitiesDefaultTypeInternal _UpdatePlayerAbilities_default_instance_;
}  // namespace events
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::events::AddPlayer* Arena::CreateMaybeMessage<::minecpp::events::AddPlayer>(Arena*);
template<> ::minecpp::events::AnimateHand* Arena::CreateMaybeMessage<::minecpp::events::AnimateHand>(Arena*);
template<> ::minecpp::events::Chat* Arena::CreateMaybeMessage<::minecpp::events::Chat>(Arena*);
template<> ::minecpp::events::ChunkCoord* Arena::CreateMaybeMessage<::minecpp::events::ChunkCoord>(Arena*);
template<> ::minecpp::events::EntityLook* Arena::CreateMaybeMessage<::minecpp::events::EntityLook>(Arena*);
template<> ::minecpp::events::EntityMove* Arena::CreateMaybeMessage<::minecpp::events::EntityMove>(Arena*);
template<> ::minecpp::events::LoadTerrain* Arena::CreateMaybeMessage<::minecpp::events::LoadTerrain>(Arena*);
template<> ::minecpp::events::PlayerPositionRotation* Arena::CreateMaybeMessage<::minecpp::events::PlayerPositionRotation>(Arena*);
template<> ::minecpp::events::RemovePlayer* Arena::CreateMaybeMessage<::minecpp::events::RemovePlayer>(Arena*);
template<> ::minecpp::events::SpawnPlayer* Arena::CreateMaybeMessage<::minecpp::events::SpawnPlayer>(Arena*);
template<> ::minecpp::events::TransferPlayer* Arena::CreateMaybeMessage<::minecpp::events::TransferPlayer>(Arena*);
template<> ::minecpp::events::UpdateBlock* Arena::CreateMaybeMessage<::minecpp::events::UpdateBlock>(Arena*);
template<> ::minecpp::events::UpdatePlayerAbilities* Arena::CreateMaybeMessage<::minecpp::events::UpdatePlayerAbilities>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace events {

// ===================================================================

class AddPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.AddPlayer) */ {
 public:
  inline AddPlayer() : AddPlayer(nullptr) {}
  virtual ~AddPlayer();

  AddPlayer(const AddPlayer& from);
  AddPlayer(AddPlayer&& from) noexcept
    : AddPlayer() {
    *this = ::std::move(from);
  }

  inline AddPlayer& operator=(const AddPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlayer& operator=(AddPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPlayer* internal_default_instance() {
    return reinterpret_cast<const AddPlayer*>(
               &_AddPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddPlayer& a, AddPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPlayer* New() const final {
    return CreateMaybeMessage<AddPlayer>(nullptr);
  }

  AddPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlayer& from);
  void MergeFrom(const AddPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.AddPlayer";
  }
  protected:
  explicit AddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kGameModeFieldNumber = 3,
    kPingFieldNumber = 4,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 game_mode = 3;
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ping = 4;
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::int32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.AddPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class SpawnPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.SpawnPlayer) */ {
 public:
  inline SpawnPlayer() : SpawnPlayer(nullptr) {}
  virtual ~SpawnPlayer();

  SpawnPlayer(const SpawnPlayer& from);
  SpawnPlayer(SpawnPlayer&& from) noexcept
    : SpawnPlayer() {
    *this = ::std::move(from);
  }

  inline SpawnPlayer& operator=(const SpawnPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnPlayer& operator=(SpawnPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpawnPlayer* internal_default_instance() {
    return reinterpret_cast<const SpawnPlayer*>(
               &_SpawnPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpawnPlayer& a, SpawnPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpawnPlayer* New() const final {
    return CreateMaybeMessage<SpawnPlayer>(nullptr);
  }

  SpawnPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnPlayer& from);
  void MergeFrom(const SpawnPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.SpawnPlayer";
  }
  protected:
  explicit SpawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kIdFieldNumber = 2,
    kYawFieldNumber = 6,
    kZFieldNumber = 5,
    kPitchFieldNumber = 7,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float yaw = 6;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // double z = 5;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.SpawnPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  double x_;
  double y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float yaw_;
  double z_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EntityMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.EntityMove) */ {
 public:
  inline EntityMove() : EntityMove(nullptr) {}
  virtual ~EntityMove();

  EntityMove(const EntityMove& from);
  EntityMove(EntityMove&& from) noexcept
    : EntityMove() {
    *this = ::std::move(from);
  }

  inline EntityMove& operator=(const EntityMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityMove& operator=(EntityMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMove* internal_default_instance() {
    return reinterpret_cast<const EntityMove*>(
               &_EntityMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EntityMove& a, EntityMove& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityMove* New() const final {
    return CreateMaybeMessage<EntityMove>(nullptr);
  }

  EntityMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityMove& from);
  void MergeFrom(const EntityMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.EntityMove";
  }
  protected:
  explicit EntityMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kYawFieldNumber = 6,
    kPitchFieldNumber = 7,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 3;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 4;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 5;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float yaw = 6;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 7;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.EntityMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  float yaw_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EntityLook PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.EntityLook) */ {
 public:
  inline EntityLook() : EntityLook(nullptr) {}
  virtual ~EntityLook();

  EntityLook(const EntityLook& from);
  EntityLook(EntityLook&& from) noexcept
    : EntityLook() {
    *this = ::std::move(from);
  }

  inline EntityLook& operator=(const EntityLook& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityLook& operator=(EntityLook&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityLook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityLook* internal_default_instance() {
    return reinterpret_cast<const EntityLook*>(
               &_EntityLook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EntityLook& a, EntityLook& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityLook* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityLook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityLook* New() const final {
    return CreateMaybeMessage<EntityLook>(nullptr);
  }

  EntityLook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityLook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityLook& from);
  void MergeFrom(const EntityLook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityLook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.EntityLook";
  }
  protected:
  explicit EntityLook(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIdFieldNumber = 2,
    kYawFieldNumber = 3,
    kPitchFieldNumber = 4,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 4;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.EntityLook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float yaw_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class PlayerPositionRotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.PlayerPositionRotation) */ {
 public:
  inline PlayerPositionRotation() : PlayerPositionRotation(nullptr) {}
  virtual ~PlayerPositionRotation();

  PlayerPositionRotation(const PlayerPositionRotation& from);
  PlayerPositionRotation(PlayerPositionRotation&& from) noexcept
    : PlayerPositionRotation() {
    *this = ::std::move(from);
  }

  inline PlayerPositionRotation& operator=(const PlayerPositionRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPositionRotation& operator=(PlayerPositionRotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPositionRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPositionRotation* internal_default_instance() {
    return reinterpret_cast<const PlayerPositionRotation*>(
               &_PlayerPositionRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerPositionRotation& a, PlayerPositionRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPositionRotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPositionRotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerPositionRotation* New() const final {
    return CreateMaybeMessage<PlayerPositionRotation>(nullptr);
  }

  PlayerPositionRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPositionRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPositionRotation& from);
  void MergeFrom(const PlayerPositionRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPositionRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.PlayerPositionRotation";
  }
  protected:
  explicit PlayerPositionRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.events.PlayerPositionRotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class Chat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.Chat) */ {
 public:
  inline Chat() : Chat(nullptr) {}
  virtual ~Chat();

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.Chat";
  }
  protected:
  explicit Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.RemovePlayer) */ {
 public:
  inline RemovePlayer() : RemovePlayer(nullptr) {}
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);
  RemovePlayer(RemovePlayer&& from) noexcept
    : RemovePlayer() {
    *this = ::std::move(from);
  }

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayer& operator=(RemovePlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePlayer* internal_default_instance() {
    return reinterpret_cast<const RemovePlayer*>(
               &_RemovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemovePlayer& a, RemovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const final {
    return CreateMaybeMessage<RemovePlayer>(nullptr);
  }

  RemovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.RemovePlayer";
  }
  protected:
  explicit RemovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 entity_id = 2;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.RemovePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UpdateBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.UpdateBlock) */ {
 public:
  inline UpdateBlock() : UpdateBlock(nullptr) {}
  virtual ~UpdateBlock();

  UpdateBlock(const UpdateBlock& from);
  UpdateBlock(UpdateBlock&& from) noexcept
    : UpdateBlock() {
    *this = ::std::move(from);
  }

  inline UpdateBlock& operator=(const UpdateBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBlock& operator=(UpdateBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBlock* internal_default_instance() {
    return reinterpret_cast<const UpdateBlock*>(
               &_UpdateBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateBlock& a, UpdateBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBlock* New() const final {
    return CreateMaybeMessage<UpdateBlock>(nullptr);
  }

  UpdateBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBlock& from);
  void MergeFrom(const UpdateBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.UpdateBlock";
  }
  protected:
  explicit UpdateBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockPositionFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int64 block_position = 1;
  void clear_block_position();
  ::PROTOBUF_NAMESPACE_ID::int64 block_position() const;
  void set_block_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_position() const;
  void _internal_set_block_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.UpdateBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class AnimateHand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.AnimateHand) */ {
 public:
  inline AnimateHand() : AnimateHand(nullptr) {}
  virtual ~AnimateHand();

  AnimateHand(const AnimateHand& from);
  AnimateHand(AnimateHand&& from) noexcept
    : AnimateHand() {
    *this = ::std::move(from);
  }

  inline AnimateHand& operator=(const AnimateHand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimateHand& operator=(AnimateHand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimateHand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimateHand* internal_default_instance() {
    return reinterpret_cast<const AnimateHand*>(
               &_AnimateHand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnimateHand& a, AnimateHand& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimateHand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimateHand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimateHand* New() const final {
    return CreateMaybeMessage<AnimateHand>(nullptr);
  }

  AnimateHand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimateHand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimateHand& from);
  void MergeFrom(const AnimateHand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimateHand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.AnimateHand";
  }
  protected:
  explicit AnimateHand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kEntityIdFieldNumber = 2,
    kHandFieldNumber = 3,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 entity_id = 2;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hand = 3;
  void clear_hand();
  ::PROTOBUF_NAMESPACE_ID::int32 hand() const;
  void set_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hand() const;
  void _internal_set_hand(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.AnimateHand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class ChunkCoord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.ChunkCoord) */ {
 public:
  inline ChunkCoord() : ChunkCoord(nullptr) {}
  virtual ~ChunkCoord();

  ChunkCoord(const ChunkCoord& from);
  ChunkCoord(ChunkCoord&& from) noexcept
    : ChunkCoord() {
    *this = ::std::move(from);
  }

  inline ChunkCoord& operator=(const ChunkCoord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkCoord& operator=(ChunkCoord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkCoord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkCoord* internal_default_instance() {
    return reinterpret_cast<const ChunkCoord*>(
               &_ChunkCoord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChunkCoord& a, ChunkCoord& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkCoord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkCoord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkCoord* New() const final {
    return CreateMaybeMessage<ChunkCoord>(nullptr);
  }

  ChunkCoord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkCoord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkCoord& from);
  void MergeFrom(const ChunkCoord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkCoord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.ChunkCoord";
  }
  protected:
  explicit ChunkCoord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 z = 2;
  void clear_z();
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z() const;
  void _internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.ChunkCoord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class LoadTerrain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.LoadTerrain) */ {
 public:
  inline LoadTerrain() : LoadTerrain(nullptr) {}
  virtual ~LoadTerrain();

  LoadTerrain(const LoadTerrain& from);
  LoadTerrain(LoadTerrain&& from) noexcept
    : LoadTerrain() {
    *this = ::std::move(from);
  }

  inline LoadTerrain& operator=(const LoadTerrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadTerrain& operator=(LoadTerrain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadTerrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadTerrain* internal_default_instance() {
    return reinterpret_cast<const LoadTerrain*>(
               &_LoadTerrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoadTerrain& a, LoadTerrain& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadTerrain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadTerrain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadTerrain* New() const final {
    return CreateMaybeMessage<LoadTerrain>(nullptr);
  }

  LoadTerrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadTerrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadTerrain& from);
  void MergeFrom(const LoadTerrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadTerrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.LoadTerrain";
  }
  protected:
  explicit LoadTerrain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 3,
    kUuidFieldNumber = 1,
    kCentralChunkFieldNumber = 2,
  };
  // repeated .minecpp.events.ChunkCoord coords = 3;
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  ::minecpp::events::ChunkCoord* mutable_coords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::events::ChunkCoord >*
      mutable_coords();
  private:
  const ::minecpp::events::ChunkCoord& _internal_coords(int index) const;
  ::minecpp::events::ChunkCoord* _internal_add_coords();
  public:
  const ::minecpp::events::ChunkCoord& coords(int index) const;
  ::minecpp::events::ChunkCoord* add_coords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::events::ChunkCoord >&
      coords() const;

  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .minecpp.events.ChunkCoord central_chunk = 2;
  bool has_central_chunk() const;
  private:
  bool _internal_has_central_chunk() const;
  public:
  void clear_central_chunk();
  const ::minecpp::events::ChunkCoord& central_chunk() const;
  ::minecpp::events::ChunkCoord* release_central_chunk();
  ::minecpp::events::ChunkCoord* mutable_central_chunk();
  void set_allocated_central_chunk(::minecpp::events::ChunkCoord* central_chunk);
  private:
  const ::minecpp::events::ChunkCoord& _internal_central_chunk() const;
  ::minecpp::events::ChunkCoord* _internal_mutable_central_chunk();
  public:
  void unsafe_arena_set_allocated_central_chunk(
      ::minecpp::events::ChunkCoord* central_chunk);
  ::minecpp::events::ChunkCoord* unsafe_arena_release_central_chunk();

  // @@protoc_insertion_point(class_scope:minecpp.events.LoadTerrain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::events::ChunkCoord > coords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::minecpp::events::ChunkCoord* central_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class TransferPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.TransferPlayer) */ {
 public:
  inline TransferPlayer() : TransferPlayer(nullptr) {}
  virtual ~TransferPlayer();

  TransferPlayer(const TransferPlayer& from);
  TransferPlayer(TransferPlayer&& from) noexcept
    : TransferPlayer() {
    *this = ::std::move(from);
  }

  inline TransferPlayer& operator=(const TransferPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferPlayer& operator=(TransferPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferPlayer* internal_default_instance() {
    return reinterpret_cast<const TransferPlayer*>(
               &_TransferPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransferPlayer& a, TransferPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferPlayer* New() const final {
    return CreateMaybeMessage<TransferPlayer>(nullptr);
  }

  TransferPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferPlayer& from);
  void MergeFrom(const TransferPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.TransferPlayer";
  }
  protected:
  explicit TransferPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kTargetEngineFieldNumber = 2,
  };
  // bytes player = 1;
  void clear_player();
  const std::string& player() const;
  void set_player(const std::string& value);
  void set_player(std::string&& value);
  void set_player(const char* value);
  void set_player(const void* value, size_t size);
  std::string* mutable_player();
  std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // bytes target_engine = 2;
  void clear_target_engine();
  const std::string& target_engine() const;
  void set_target_engine(const std::string& value);
  void set_target_engine(std::string&& value);
  void set_target_engine(const char* value);
  void set_target_engine(const void* value, size_t size);
  std::string* mutable_target_engine();
  std::string* release_target_engine();
  void set_allocated_target_engine(std::string* target_engine);
  private:
  const std::string& _internal_target_engine() const;
  void _internal_set_target_engine(const std::string& value);
  std::string* _internal_mutable_target_engine();
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.TransferPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_engine_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerAbilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.UpdatePlayerAbilities) */ {
 public:
  inline UpdatePlayerAbilities() : UpdatePlayerAbilities(nullptr) {}
  virtual ~UpdatePlayerAbilities();

  UpdatePlayerAbilities(const UpdatePlayerAbilities& from);
  UpdatePlayerAbilities(UpdatePlayerAbilities&& from) noexcept
    : UpdatePlayerAbilities() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerAbilities& operator=(const UpdatePlayerAbilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerAbilities& operator=(UpdatePlayerAbilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerAbilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePlayerAbilities* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerAbilities*>(
               &_UpdatePlayerAbilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdatePlayerAbilities& a, UpdatePlayerAbilities& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerAbilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerAbilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerAbilities* New() const final {
    return CreateMaybeMessage<UpdatePlayerAbilities>(nullptr);
  }

  UpdatePlayerAbilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerAbilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerAbilities& from);
  void MergeFrom(const UpdatePlayerAbilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerAbilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.UpdatePlayerAbilities";
  }
  protected:
  explicit UpdatePlayerAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kInvulnerableFieldNumber = 2,
    kIsFlyingFieldNumber = 3,
    kAllowFlyingFieldNumber = 4,
    kCreativeModeFieldNumber = 5,
    kWalkSpeedFieldNumber = 7,
    kFlySpeedFieldNumber = 8,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bool invulnerable = 2;
  void clear_invulnerable();
  bool invulnerable() const;
  void set_invulnerable(bool value);
  private:
  bool _internal_invulnerable() const;
  void _internal_set_invulnerable(bool value);
  public:

  // bool is_flying = 3;
  void clear_is_flying();
  bool is_flying() const;
  void set_is_flying(bool value);
  private:
  bool _internal_is_flying() const;
  void _internal_set_is_flying(bool value);
  public:

  // bool allow_flying = 4;
  void clear_allow_flying();
  bool allow_flying() const;
  void set_allow_flying(bool value);
  private:
  bool _internal_allow_flying() const;
  void _internal_set_allow_flying(bool value);
  public:

  // bool creative_mode = 5;
  void clear_creative_mode();
  bool creative_mode() const;
  void set_creative_mode(bool value);
  private:
  bool _internal_creative_mode() const;
  void _internal_set_creative_mode(bool value);
  public:

  // float walk_speed = 7;
  void clear_walk_speed();
  float walk_speed() const;
  void set_walk_speed(float value);
  private:
  float _internal_walk_speed() const;
  void _internal_set_walk_speed(float value);
  public:

  // float fly_speed = 8;
  void clear_fly_speed();
  float fly_speed() const;
  void set_fly_speed(float value);
  private:
  float _internal_fly_speed() const;
  void _internal_set_fly_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.events.UpdatePlayerAbilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  bool invulnerable_;
  bool is_flying_;
  bool allow_flying_;
  bool creative_mode_;
  float walk_speed_;
  float fly_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddPlayer

// bytes uuid = 1;
inline void AddPlayer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddPlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.uuid)
  return _internal_uuid();
}
inline void AddPlayer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.uuid)
}
inline std::string* AddPlayer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.AddPlayer.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& AddPlayer::_internal_uuid() const {
  return uuid_.Get();
}
inline void AddPlayer::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddPlayer::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AddPlayer.uuid)
}
inline void AddPlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.AddPlayer.uuid)
}
inline void AddPlayer::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AddPlayer.uuid)
}
inline std::string* AddPlayer::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddPlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.AddPlayer.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddPlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AddPlayer.uuid)
}

// string name = 2;
inline void AddPlayer::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddPlayer::name() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.name)
  return _internal_name();
}
inline void AddPlayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.name)
}
inline std::string* AddPlayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.AddPlayer.name)
  return _internal_mutable_name();
}
inline const std::string& AddPlayer::_internal_name() const {
  return name_.Get();
}
inline void AddPlayer::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddPlayer::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AddPlayer.name)
}
inline void AddPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.AddPlayer.name)
}
inline void AddPlayer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AddPlayer.name)
}
inline std::string* AddPlayer::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddPlayer::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.events.AddPlayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AddPlayer.name)
}

// int32 game_mode = 3;
inline void AddPlayer::clear_game_mode() {
  game_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.game_mode)
  return _internal_game_mode();
}
inline void AddPlayer::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_mode_ = value;
}
inline void AddPlayer::set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.game_mode)
}

// int32 ping = 4;
inline void AddPlayer::clear_ping() {
  ping_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::ping() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.ping)
  return _internal_ping();
}
inline void AddPlayer::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ping_ = value;
}
inline void AddPlayer::set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.ping)
}

// -------------------------------------------------------------------

// SpawnPlayer

// bytes uuid = 1;
inline void SpawnPlayer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SpawnPlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.uuid)
  return _internal_uuid();
}
inline void SpawnPlayer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.uuid)
}
inline std::string* SpawnPlayer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.SpawnPlayer.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& SpawnPlayer::_internal_uuid() const {
  return uuid_.Get();
}
inline void SpawnPlayer::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SpawnPlayer::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.SpawnPlayer.uuid)
}
inline void SpawnPlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.SpawnPlayer.uuid)
}
inline void SpawnPlayer::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.SpawnPlayer.uuid)
}
inline std::string* SpawnPlayer::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SpawnPlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.SpawnPlayer.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpawnPlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.SpawnPlayer.uuid)
}

// int32 id = 2;
inline void SpawnPlayer::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpawnPlayer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpawnPlayer::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.id)
  return _internal_id();
}
inline void SpawnPlayer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SpawnPlayer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.id)
}

// double x = 3;
inline void SpawnPlayer::clear_x() {
  x_ = 0;
}
inline double SpawnPlayer::_internal_x() const {
  return x_;
}
inline double SpawnPlayer::x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.x)
  return _internal_x();
}
inline void SpawnPlayer::_internal_set_x(double value) {
  
  x_ = value;
}
inline void SpawnPlayer::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.x)
}

// double y = 4;
inline void SpawnPlayer::clear_y() {
  y_ = 0;
}
inline double SpawnPlayer::_internal_y() const {
  return y_;
}
inline double SpawnPlayer::y() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.y)
  return _internal_y();
}
inline void SpawnPlayer::_internal_set_y(double value) {
  
  y_ = value;
}
inline void SpawnPlayer::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.y)
}

// double z = 5;
inline void SpawnPlayer::clear_z() {
  z_ = 0;
}
inline double SpawnPlayer::_internal_z() const {
  return z_;
}
inline double SpawnPlayer::z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.z)
  return _internal_z();
}
inline void SpawnPlayer::_internal_set_z(double value) {
  
  z_ = value;
}
inline void SpawnPlayer::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.z)
}

// float yaw = 6;
inline void SpawnPlayer::clear_yaw() {
  yaw_ = 0;
}
inline float SpawnPlayer::_internal_yaw() const {
  return yaw_;
}
inline float SpawnPlayer::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.yaw)
  return _internal_yaw();
}
inline void SpawnPlayer::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void SpawnPlayer::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.yaw)
}

// float pitch = 7;
inline void SpawnPlayer::clear_pitch() {
  pitch_ = 0;
}
inline float SpawnPlayer::_internal_pitch() const {
  return pitch_;
}
inline float SpawnPlayer::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.pitch)
  return _internal_pitch();
}
inline void SpawnPlayer::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void SpawnPlayer::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.pitch)
}

// -------------------------------------------------------------------

// EntityMove

// bytes uuid = 1;
inline void EntityMove::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityMove::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.uuid)
  return _internal_uuid();
}
inline void EntityMove::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.uuid)
}
inline std::string* EntityMove::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.EntityMove.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& EntityMove::_internal_uuid() const {
  return uuid_.Get();
}
inline void EntityMove::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityMove::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.EntityMove.uuid)
}
inline void EntityMove::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.EntityMove.uuid)
}
inline void EntityMove::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.EntityMove.uuid)
}
inline std::string* EntityMove::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityMove::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.EntityMove.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityMove::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.EntityMove.uuid)
}

// int32 id = 2;
inline void EntityMove::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.id)
  return _internal_id();
}
inline void EntityMove::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void EntityMove::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.id)
}

// int32 x = 3;
inline void EntityMove::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.x)
  return _internal_x();
}
inline void EntityMove::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void EntityMove::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.x)
}

// int32 y = 4;
inline void EntityMove::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::y() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.y)
  return _internal_y();
}
inline void EntityMove::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void EntityMove::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.y)
}

// int32 z = 5;
inline void EntityMove::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.z)
  return _internal_z();
}
inline void EntityMove::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void EntityMove::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.z)
}

// float yaw = 6;
inline void EntityMove::clear_yaw() {
  yaw_ = 0;
}
inline float EntityMove::_internal_yaw() const {
  return yaw_;
}
inline float EntityMove::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.yaw)
  return _internal_yaw();
}
inline void EntityMove::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void EntityMove::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.yaw)
}

// float pitch = 7;
inline void EntityMove::clear_pitch() {
  pitch_ = 0;
}
inline float EntityMove::_internal_pitch() const {
  return pitch_;
}
inline float EntityMove::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.pitch)
  return _internal_pitch();
}
inline void EntityMove::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void EntityMove::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.pitch)
}

// -------------------------------------------------------------------

// EntityLook

// bytes uuid = 1;
inline void EntityLook::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityLook::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.uuid)
  return _internal_uuid();
}
inline void EntityLook::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.uuid)
}
inline std::string* EntityLook::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.EntityLook.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& EntityLook::_internal_uuid() const {
  return uuid_.Get();
}
inline void EntityLook::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityLook::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.EntityLook.uuid)
}
inline void EntityLook::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.EntityLook.uuid)
}
inline void EntityLook::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.EntityLook.uuid)
}
inline std::string* EntityLook::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityLook::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.EntityLook.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityLook::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.EntityLook.uuid)
}

// int32 id = 2;
inline void EntityLook::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityLook::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityLook::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.id)
  return _internal_id();
}
inline void EntityLook::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void EntityLook::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.id)
}

// float yaw = 3;
inline void EntityLook::clear_yaw() {
  yaw_ = 0;
}
inline float EntityLook::_internal_yaw() const {
  return yaw_;
}
inline float EntityLook::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.yaw)
  return _internal_yaw();
}
inline void EntityLook::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void EntityLook::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.yaw)
}

// float pitch = 4;
inline void EntityLook::clear_pitch() {
  pitch_ = 0;
}
inline float EntityLook::_internal_pitch() const {
  return pitch_;
}
inline float EntityLook::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.pitch)
  return _internal_pitch();
}
inline void EntityLook::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void EntityLook::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.pitch)
}

// -------------------------------------------------------------------

// PlayerPositionRotation

// -------------------------------------------------------------------

// Chat

// string message = 1;
inline void Chat::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Chat::message() const {
  // @@protoc_insertion_point(field_get:minecpp.events.Chat.message)
  return _internal_message();
}
inline void Chat::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:minecpp.events.Chat.message)
}
inline std::string* Chat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.Chat.message)
  return _internal_mutable_message();
}
inline const std::string& Chat::_internal_message() const {
  return message_.Get();
}
inline void Chat::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Chat::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.Chat.message)
}
inline void Chat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.Chat.message)
}
inline void Chat::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.Chat.message)
}
inline std::string* Chat::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Chat::release_message() {
  // @@protoc_insertion_point(field_release:minecpp.events.Chat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Chat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.Chat.message)
}

// int32 type = 2;
inline void Chat::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat::type() const {
  // @@protoc_insertion_point(field_get:minecpp.events.Chat.type)
  return _internal_type();
}
inline void Chat::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Chat::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:minecpp.events.Chat.type)
}

// -------------------------------------------------------------------

// RemovePlayer

// bytes uuid = 1;
inline void RemovePlayer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemovePlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.RemovePlayer.uuid)
  return _internal_uuid();
}
inline void RemovePlayer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.RemovePlayer.uuid)
}
inline std::string* RemovePlayer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.RemovePlayer.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& RemovePlayer::_internal_uuid() const {
  return uuid_.Get();
}
inline void RemovePlayer::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemovePlayer::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.RemovePlayer.uuid)
}
inline void RemovePlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.RemovePlayer.uuid)
}
inline void RemovePlayer::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.RemovePlayer.uuid)
}
inline std::string* RemovePlayer::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemovePlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.RemovePlayer.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemovePlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.RemovePlayer.uuid)
}

// int32 entity_id = 2;
inline void RemovePlayer::clear_entity_id() {
  entity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemovePlayer::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemovePlayer::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.RemovePlayer.entity_id)
  return _internal_entity_id();
}
inline void RemovePlayer::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entity_id_ = value;
}
inline void RemovePlayer::set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.events.RemovePlayer.entity_id)
}

// -------------------------------------------------------------------

// UpdateBlock

// int64 block_position = 1;
inline void UpdateBlock::clear_block_position() {
  block_position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateBlock::_internal_block_position() const {
  return block_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateBlock::block_position() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.block_position)
  return _internal_block_position();
}
inline void UpdateBlock::_internal_set_block_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_position_ = value;
}
inline void UpdateBlock::set_block_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_position(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.block_position)
}

// uint32 state = 2;
inline void UpdateBlock::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateBlock::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateBlock::state() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.state)
  return _internal_state();
}
inline void UpdateBlock::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void UpdateBlock::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.state)
}

// -------------------------------------------------------------------

// AnimateHand

// bytes uuid = 1;
inline void AnimateHand::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AnimateHand::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.uuid)
  return _internal_uuid();
}
inline void AnimateHand::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.uuid)
}
inline std::string* AnimateHand::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.AnimateHand.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& AnimateHand::_internal_uuid() const {
  return uuid_.Get();
}
inline void AnimateHand::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnimateHand::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AnimateHand.uuid)
}
inline void AnimateHand::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.AnimateHand.uuid)
}
inline void AnimateHand::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AnimateHand.uuid)
}
inline std::string* AnimateHand::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnimateHand::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.AnimateHand.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnimateHand::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AnimateHand.uuid)
}

// int32 entity_id = 2;
inline void AnimateHand::clear_entity_id() {
  entity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.entity_id)
  return _internal_entity_id();
}
inline void AnimateHand::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entity_id_ = value;
}
inline void AnimateHand::set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.entity_id)
}

// int32 hand = 3;
inline void AnimateHand::clear_hand() {
  hand_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::_internal_hand() const {
  return hand_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::hand() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.hand)
  return _internal_hand();
}
inline void AnimateHand::_internal_set_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hand_ = value;
}
inline void AnimateHand::set_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hand(value);
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.hand)
}

// -------------------------------------------------------------------

// ChunkCoord

// int32 x = 1;
inline void ChunkCoord::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkCoord::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkCoord::x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.ChunkCoord.x)
  return _internal_x();
}
inline void ChunkCoord::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void ChunkCoord::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.events.ChunkCoord.x)
}

// int32 z = 2;
inline void ChunkCoord::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkCoord::_internal_z() const {
  return z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkCoord::z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.ChunkCoord.z)
  return _internal_z();
}
inline void ChunkCoord::_internal_set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
}
inline void ChunkCoord::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.events.ChunkCoord.z)
}

// -------------------------------------------------------------------

// LoadTerrain

// bytes uuid = 1;
inline void LoadTerrain::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoadTerrain::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.LoadTerrain.uuid)
  return _internal_uuid();
}
inline void LoadTerrain::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.LoadTerrain.uuid)
}
inline std::string* LoadTerrain::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.LoadTerrain.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& LoadTerrain::_internal_uuid() const {
  return uuid_.Get();
}
inline void LoadTerrain::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoadTerrain::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.LoadTerrain.uuid)
}
inline void LoadTerrain::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.LoadTerrain.uuid)
}
inline void LoadTerrain::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.LoadTerrain.uuid)
}
inline std::string* LoadTerrain::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoadTerrain::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.LoadTerrain.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadTerrain::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.LoadTerrain.uuid)
}

// .minecpp.events.ChunkCoord central_chunk = 2;
inline bool LoadTerrain::_internal_has_central_chunk() const {
  return this != internal_default_instance() && central_chunk_ != nullptr;
}
inline bool LoadTerrain::has_central_chunk() const {
  return _internal_has_central_chunk();
}
inline void LoadTerrain::clear_central_chunk() {
  if (GetArena() == nullptr && central_chunk_ != nullptr) {
    delete central_chunk_;
  }
  central_chunk_ = nullptr;
}
inline const ::minecpp::events::ChunkCoord& LoadTerrain::_internal_central_chunk() const {
  const ::minecpp::events::ChunkCoord* p = central_chunk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::minecpp::events::ChunkCoord*>(
      &::minecpp::events::_ChunkCoord_default_instance_);
}
inline const ::minecpp::events::ChunkCoord& LoadTerrain::central_chunk() const {
  // @@protoc_insertion_point(field_get:minecpp.events.LoadTerrain.central_chunk)
  return _internal_central_chunk();
}
inline void LoadTerrain::unsafe_arena_set_allocated_central_chunk(
    ::minecpp::events::ChunkCoord* central_chunk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(central_chunk_);
  }
  central_chunk_ = central_chunk;
  if (central_chunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.events.LoadTerrain.central_chunk)
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::release_central_chunk() {
  
  ::minecpp::events::ChunkCoord* temp = central_chunk_;
  central_chunk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::unsafe_arena_release_central_chunk() {
  // @@protoc_insertion_point(field_release:minecpp.events.LoadTerrain.central_chunk)
  
  ::minecpp::events::ChunkCoord* temp = central_chunk_;
  central_chunk_ = nullptr;
  return temp;
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::_internal_mutable_central_chunk() {
  
  if (central_chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::events::ChunkCoord>(GetArena());
    central_chunk_ = p;
  }
  return central_chunk_;
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::mutable_central_chunk() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.LoadTerrain.central_chunk)
  return _internal_mutable_central_chunk();
}
inline void LoadTerrain::set_allocated_central_chunk(::minecpp::events::ChunkCoord* central_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete central_chunk_;
  }
  if (central_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(central_chunk);
    if (message_arena != submessage_arena) {
      central_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, central_chunk, submessage_arena);
    }
    
  } else {
    
  }
  central_chunk_ = central_chunk;
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.LoadTerrain.central_chunk)
}

// repeated .minecpp.events.ChunkCoord coords = 3;
inline int LoadTerrain::_internal_coords_size() const {
  return coords_.size();
}
inline int LoadTerrain::coords_size() const {
  return _internal_coords_size();
}
inline void LoadTerrain::clear_coords() {
  coords_.Clear();
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::mutable_coords(int index) {
  // @@protoc_insertion_point(field_mutable:minecpp.events.LoadTerrain.coords)
  return coords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::events::ChunkCoord >*
LoadTerrain::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:minecpp.events.LoadTerrain.coords)
  return &coords_;
}
inline const ::minecpp::events::ChunkCoord& LoadTerrain::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline const ::minecpp::events::ChunkCoord& LoadTerrain::coords(int index) const {
  // @@protoc_insertion_point(field_get:minecpp.events.LoadTerrain.coords)
  return _internal_coords(index);
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::_internal_add_coords() {
  return coords_.Add();
}
inline ::minecpp::events::ChunkCoord* LoadTerrain::add_coords() {
  // @@protoc_insertion_point(field_add:minecpp.events.LoadTerrain.coords)
  return _internal_add_coords();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::events::ChunkCoord >&
LoadTerrain::coords() const {
  // @@protoc_insertion_point(field_list:minecpp.events.LoadTerrain.coords)
  return coords_;
}

// -------------------------------------------------------------------

// TransferPlayer

// bytes player = 1;
inline void TransferPlayer::clear_player() {
  player_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferPlayer::player() const {
  // @@protoc_insertion_point(field_get:minecpp.events.TransferPlayer.player)
  return _internal_player();
}
inline void TransferPlayer::set_player(const std::string& value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:minecpp.events.TransferPlayer.player)
}
inline std::string* TransferPlayer::mutable_player() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.TransferPlayer.player)
  return _internal_mutable_player();
}
inline const std::string& TransferPlayer::_internal_player() const {
  return player_.Get();
}
inline void TransferPlayer::_internal_set_player(const std::string& value) {
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferPlayer::set_player(std::string&& value) {
  
  player_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.TransferPlayer.player)
}
inline void TransferPlayer::set_player(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.TransferPlayer.player)
}
inline void TransferPlayer::set_player(const void* value,
    size_t size) {
  
  player_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.TransferPlayer.player)
}
inline std::string* TransferPlayer::_internal_mutable_player() {
  
  return player_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferPlayer::release_player() {
  // @@protoc_insertion_point(field_release:minecpp.events.TransferPlayer.player)
  return player_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferPlayer::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  player_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.TransferPlayer.player)
}

// bytes target_engine = 2;
inline void TransferPlayer::clear_target_engine() {
  target_engine_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferPlayer::target_engine() const {
  // @@protoc_insertion_point(field_get:minecpp.events.TransferPlayer.target_engine)
  return _internal_target_engine();
}
inline void TransferPlayer::set_target_engine(const std::string& value) {
  _internal_set_target_engine(value);
  // @@protoc_insertion_point(field_set:minecpp.events.TransferPlayer.target_engine)
}
inline std::string* TransferPlayer::mutable_target_engine() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.TransferPlayer.target_engine)
  return _internal_mutable_target_engine();
}
inline const std::string& TransferPlayer::_internal_target_engine() const {
  return target_engine_.Get();
}
inline void TransferPlayer::_internal_set_target_engine(const std::string& value) {
  
  target_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferPlayer::set_target_engine(std::string&& value) {
  
  target_engine_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.TransferPlayer.target_engine)
}
inline void TransferPlayer::set_target_engine(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.TransferPlayer.target_engine)
}
inline void TransferPlayer::set_target_engine(const void* value,
    size_t size) {
  
  target_engine_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.TransferPlayer.target_engine)
}
inline std::string* TransferPlayer::_internal_mutable_target_engine() {
  
  return target_engine_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferPlayer::release_target_engine() {
  // @@protoc_insertion_point(field_release:minecpp.events.TransferPlayer.target_engine)
  return target_engine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferPlayer::set_allocated_target_engine(std::string* target_engine) {
  if (target_engine != nullptr) {
    
  } else {
    
  }
  target_engine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_engine,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.TransferPlayer.target_engine)
}

// -------------------------------------------------------------------

// UpdatePlayerAbilities

// bytes uuid = 1;
inline void UpdatePlayerAbilities::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdatePlayerAbilities::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.uuid)
  return _internal_uuid();
}
inline void UpdatePlayerAbilities::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.uuid)
}
inline std::string* UpdatePlayerAbilities::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:minecpp.events.UpdatePlayerAbilities.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& UpdatePlayerAbilities::_internal_uuid() const {
  return uuid_.Get();
}
inline void UpdatePlayerAbilities::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdatePlayerAbilities::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.UpdatePlayerAbilities.uuid)
}
inline void UpdatePlayerAbilities::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:minecpp.events.UpdatePlayerAbilities.uuid)
}
inline void UpdatePlayerAbilities::set_uuid(const void* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.UpdatePlayerAbilities.uuid)
}
inline std::string* UpdatePlayerAbilities::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdatePlayerAbilities::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.UpdatePlayerAbilities.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatePlayerAbilities::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.UpdatePlayerAbilities.uuid)
}

// bool invulnerable = 2;
inline void UpdatePlayerAbilities::clear_invulnerable() {
  invulnerable_ = false;
}
inline bool UpdatePlayerAbilities::_internal_invulnerable() const {
  return invulnerable_;
}
inline bool UpdatePlayerAbilities::invulnerable() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.invulnerable)
  return _internal_invulnerable();
}
inline void UpdatePlayerAbilities::_internal_set_invulnerable(bool value) {
  
  invulnerable_ = value;
}
inline void UpdatePlayerAbilities::set_invulnerable(bool value) {
  _internal_set_invulnerable(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.invulnerable)
}

// bool is_flying = 3;
inline void UpdatePlayerAbilities::clear_is_flying() {
  is_flying_ = false;
}
inline bool UpdatePlayerAbilities::_internal_is_flying() const {
  return is_flying_;
}
inline bool UpdatePlayerAbilities::is_flying() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.is_flying)
  return _internal_is_flying();
}
inline void UpdatePlayerAbilities::_internal_set_is_flying(bool value) {
  
  is_flying_ = value;
}
inline void UpdatePlayerAbilities::set_is_flying(bool value) {
  _internal_set_is_flying(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.is_flying)
}

// bool allow_flying = 4;
inline void UpdatePlayerAbilities::clear_allow_flying() {
  allow_flying_ = false;
}
inline bool UpdatePlayerAbilities::_internal_allow_flying() const {
  return allow_flying_;
}
inline bool UpdatePlayerAbilities::allow_flying() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.allow_flying)
  return _internal_allow_flying();
}
inline void UpdatePlayerAbilities::_internal_set_allow_flying(bool value) {
  
  allow_flying_ = value;
}
inline void UpdatePlayerAbilities::set_allow_flying(bool value) {
  _internal_set_allow_flying(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.allow_flying)
}

// bool creative_mode = 5;
inline void UpdatePlayerAbilities::clear_creative_mode() {
  creative_mode_ = false;
}
inline bool UpdatePlayerAbilities::_internal_creative_mode() const {
  return creative_mode_;
}
inline bool UpdatePlayerAbilities::creative_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.creative_mode)
  return _internal_creative_mode();
}
inline void UpdatePlayerAbilities::_internal_set_creative_mode(bool value) {
  
  creative_mode_ = value;
}
inline void UpdatePlayerAbilities::set_creative_mode(bool value) {
  _internal_set_creative_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.creative_mode)
}

// float walk_speed = 7;
inline void UpdatePlayerAbilities::clear_walk_speed() {
  walk_speed_ = 0;
}
inline float UpdatePlayerAbilities::_internal_walk_speed() const {
  return walk_speed_;
}
inline float UpdatePlayerAbilities::walk_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.walk_speed)
  return _internal_walk_speed();
}
inline void UpdatePlayerAbilities::_internal_set_walk_speed(float value) {
  
  walk_speed_ = value;
}
inline void UpdatePlayerAbilities::set_walk_speed(float value) {
  _internal_set_walk_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.walk_speed)
}

// float fly_speed = 8;
inline void UpdatePlayerAbilities::clear_fly_speed() {
  fly_speed_ = 0;
}
inline float UpdatePlayerAbilities::_internal_fly_speed() const {
  return fly_speed_;
}
inline float UpdatePlayerAbilities::fly_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdatePlayerAbilities.fly_speed)
  return _internal_fly_speed();
}
inline void UpdatePlayerAbilities::_internal_set_fly_speed(float value) {
  
  fly_speed_ = value;
}
inline void UpdatePlayerAbilities::set_fly_speed(float value) {
  _internal_set_fly_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.events.UpdatePlayerAbilities.fly_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events
}  // namespace minecpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
