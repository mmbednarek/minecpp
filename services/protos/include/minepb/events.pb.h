// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
namespace minecpp {
namespace events {
class AddPlayer;
class AddPlayerDefaultTypeInternal;
extern AddPlayerDefaultTypeInternal _AddPlayer_default_instance_;
class AnimateHand;
class AnimateHandDefaultTypeInternal;
extern AnimateHandDefaultTypeInternal _AnimateHand_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class EntityLook;
class EntityLookDefaultTypeInternal;
extern EntityLookDefaultTypeInternal _EntityLook_default_instance_;
class EntityMove;
class EntityMoveDefaultTypeInternal;
extern EntityMoveDefaultTypeInternal _EntityMove_default_instance_;
class PlayerPositionRotation;
class PlayerPositionRotationDefaultTypeInternal;
extern PlayerPositionRotationDefaultTypeInternal _PlayerPositionRotation_default_instance_;
class RemovePlayer;
class RemovePlayerDefaultTypeInternal;
extern RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
class SpawnPlayer;
class SpawnPlayerDefaultTypeInternal;
extern SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
class UpdateBlock;
class UpdateBlockDefaultTypeInternal;
extern UpdateBlockDefaultTypeInternal _UpdateBlock_default_instance_;
}  // namespace events
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::events::AddPlayer* Arena::CreateMaybeMessage<::minecpp::events::AddPlayer>(Arena*);
template<> ::minecpp::events::AnimateHand* Arena::CreateMaybeMessage<::minecpp::events::AnimateHand>(Arena*);
template<> ::minecpp::events::Chat* Arena::CreateMaybeMessage<::minecpp::events::Chat>(Arena*);
template<> ::minecpp::events::EntityLook* Arena::CreateMaybeMessage<::minecpp::events::EntityLook>(Arena*);
template<> ::minecpp::events::EntityMove* Arena::CreateMaybeMessage<::minecpp::events::EntityMove>(Arena*);
template<> ::minecpp::events::PlayerPositionRotation* Arena::CreateMaybeMessage<::minecpp::events::PlayerPositionRotation>(Arena*);
template<> ::minecpp::events::RemovePlayer* Arena::CreateMaybeMessage<::minecpp::events::RemovePlayer>(Arena*);
template<> ::minecpp::events::SpawnPlayer* Arena::CreateMaybeMessage<::minecpp::events::SpawnPlayer>(Arena*);
template<> ::minecpp::events::UpdateBlock* Arena::CreateMaybeMessage<::minecpp::events::UpdateBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace events {

// ===================================================================

class AddPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.AddPlayer) */ {
 public:
  AddPlayer();
  virtual ~AddPlayer();

  AddPlayer(const AddPlayer& from);
  AddPlayer(AddPlayer&& from) noexcept
    : AddPlayer() {
    *this = ::std::move(from);
  }

  inline AddPlayer& operator=(const AddPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlayer& operator=(AddPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPlayer* internal_default_instance() {
    return reinterpret_cast<const AddPlayer*>(
               &_AddPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddPlayer* other);
  friend void swap(AddPlayer& a, AddPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPlayer* New() const final {
    return CreateMaybeMessage<AddPlayer>(nullptr);
  }

  AddPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlayer& from);
  void MergeFrom(const AddPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.AddPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 game_mode = 3;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ping = 4;
  void clear_ping();
  static const int kPingFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:minecpp.events.AddPlayer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class SpawnPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.SpawnPlayer) */ {
 public:
  SpawnPlayer();
  virtual ~SpawnPlayer();

  SpawnPlayer(const SpawnPlayer& from);
  SpawnPlayer(SpawnPlayer&& from) noexcept
    : SpawnPlayer() {
    *this = ::std::move(from);
  }

  inline SpawnPlayer& operator=(const SpawnPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnPlayer& operator=(SpawnPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpawnPlayer* internal_default_instance() {
    return reinterpret_cast<const SpawnPlayer*>(
               &_SpawnPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SpawnPlayer* other);
  friend void swap(SpawnPlayer& a, SpawnPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpawnPlayer* New() const final {
    return CreateMaybeMessage<SpawnPlayer>(nullptr);
  }

  SpawnPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnPlayer& from);
  void MergeFrom(const SpawnPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.SpawnPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  float yaw() const;
  void set_yaw(float value);

  // double z = 5;
  void clear_z();
  static const int kZFieldNumber = 5;
  double z() const;
  void set_z(double value);

  // float pitch = 7;
  void clear_pitch();
  static const int kPitchFieldNumber = 7;
  float pitch() const;
  void set_pitch(float value);

  // @@protoc_insertion_point(class_scope:minecpp.events.SpawnPlayer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  double x_;
  double y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float yaw_;
  double z_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EntityMove :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.EntityMove) */ {
 public:
  EntityMove();
  virtual ~EntityMove();

  EntityMove(const EntityMove& from);
  EntityMove(EntityMove&& from) noexcept
    : EntityMove() {
    *this = ::std::move(from);
  }

  inline EntityMove& operator=(const EntityMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityMove& operator=(EntityMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMove* internal_default_instance() {
    return reinterpret_cast<const EntityMove*>(
               &_EntityMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EntityMove* other);
  friend void swap(EntityMove& a, EntityMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityMove* New() const final {
    return CreateMaybeMessage<EntityMove>(nullptr);
  }

  EntityMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityMove& from);
  void MergeFrom(const EntityMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.EntityMove";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 z = 5;
  void clear_z();
  static const int kZFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 z() const;
  void set_z(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  float yaw() const;
  void set_yaw(float value);

  // float pitch = 7;
  void clear_pitch();
  static const int kPitchFieldNumber = 7;
  float pitch() const;
  void set_pitch(float value);

  // @@protoc_insertion_point(class_scope:minecpp.events.EntityMove)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_;
  float yaw_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class EntityLook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.EntityLook) */ {
 public:
  EntityLook();
  virtual ~EntityLook();

  EntityLook(const EntityLook& from);
  EntityLook(EntityLook&& from) noexcept
    : EntityLook() {
    *this = ::std::move(from);
  }

  inline EntityLook& operator=(const EntityLook& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityLook& operator=(EntityLook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityLook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityLook* internal_default_instance() {
    return reinterpret_cast<const EntityLook*>(
               &_EntityLook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EntityLook* other);
  friend void swap(EntityLook& a, EntityLook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityLook* New() const final {
    return CreateMaybeMessage<EntityLook>(nullptr);
  }

  EntityLook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityLook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityLook& from);
  void MergeFrom(const EntityLook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityLook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.EntityLook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // float pitch = 4;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  float pitch() const;
  void set_pitch(float value);

  // @@protoc_insertion_point(class_scope:minecpp.events.EntityLook)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float yaw_;
  float pitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class PlayerPositionRotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.PlayerPositionRotation) */ {
 public:
  PlayerPositionRotation();
  virtual ~PlayerPositionRotation();

  PlayerPositionRotation(const PlayerPositionRotation& from);
  PlayerPositionRotation(PlayerPositionRotation&& from) noexcept
    : PlayerPositionRotation() {
    *this = ::std::move(from);
  }

  inline PlayerPositionRotation& operator=(const PlayerPositionRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPositionRotation& operator=(PlayerPositionRotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerPositionRotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPositionRotation* internal_default_instance() {
    return reinterpret_cast<const PlayerPositionRotation*>(
               &_PlayerPositionRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerPositionRotation* other);
  friend void swap(PlayerPositionRotation& a, PlayerPositionRotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPositionRotation* New() const final {
    return CreateMaybeMessage<PlayerPositionRotation>(nullptr);
  }

  PlayerPositionRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerPositionRotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerPositionRotation& from);
  void MergeFrom(const PlayerPositionRotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPositionRotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.PlayerPositionRotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.events.PlayerPositionRotation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class Chat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Chat* other);
  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(nullptr);
  }

  Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.Chat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:minecpp.events.Chat)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.RemovePlayer) */ {
 public:
  RemovePlayer();
  virtual ~RemovePlayer();

  RemovePlayer(const RemovePlayer& from);
  RemovePlayer(RemovePlayer&& from) noexcept
    : RemovePlayer() {
    *this = ::std::move(from);
  }

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayer& operator=(RemovePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePlayer* internal_default_instance() {
    return reinterpret_cast<const RemovePlayer*>(
               &_RemovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RemovePlayer* other);
  friend void swap(RemovePlayer& a, RemovePlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePlayer* New() const final {
    return CreateMaybeMessage<RemovePlayer>(nullptr);
  }

  RemovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePlayer& from);
  void MergeFrom(const RemovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.RemovePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:minecpp.events.RemovePlayer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UpdateBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.UpdateBlock) */ {
 public:
  UpdateBlock();
  virtual ~UpdateBlock();

  UpdateBlock(const UpdateBlock& from);
  UpdateBlock(UpdateBlock&& from) noexcept
    : UpdateBlock() {
    *this = ::std::move(from);
  }

  inline UpdateBlock& operator=(const UpdateBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBlock& operator=(UpdateBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBlock* internal_default_instance() {
    return reinterpret_cast<const UpdateBlock*>(
               &_UpdateBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateBlock* other);
  friend void swap(UpdateBlock& a, UpdateBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateBlock* New() const final {
    return CreateMaybeMessage<UpdateBlock>(nullptr);
  }

  UpdateBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBlock& from);
  void MergeFrom(const UpdateBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.UpdateBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 chunk_x = 1;
  void clear_chunk_x();
  static const int kChunkXFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_x() const;
  void set_chunk_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 chunk_z = 2;
  void clear_chunk_z();
  static const int kChunkZFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_z() const;
  void set_chunk_z(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:minecpp.events.UpdateBlock)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class AnimateHand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.events.AnimateHand) */ {
 public:
  AnimateHand();
  virtual ~AnimateHand();

  AnimateHand(const AnimateHand& from);
  AnimateHand(AnimateHand&& from) noexcept
    : AnimateHand() {
    *this = ::std::move(from);
  }

  inline AnimateHand& operator=(const AnimateHand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimateHand& operator=(AnimateHand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimateHand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimateHand* internal_default_instance() {
    return reinterpret_cast<const AnimateHand*>(
               &_AnimateHand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AnimateHand* other);
  friend void swap(AnimateHand& a, AnimateHand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimateHand* New() const final {
    return CreateMaybeMessage<AnimateHand>(nullptr);
  }

  AnimateHand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimateHand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimateHand& from);
  void MergeFrom(const AnimateHand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimateHand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.events.AnimateHand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_events_2eproto);
    return ::descriptor_table_events_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // int32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hand = 3;
  void clear_hand();
  static const int kHandFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 hand() const;
  void set_hand(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:minecpp.events.AnimateHand)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddPlayer

// bytes uuid = 1;
inline void AddPlayer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.uuid)
  return uuid_.GetNoArena();
}
inline void AddPlayer::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.uuid)
}
inline void AddPlayer::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AddPlayer.uuid)
}
inline void AddPlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.AddPlayer.uuid)
}
inline void AddPlayer::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AddPlayer.uuid)
}
inline std::string* AddPlayer::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.AddPlayer.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.AddPlayer.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AddPlayer.uuid)
}

// string name = 2;
inline void AddPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPlayer::name() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.name)
  return name_.GetNoArena();
}
inline void AddPlayer::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.name)
}
inline void AddPlayer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AddPlayer.name)
}
inline void AddPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.AddPlayer.name)
}
inline void AddPlayer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AddPlayer.name)
}
inline std::string* AddPlayer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.AddPlayer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPlayer::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.events.AddPlayer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AddPlayer.name)
}

// int32 game_mode = 3;
inline void AddPlayer::clear_game_mode() {
  game_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.game_mode)
  return game_mode_;
}
inline void AddPlayer::set_game_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.game_mode)
}

// int32 ping = 4;
inline void AddPlayer::clear_ping() {
  ping_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddPlayer::ping() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AddPlayer.ping)
  return ping_;
}
inline void AddPlayer::set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ping_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.AddPlayer.ping)
}

// -------------------------------------------------------------------

// SpawnPlayer

// bytes uuid = 1;
inline void SpawnPlayer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpawnPlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.uuid)
  return uuid_.GetNoArena();
}
inline void SpawnPlayer::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.uuid)
}
inline void SpawnPlayer::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.SpawnPlayer.uuid)
}
inline void SpawnPlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.SpawnPlayer.uuid)
}
inline void SpawnPlayer::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.SpawnPlayer.uuid)
}
inline std::string* SpawnPlayer::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.SpawnPlayer.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpawnPlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.SpawnPlayer.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpawnPlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.SpawnPlayer.uuid)
}

// int32 id = 2;
inline void SpawnPlayer::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpawnPlayer::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.id)
  return id_;
}
inline void SpawnPlayer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.id)
}

// double x = 3;
inline void SpawnPlayer::clear_x() {
  x_ = 0;
}
inline double SpawnPlayer::x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.x)
  return x_;
}
inline void SpawnPlayer::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.x)
}

// double y = 4;
inline void SpawnPlayer::clear_y() {
  y_ = 0;
}
inline double SpawnPlayer::y() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.y)
  return y_;
}
inline void SpawnPlayer::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.y)
}

// double z = 5;
inline void SpawnPlayer::clear_z() {
  z_ = 0;
}
inline double SpawnPlayer::z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.z)
  return z_;
}
inline void SpawnPlayer::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.z)
}

// float yaw = 6;
inline void SpawnPlayer::clear_yaw() {
  yaw_ = 0;
}
inline float SpawnPlayer::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.yaw)
  return yaw_;
}
inline void SpawnPlayer::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.yaw)
}

// float pitch = 7;
inline void SpawnPlayer::clear_pitch() {
  pitch_ = 0;
}
inline float SpawnPlayer::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.SpawnPlayer.pitch)
  return pitch_;
}
inline void SpawnPlayer::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.SpawnPlayer.pitch)
}

// -------------------------------------------------------------------

// EntityMove

// bytes uuid = 1;
inline void EntityMove::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EntityMove::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.uuid)
  return uuid_.GetNoArena();
}
inline void EntityMove::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.uuid)
}
inline void EntityMove::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.EntityMove.uuid)
}
inline void EntityMove::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.EntityMove.uuid)
}
inline void EntityMove::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.EntityMove.uuid)
}
inline std::string* EntityMove::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.EntityMove.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityMove::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.EntityMove.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityMove::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.EntityMove.uuid)
}

// int32 id = 2;
inline void EntityMove::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.id)
  return id_;
}
inline void EntityMove::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.id)
}

// int32 x = 3;
inline void EntityMove::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.x)
  return x_;
}
inline void EntityMove::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.x)
}

// int32 y = 4;
inline void EntityMove::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::y() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.y)
  return y_;
}
inline void EntityMove::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.y)
}

// int32 z = 5;
inline void EntityMove::clear_z() {
  z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityMove::z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.z)
  return z_;
}
inline void EntityMove::set_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.z)
}

// float yaw = 6;
inline void EntityMove::clear_yaw() {
  yaw_ = 0;
}
inline float EntityMove::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.yaw)
  return yaw_;
}
inline void EntityMove::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.yaw)
}

// float pitch = 7;
inline void EntityMove::clear_pitch() {
  pitch_ = 0;
}
inline float EntityMove::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityMove.pitch)
  return pitch_;
}
inline void EntityMove::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityMove.pitch)
}

// -------------------------------------------------------------------

// EntityLook

// bytes uuid = 1;
inline void EntityLook::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EntityLook::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.uuid)
  return uuid_.GetNoArena();
}
inline void EntityLook::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.uuid)
}
inline void EntityLook::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.EntityLook.uuid)
}
inline void EntityLook::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.EntityLook.uuid)
}
inline void EntityLook::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.EntityLook.uuid)
}
inline std::string* EntityLook::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.EntityLook.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityLook::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.EntityLook.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityLook::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.EntityLook.uuid)
}

// int32 id = 2;
inline void EntityLook::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityLook::id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.id)
  return id_;
}
inline void EntityLook::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.id)
}

// float yaw = 3;
inline void EntityLook::clear_yaw() {
  yaw_ = 0;
}
inline float EntityLook::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.yaw)
  return yaw_;
}
inline void EntityLook::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.yaw)
}

// float pitch = 4;
inline void EntityLook::clear_pitch() {
  pitch_ = 0;
}
inline float EntityLook::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.events.EntityLook.pitch)
  return pitch_;
}
inline void EntityLook::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.EntityLook.pitch)
}

// -------------------------------------------------------------------

// PlayerPositionRotation

// -------------------------------------------------------------------

// Chat

// string message = 1;
inline void Chat::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chat::message() const {
  // @@protoc_insertion_point(field_get:minecpp.events.Chat.message)
  return message_.GetNoArena();
}
inline void Chat::set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.Chat.message)
}
inline void Chat::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.Chat.message)
}
inline void Chat::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.Chat.message)
}
inline void Chat::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.Chat.message)
}
inline std::string* Chat::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.Chat.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chat::release_message() {
  // @@protoc_insertion_point(field_release:minecpp.events.Chat.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.Chat.message)
}

// int32 type = 2;
inline void Chat::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chat::type() const {
  // @@protoc_insertion_point(field_get:minecpp.events.Chat.type)
  return type_;
}
inline void Chat::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.Chat.type)
}

// -------------------------------------------------------------------

// RemovePlayer

// bytes uuid = 1;
inline void RemovePlayer::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemovePlayer::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.RemovePlayer.uuid)
  return uuid_.GetNoArena();
}
inline void RemovePlayer::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.RemovePlayer.uuid)
}
inline void RemovePlayer::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.RemovePlayer.uuid)
}
inline void RemovePlayer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.RemovePlayer.uuid)
}
inline void RemovePlayer::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.RemovePlayer.uuid)
}
inline std::string* RemovePlayer::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.RemovePlayer.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemovePlayer::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.RemovePlayer.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePlayer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.RemovePlayer.uuid)
}

// int32 entity_id = 2;
inline void RemovePlayer::clear_entity_id() {
  entity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemovePlayer::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.RemovePlayer.entity_id)
  return entity_id_;
}
inline void RemovePlayer::set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.RemovePlayer.entity_id)
}

// -------------------------------------------------------------------

// UpdateBlock

// int32 chunk_x = 1;
inline void UpdateBlock::clear_chunk_x() {
  chunk_x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBlock::chunk_x() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.chunk_x)
  return chunk_x_;
}
inline void UpdateBlock::set_chunk_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_x_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.chunk_x)
}

// int32 chunk_z = 2;
inline void UpdateBlock::clear_chunk_z() {
  chunk_z_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBlock::chunk_z() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.chunk_z)
  return chunk_z_;
}
inline void UpdateBlock::set_chunk_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_z_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.chunk_z)
}

// int32 offset = 3;
inline void UpdateBlock::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateBlock::offset() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.offset)
  return offset_;
}
inline void UpdateBlock::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.offset)
}

// uint32 state = 4;
inline void UpdateBlock::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateBlock::state() const {
  // @@protoc_insertion_point(field_get:minecpp.events.UpdateBlock.state)
  return state_;
}
inline void UpdateBlock::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.UpdateBlock.state)
}

// -------------------------------------------------------------------

// AnimateHand

// bytes uuid = 1;
inline void AnimateHand::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AnimateHand::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.uuid)
  return uuid_.GetNoArena();
}
inline void AnimateHand::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.uuid)
}
inline void AnimateHand::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.events.AnimateHand.uuid)
}
inline void AnimateHand::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.events.AnimateHand.uuid)
}
inline void AnimateHand::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.events.AnimateHand.uuid)
}
inline std::string* AnimateHand::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.events.AnimateHand.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AnimateHand::release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.events.AnimateHand.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AnimateHand::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:minecpp.events.AnimateHand.uuid)
}

// int32 entity_id = 2;
inline void AnimateHand::clear_entity_id() {
  entity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.entity_id)
  return entity_id_;
}
inline void AnimateHand::set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.entity_id)
}

// int32 hand = 3;
inline void AnimateHand::clear_hand() {
  hand_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnimateHand::hand() const {
  // @@protoc_insertion_point(field_get:minecpp.events.AnimateHand.hand)
  return hand_;
}
inline void AnimateHand::set_hand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hand_ = value;
  // @@protoc_insertion_point(field_set:minecpp.events.AnimateHand.hand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace events
}  // namespace minecpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
