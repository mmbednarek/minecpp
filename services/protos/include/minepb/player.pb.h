// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto;
namespace minecpp {
namespace player {
class Abilities;
class AbilitiesDefaultTypeInternal;
extern AbilitiesDefaultTypeInternal _Abilities_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class RecipeBook;
class RecipeBookDefaultTypeInternal;
extern RecipeBookDefaultTypeInternal _RecipeBook_default_instance_;
}  // namespace player
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::player::Abilities* Arena::CreateMaybeMessage<::minecpp::player::Abilities>(Arena*);
template<> ::minecpp::player::Data* Arena::CreateMaybeMessage<::minecpp::player::Data>(Arena*);
template<> ::minecpp::player::RecipeBook* Arena::CreateMaybeMessage<::minecpp::player::RecipeBook>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace player {

// ===================================================================

class Data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.player.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(nullptr);
  }

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.player.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_player_2eproto);
    return ::descriptor_table_player_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .minecpp.player.Abilities abilities = 8;
  bool has_abilities() const;
  void clear_abilities();
  static const int kAbilitiesFieldNumber = 8;
  const ::minecpp::player::Abilities& abilities() const;
  ::minecpp::player::Abilities* release_abilities();
  ::minecpp::player::Abilities* mutable_abilities();
  void set_allocated_abilities(::minecpp::player::Abilities* abilities);

  // .minecpp.player.RecipeBook recipe_book = 9;
  bool has_recipe_book() const;
  void clear_recipe_book();
  static const int kRecipeBookFieldNumber = 9;
  const ::minecpp::player::RecipeBook& recipe_book() const;
  ::minecpp::player::RecipeBook* release_recipe_book();
  ::minecpp::player::RecipeBook* mutable_recipe_book();
  void set_allocated_recipe_book(::minecpp::player::RecipeBook* recipe_book);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // int32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float yaw = 6;
  void clear_yaw();
  static const int kYawFieldNumber = 6;
  float yaw() const;
  void set_yaw(float value);

  // double z = 5;
  void clear_z();
  static const int kZFieldNumber = 5;
  double z() const;
  void set_z(double value);

  // float pitch = 7;
  void clear_pitch();
  static const int kPitchFieldNumber = 7;
  float pitch() const;
  void set_pitch(float value);

  // .minecpp.game.GameMode game_mode = 10;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 10;
  ::minecpp::game::GameMode game_mode() const;
  void set_game_mode(::minecpp::game::GameMode value);

  // @@protoc_insertion_point(class_scope:minecpp.player.Data)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::minecpp::player::Abilities* abilities_;
  ::minecpp::player::RecipeBook* recipe_book_;
  double x_;
  double y_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_id_;
  float yaw_;
  double z_;
  float pitch_;
  int game_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class Abilities :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.player.Abilities) */ {
 public:
  Abilities();
  virtual ~Abilities();

  Abilities(const Abilities& from);
  Abilities(Abilities&& from) noexcept
    : Abilities() {
    *this = ::std::move(from);
  }

  inline Abilities& operator=(const Abilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Abilities& operator=(Abilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Abilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Abilities* internal_default_instance() {
    return reinterpret_cast<const Abilities*>(
               &_Abilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Abilities* other);
  friend void swap(Abilities& a, Abilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Abilities* New() const final {
    return CreateMaybeMessage<Abilities>(nullptr);
  }

  Abilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Abilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Abilities& from);
  void MergeFrom(const Abilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Abilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.player.Abilities";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_player_2eproto);
    return ::descriptor_table_player_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float walk_speed = 1;
  void clear_walk_speed();
  static const int kWalkSpeedFieldNumber = 1;
  float walk_speed() const;
  void set_walk_speed(float value);

  // float fly_speed = 2;
  void clear_fly_speed();
  static const int kFlySpeedFieldNumber = 2;
  float fly_speed() const;
  void set_fly_speed(float value);

  // bool flying = 3;
  void clear_flying();
  static const int kFlyingFieldNumber = 3;
  bool flying() const;
  void set_flying(bool value);

  // bool instant_build = 4;
  void clear_instant_build();
  static const int kInstantBuildFieldNumber = 4;
  bool instant_build() const;
  void set_instant_build(bool value);

  // bool invulnerable = 5;
  void clear_invulnerable();
  static const int kInvulnerableFieldNumber = 5;
  bool invulnerable() const;
  void set_invulnerable(bool value);

  // bool may_build = 6;
  void clear_may_build();
  static const int kMayBuildFieldNumber = 6;
  bool may_build() const;
  void set_may_build(bool value);

  // bool may_fly = 7;
  void clear_may_fly();
  static const int kMayFlyFieldNumber = 7;
  bool may_fly() const;
  void set_may_fly(bool value);

  // @@protoc_insertion_point(class_scope:minecpp.player.Abilities)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float walk_speed_;
  float fly_speed_;
  bool flying_;
  bool instant_build_;
  bool invulnerable_;
  bool may_build_;
  bool may_fly_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

class RecipeBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.player.RecipeBook) */ {
 public:
  RecipeBook();
  virtual ~RecipeBook();

  RecipeBook(const RecipeBook& from);
  RecipeBook(RecipeBook&& from) noexcept
    : RecipeBook() {
    *this = ::std::move(from);
  }

  inline RecipeBook& operator=(const RecipeBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecipeBook& operator=(RecipeBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecipeBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecipeBook* internal_default_instance() {
    return reinterpret_cast<const RecipeBook*>(
               &_RecipeBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RecipeBook* other);
  friend void swap(RecipeBook& a, RecipeBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecipeBook* New() const final {
    return CreateMaybeMessage<RecipeBook>(nullptr);
  }

  RecipeBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecipeBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecipeBook& from);
  void MergeFrom(const RecipeBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecipeBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.player.RecipeBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_player_2eproto);
    return ::descriptor_table_player_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool gui_open = 1;
  void clear_gui_open();
  static const int kGuiOpenFieldNumber = 1;
  bool gui_open() const;
  void set_gui_open(bool value);

  // bool filtering_craftable = 2;
  void clear_filtering_craftable();
  static const int kFilteringCraftableFieldNumber = 2;
  bool filtering_craftable() const;
  void set_filtering_craftable(bool value);

  // bool furnace_gui_open = 3;
  void clear_furnace_gui_open();
  static const int kFurnaceGuiOpenFieldNumber = 3;
  bool furnace_gui_open() const;
  void set_furnace_gui_open(bool value);

  // bool furnace_filtering_craftable = 4;
  void clear_furnace_filtering_craftable();
  static const int kFurnaceFilteringCraftableFieldNumber = 4;
  bool furnace_filtering_craftable() const;
  void set_furnace_filtering_craftable(bool value);

  // @@protoc_insertion_point(class_scope:minecpp.player.RecipeBook)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool gui_open_;
  bool filtering_craftable_;
  bool furnace_gui_open_;
  bool furnace_filtering_craftable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// string name = 1;
inline void Data::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Data::name() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.name)
  return name_.GetNoArena();
}
inline void Data::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:minecpp.player.Data.name)
}
inline void Data::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:minecpp.player.Data.name)
}
inline void Data::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:minecpp.player.Data.name)
}
inline void Data::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:minecpp.player.Data.name)
}
inline std::string* Data::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:minecpp.player.Data.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Data::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.player.Data.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Data::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:minecpp.player.Data.name)
}

// int32 entity_id = 2;
inline void Data::clear_entity_id() {
  entity_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.entity_id)
  return entity_id_;
}
inline void Data::set_entity_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.entity_id)
}

// double x = 3;
inline void Data::clear_x() {
  x_ = 0;
}
inline double Data::x() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.x)
  return x_;
}
inline void Data::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.x)
}

// double y = 4;
inline void Data::clear_y() {
  y_ = 0;
}
inline double Data::y() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.y)
  return y_;
}
inline void Data::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.y)
}

// double z = 5;
inline void Data::clear_z() {
  z_ = 0;
}
inline double Data::z() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.z)
  return z_;
}
inline void Data::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.z)
}

// float yaw = 6;
inline void Data::clear_yaw() {
  yaw_ = 0;
}
inline float Data::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.yaw)
  return yaw_;
}
inline void Data::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.yaw)
}

// float pitch = 7;
inline void Data::clear_pitch() {
  pitch_ = 0;
}
inline float Data::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.pitch)
  return pitch_;
}
inline void Data::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.pitch)
}

// .minecpp.player.Abilities abilities = 8;
inline bool Data::has_abilities() const {
  return this != internal_default_instance() && abilities_ != nullptr;
}
inline void Data::clear_abilities() {
  if (GetArenaNoVirtual() == nullptr && abilities_ != nullptr) {
    delete abilities_;
  }
  abilities_ = nullptr;
}
inline const ::minecpp::player::Abilities& Data::abilities() const {
  const ::minecpp::player::Abilities* p = abilities_;
  // @@protoc_insertion_point(field_get:minecpp.player.Data.abilities)
  return p != nullptr ? *p : *reinterpret_cast<const ::minecpp::player::Abilities*>(
      &::minecpp::player::_Abilities_default_instance_);
}
inline ::minecpp::player::Abilities* Data::release_abilities() {
  // @@protoc_insertion_point(field_release:minecpp.player.Data.abilities)
  
  ::minecpp::player::Abilities* temp = abilities_;
  abilities_ = nullptr;
  return temp;
}
inline ::minecpp::player::Abilities* Data::mutable_abilities() {
  
  if (abilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::player::Abilities>(GetArenaNoVirtual());
    abilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:minecpp.player.Data.abilities)
  return abilities_;
}
inline void Data::set_allocated_abilities(::minecpp::player::Abilities* abilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete abilities_;
  }
  if (abilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      abilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abilities, submessage_arena);
    }
    
  } else {
    
  }
  abilities_ = abilities;
  // @@protoc_insertion_point(field_set_allocated:minecpp.player.Data.abilities)
}

// .minecpp.player.RecipeBook recipe_book = 9;
inline bool Data::has_recipe_book() const {
  return this != internal_default_instance() && recipe_book_ != nullptr;
}
inline void Data::clear_recipe_book() {
  if (GetArenaNoVirtual() == nullptr && recipe_book_ != nullptr) {
    delete recipe_book_;
  }
  recipe_book_ = nullptr;
}
inline const ::minecpp::player::RecipeBook& Data::recipe_book() const {
  const ::minecpp::player::RecipeBook* p = recipe_book_;
  // @@protoc_insertion_point(field_get:minecpp.player.Data.recipe_book)
  return p != nullptr ? *p : *reinterpret_cast<const ::minecpp::player::RecipeBook*>(
      &::minecpp::player::_RecipeBook_default_instance_);
}
inline ::minecpp::player::RecipeBook* Data::release_recipe_book() {
  // @@protoc_insertion_point(field_release:minecpp.player.Data.recipe_book)
  
  ::minecpp::player::RecipeBook* temp = recipe_book_;
  recipe_book_ = nullptr;
  return temp;
}
inline ::minecpp::player::RecipeBook* Data::mutable_recipe_book() {
  
  if (recipe_book_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::player::RecipeBook>(GetArenaNoVirtual());
    recipe_book_ = p;
  }
  // @@protoc_insertion_point(field_mutable:minecpp.player.Data.recipe_book)
  return recipe_book_;
}
inline void Data::set_allocated_recipe_book(::minecpp::player::RecipeBook* recipe_book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recipe_book_;
  }
  if (recipe_book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recipe_book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipe_book, submessage_arena);
    }
    
  } else {
    
  }
  recipe_book_ = recipe_book;
  // @@protoc_insertion_point(field_set_allocated:minecpp.player.Data.recipe_book)
}

// .minecpp.game.GameMode game_mode = 10;
inline void Data::clear_game_mode() {
  game_mode_ = 0;
}
inline ::minecpp::game::GameMode Data::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Data.game_mode)
  return static_cast< ::minecpp::game::GameMode >(game_mode_);
}
inline void Data::set_game_mode(::minecpp::game::GameMode value) {
  
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Data.game_mode)
}

// -------------------------------------------------------------------

// Abilities

// float walk_speed = 1;
inline void Abilities::clear_walk_speed() {
  walk_speed_ = 0;
}
inline float Abilities::walk_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.walk_speed)
  return walk_speed_;
}
inline void Abilities::set_walk_speed(float value) {
  
  walk_speed_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.walk_speed)
}

// float fly_speed = 2;
inline void Abilities::clear_fly_speed() {
  fly_speed_ = 0;
}
inline float Abilities::fly_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.fly_speed)
  return fly_speed_;
}
inline void Abilities::set_fly_speed(float value) {
  
  fly_speed_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.fly_speed)
}

// bool flying = 3;
inline void Abilities::clear_flying() {
  flying_ = false;
}
inline bool Abilities::flying() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.flying)
  return flying_;
}
inline void Abilities::set_flying(bool value) {
  
  flying_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.flying)
}

// bool instant_build = 4;
inline void Abilities::clear_instant_build() {
  instant_build_ = false;
}
inline bool Abilities::instant_build() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.instant_build)
  return instant_build_;
}
inline void Abilities::set_instant_build(bool value) {
  
  instant_build_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.instant_build)
}

// bool invulnerable = 5;
inline void Abilities::clear_invulnerable() {
  invulnerable_ = false;
}
inline bool Abilities::invulnerable() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.invulnerable)
  return invulnerable_;
}
inline void Abilities::set_invulnerable(bool value) {
  
  invulnerable_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.invulnerable)
}

// bool may_build = 6;
inline void Abilities::clear_may_build() {
  may_build_ = false;
}
inline bool Abilities::may_build() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.may_build)
  return may_build_;
}
inline void Abilities::set_may_build(bool value) {
  
  may_build_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.may_build)
}

// bool may_fly = 7;
inline void Abilities::clear_may_fly() {
  may_fly_ = false;
}
inline bool Abilities::may_fly() const {
  // @@protoc_insertion_point(field_get:minecpp.player.Abilities.may_fly)
  return may_fly_;
}
inline void Abilities::set_may_fly(bool value) {
  
  may_fly_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.Abilities.may_fly)
}

// -------------------------------------------------------------------

// RecipeBook

// bool gui_open = 1;
inline void RecipeBook::clear_gui_open() {
  gui_open_ = false;
}
inline bool RecipeBook::gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.player.RecipeBook.gui_open)
  return gui_open_;
}
inline void RecipeBook::set_gui_open(bool value) {
  
  gui_open_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.RecipeBook.gui_open)
}

// bool filtering_craftable = 2;
inline void RecipeBook::clear_filtering_craftable() {
  filtering_craftable_ = false;
}
inline bool RecipeBook::filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.player.RecipeBook.filtering_craftable)
  return filtering_craftable_;
}
inline void RecipeBook::set_filtering_craftable(bool value) {
  
  filtering_craftable_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.RecipeBook.filtering_craftable)
}

// bool furnace_gui_open = 3;
inline void RecipeBook::clear_furnace_gui_open() {
  furnace_gui_open_ = false;
}
inline bool RecipeBook::furnace_gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.player.RecipeBook.furnace_gui_open)
  return furnace_gui_open_;
}
inline void RecipeBook::set_furnace_gui_open(bool value) {
  
  furnace_gui_open_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.RecipeBook.furnace_gui_open)
}

// bool furnace_filtering_craftable = 4;
inline void RecipeBook::clear_furnace_filtering_craftable() {
  furnace_filtering_craftable_ = false;
}
inline bool RecipeBook::furnace_filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.player.RecipeBook.furnace_filtering_craftable)
  return furnace_filtering_craftable_;
}
inline void RecipeBook::set_furnace_filtering_craftable(bool value) {
  
  furnace_filtering_craftable_ = value;
  // @@protoc_insertion_point(field_set:minecpp.player.RecipeBook.furnace_filtering_craftable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace player
}  // namespace minecpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_2eproto
