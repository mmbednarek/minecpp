// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunk.proto

#include "chunk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_chunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetChunk_Section_chunk_2eproto;
namespace minecpp {
namespace chunk {
class NetChunk_SectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetChunk_Section> _instance;
} _NetChunk_Section_default_instance_;
class NetChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetChunk> _instance;
} _NetChunk_default_instance_;
}  // namespace chunk
}  // namespace minecpp
static void InitDefaultsscc_info_NetChunk_chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minecpp::chunk::_NetChunk_default_instance_;
    new (ptr) ::minecpp::chunk::NetChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetChunk_chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetChunk_chunk_2eproto}, {
      &scc_info_NetChunk_Section_chunk_2eproto.base,}};

static void InitDefaultsscc_info_NetChunk_Section_chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::minecpp::chunk::_NetChunk_Section_default_instance_;
    new (ptr) ::minecpp::chunk::NetChunk_Section();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetChunk_Section_chunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetChunk_Section_chunk_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chunk_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chunk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chunk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, bits_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, ref_count_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, palette_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, data_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, block_light_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk_Section, sky_light_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, pos_x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, pos_z_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, full_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, biomes_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, hm_world_surface_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, hm_motion_blocking_),
  PROTOBUF_FIELD_OFFSET(::minecpp::chunk::NetChunk, sections_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minecpp::chunk::NetChunk_Section)},
  { 12, -1, sizeof(::minecpp::chunk::NetChunk)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::chunk::_NetChunk_Section_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::chunk::_NetChunk_default_instance_),
};

const char descriptor_table_protodef_chunk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013chunk.proto\022\rminecpp.chunk\"\261\002\n\010NetChun"
  "k\022\r\n\005pos_x\030\001 \001(\005\022\r\n\005pos_z\030\002 \001(\005\022\014\n\004full\030"
  "\003 \001(\010\022\022\n\006biomes\030\004 \003(\005B\002\020\001\022\030\n\020hm_world_su"
  "rface\030\005 \003(\003\022\032\n\022hm_motion_blocking\030\006 \003(\003\022"
  "1\n\010sections\030\007 \003(\0132\037.minecpp.chunk.NetChu"
  "nk.Section\032|\n\007Section\022\t\n\001y\030\001 \001(\005\022\014\n\004bits"
  "\030\002 \001(\005\022\021\n\tref_count\030\003 \001(\005\022\017\n\007palette\030\004 \003"
  "(\005\022\014\n\004data\030\005 \003(\003\022\023\n\013block_light\030\006 \001(\014\022\021\n"
  "\tsky_light\030\007 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chunk_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chunk_2eproto_sccs[2] = {
  &scc_info_NetChunk_chunk_2eproto.base,
  &scc_info_NetChunk_Section_chunk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chunk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chunk_2eproto = {
  false, false, descriptor_table_protodef_chunk_2eproto, "chunk.proto", 344,
  &descriptor_table_chunk_2eproto_once, descriptor_table_chunk_2eproto_sccs, descriptor_table_chunk_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_chunk_2eproto::offsets,
  file_level_metadata_chunk_2eproto, 2, file_level_enum_descriptors_chunk_2eproto, file_level_service_descriptors_chunk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_chunk_2eproto(&descriptor_table_chunk_2eproto);
namespace minecpp {
namespace chunk {

// ===================================================================

class NetChunk_Section::_Internal {
 public:
};

NetChunk_Section::NetChunk_Section(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  palette_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.chunk.NetChunk.Section)
}
NetChunk_Section::NetChunk_Section(const NetChunk_Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      palette_(from.palette_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_light_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_light().empty()) {
    block_light_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_light(), 
      GetArena());
  }
  sky_light_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sky_light().empty()) {
    sky_light_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sky_light(), 
      GetArena());
  }
  ::memcpy(&y_, &from.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_count_) -
    reinterpret_cast<char*>(&y_)) + sizeof(ref_count_));
  // @@protoc_insertion_point(copy_constructor:minecpp.chunk.NetChunk.Section)
}

void NetChunk_Section::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetChunk_Section_chunk_2eproto.base);
  block_light_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sky_light_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&y_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ref_count_) -
      reinterpret_cast<char*>(&y_)) + sizeof(ref_count_));
}

NetChunk_Section::~NetChunk_Section() {
  // @@protoc_insertion_point(destructor:minecpp.chunk.NetChunk.Section)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetChunk_Section::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_light_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sky_light_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetChunk_Section::ArenaDtor(void* object) {
  NetChunk_Section* _this = reinterpret_cast< NetChunk_Section* >(object);
  (void)_this;
}
void NetChunk_Section::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetChunk_Section::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetChunk_Section& NetChunk_Section::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetChunk_Section_chunk_2eproto.base);
  return *internal_default_instance();
}


void NetChunk_Section::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.chunk.NetChunk.Section)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  palette_.Clear();
  data_.Clear();
  block_light_.ClearToEmpty();
  sky_light_.ClearToEmpty();
  ::memset(&y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_count_) -
      reinterpret_cast<char*>(&y_)) + sizeof(ref_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetChunk_Section::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ref_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 palette = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_palette(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_palette(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_block_light();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sky_light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sky_light();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetChunk_Section::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.chunk.NetChunk.Section)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y = 1;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_y(), target);
  }

  // int32 bits = 2;
  if (this->bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bits(), target);
  }

  // int32 ref_count = 3;
  if (this->ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ref_count(), target);
  }

  // repeated int32 palette = 4;
  {
    int byte_size = _palette_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_palette(), byte_size, target);
    }
  }

  // repeated int64 data = 5;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_data(), byte_size, target);
    }
  }

  // bytes block_light = 6;
  if (this->block_light().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_block_light(), target);
  }

  // bytes sky_light = 7;
  if (this->sky_light().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_sky_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.chunk.NetChunk.Section)
  return target;
}

size_t NetChunk_Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.chunk.NetChunk.Section)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 palette = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->palette_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _palette_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 data = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes block_light = 6;
  if (this->block_light().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_light());
  }

  // bytes sky_light = 7;
  if (this->sky_light().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sky_light());
  }

  // int32 y = 1;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 bits = 2;
  if (this->bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bits());
  }

  // int32 ref_count = 3;
  if (this->ref_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ref_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetChunk_Section::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minecpp.chunk.NetChunk.Section)
  GOOGLE_DCHECK_NE(&from, this);
  const NetChunk_Section* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetChunk_Section>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minecpp.chunk.NetChunk.Section)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minecpp.chunk.NetChunk.Section)
    MergeFrom(*source);
  }
}

void NetChunk_Section::MergeFrom(const NetChunk_Section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.chunk.NetChunk.Section)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  palette_.MergeFrom(from.palette_);
  data_.MergeFrom(from.data_);
  if (from.block_light().size() > 0) {
    _internal_set_block_light(from._internal_block_light());
  }
  if (from.sky_light().size() > 0) {
    _internal_set_sky_light(from._internal_sky_light());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
  if (from.ref_count() != 0) {
    _internal_set_ref_count(from._internal_ref_count());
  }
}

void NetChunk_Section::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minecpp.chunk.NetChunk.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetChunk_Section::CopyFrom(const NetChunk_Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.chunk.NetChunk.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetChunk_Section::IsInitialized() const {
  return true;
}

void NetChunk_Section::InternalSwap(NetChunk_Section* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  palette_.InternalSwap(&other->palette_);
  data_.InternalSwap(&other->data_);
  block_light_.Swap(&other->block_light_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sky_light_.Swap(&other->sky_light_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetChunk_Section, ref_count_)
      + sizeof(NetChunk_Section::ref_count_)
      - PROTOBUF_FIELD_OFFSET(NetChunk_Section, y_)>(
          reinterpret_cast<char*>(&y_),
          reinterpret_cast<char*>(&other->y_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetChunk_Section::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetChunk::_Internal {
 public:
};

NetChunk::NetChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  biomes_(arena),
  hm_world_surface_(arena),
  hm_motion_blocking_(arena),
  sections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.chunk.NetChunk)
}
NetChunk::NetChunk(const NetChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      biomes_(from.biomes_),
      hm_world_surface_(from.hm_world_surface_),
      hm_motion_blocking_(from.hm_motion_blocking_),
      sections_(from.sections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&full_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(full_));
  // @@protoc_insertion_point(copy_constructor:minecpp.chunk.NetChunk)
}

void NetChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetChunk_chunk_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pos_x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&full_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(full_));
}

NetChunk::~NetChunk() {
  // @@protoc_insertion_point(destructor:minecpp.chunk.NetChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetChunk::ArenaDtor(void* object) {
  NetChunk* _this = reinterpret_cast< NetChunk* >(object);
  (void)_this;
}
void NetChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetChunk& NetChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetChunk_chunk_2eproto.base);
  return *internal_default_instance();
}


void NetChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.chunk.NetChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  biomes_.Clear();
  hm_world_surface_.Clear();
  hm_motion_blocking_.Clear();
  sections_.Clear();
  ::memset(&pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_) -
      reinterpret_cast<char*>(&pos_x_)) + sizeof(full_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 biomes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_biomes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_biomes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 hm_world_surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hm_world_surface(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_hm_world_surface(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 hm_motion_blocking = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hm_motion_blocking(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_hm_motion_blocking(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .minecpp.chunk.NetChunk.Section sections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.chunk.NetChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pos_x(), target);
  }

  // int32 pos_z = 2;
  if (this->pos_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pos_z(), target);
  }

  // bool full = 3;
  if (this->full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_full(), target);
  }

  // repeated int32 biomes = 4 [packed = true];
  {
    int byte_size = _biomes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_biomes(), byte_size, target);
    }
  }

  // repeated int64 hm_world_surface = 5;
  {
    int byte_size = _hm_world_surface_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_hm_world_surface(), byte_size, target);
    }
  }

  // repeated int64 hm_motion_blocking = 6;
  {
    int byte_size = _hm_motion_blocking_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_hm_motion_blocking(), byte_size, target);
    }
  }

  // repeated .minecpp.chunk.NetChunk.Section sections = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_sections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.chunk.NetChunk)
  return target;
}

size_t NetChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.chunk.NetChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 biomes = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->biomes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _biomes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hm_world_surface = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->hm_world_surface_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hm_world_surface_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hm_motion_blocking = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->hm_motion_blocking_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hm_motion_blocking_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .minecpp.chunk.NetChunk.Section sections = 7;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 pos_x = 1;
  if (this->pos_x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos_x());
  }

  // int32 pos_z = 2;
  if (this->pos_z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos_z());
  }

  // bool full = 3;
  if (this->full() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:minecpp.chunk.NetChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const NetChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:minecpp.chunk.NetChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:minecpp.chunk.NetChunk)
    MergeFrom(*source);
  }
}

void NetChunk::MergeFrom(const NetChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.chunk.NetChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  biomes_.MergeFrom(from.biomes_);
  hm_world_surface_.MergeFrom(from.hm_world_surface_);
  hm_motion_blocking_.MergeFrom(from.hm_motion_blocking_);
  sections_.MergeFrom(from.sections_);
  if (from.pos_x() != 0) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (from.pos_z() != 0) {
    _internal_set_pos_z(from._internal_pos_z());
  }
  if (from.full() != 0) {
    _internal_set_full(from._internal_full());
  }
}

void NetChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:minecpp.chunk.NetChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetChunk::CopyFrom(const NetChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.chunk.NetChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetChunk::IsInitialized() const {
  return true;
}

void NetChunk::InternalSwap(NetChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  biomes_.InternalSwap(&other->biomes_);
  hm_world_surface_.InternalSwap(&other->hm_world_surface_);
  hm_motion_blocking_.InternalSwap(&other->hm_motion_blocking_);
  sections_.InternalSwap(&other->sections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetChunk, full_)
      + sizeof(NetChunk::full_)
      - PROTOBUF_FIELD_OFFSET(NetChunk, pos_x_)>(
          reinterpret_cast<char*>(&pos_x_),
          reinterpret_cast<char*>(&other->pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chunk
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::chunk::NetChunk_Section* Arena::CreateMaybeMessage< ::minecpp::chunk::NetChunk_Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::chunk::NetChunk_Section >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::chunk::NetChunk* Arena::CreateMaybeMessage< ::minecpp::chunk::NetChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::chunk::NetChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
