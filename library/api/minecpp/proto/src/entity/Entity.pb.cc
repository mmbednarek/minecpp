// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/entity/Entity.proto

#include <minecpp/proto/entity/Entity.pb.h>

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace minecpp {
namespace proto {
namespace entity {
        template <typename>
PROTOBUF_CONSTEXPR Abilities::Abilities(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.walk_speed_)*/ 0,
      /*decltype(_impl_.fly_speed_)*/ 0,
      /*decltype(_impl_.flying_)*/ false,
      /*decltype(_impl_.instant_build_)*/ false,
      /*decltype(_impl_.invulnerable_)*/ false,
      /*decltype(_impl_.may_build_)*/ false,
      /*decltype(_impl_.may_fly_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AbilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbilitiesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbilitiesDefaultTypeInternal() {}
  union {
    Abilities _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbilitiesDefaultTypeInternal _Abilities_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Metadata::Metadata(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.index_)*/ 0u,
      /*decltype(_impl_.value_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Entity::Entity(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.metadata_)*/ {},
      /*decltype(_impl_.uuid_)*/ nullptr,
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.rotation_)*/ nullptr,
      /*decltype(_impl_.velocity_)*/ nullptr,
      /*decltype(_impl_.entity_id_)*/ 0u,
      /*decltype(_impl_.entity_type_)*/ 0u,
      /*decltype(_impl_.head_yaw_)*/ 0,
      /*decltype(_impl_.data_)*/ 0u,
    } {}
struct EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDefaultTypeInternal _Entity_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR EntityEquipment::EntityEquipment(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.item_)*/ nullptr,
      /*decltype(_impl_.slot_)*/ 0,
    } {}
struct EntityEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityEquipmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityEquipmentDefaultTypeInternal() {}
  union {
    EntityEquipment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityEquipmentDefaultTypeInternal _EntityEquipment_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR PlayerEntity::PlayerEntity(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.equipment_)*/ {},
      /*decltype(_impl_.uuid_)*/ nullptr,
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.rotation_)*/ nullptr,
      /*decltype(_impl_.entity_id_)*/ 0u,
    } {}
struct PlayerEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerEntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerEntityDefaultTypeInternal() {}
  union {
    PlayerEntity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerEntityDefaultTypeInternal _PlayerEntity_default_instance_;
}  // namespace entity
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_minecpp_2fproto_2fentity_2fEntity_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_minecpp_2fproto_2fentity_2fEntity_2eproto = nullptr;
const ::uint32_t TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.walk_speed_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.fly_speed_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.flying_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.instant_build_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.invulnerable_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.may_build_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Abilities, _impl_.may_fly_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Metadata, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Metadata, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Metadata, _impl_.index_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Metadata, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.uuid_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.entity_type_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.head_yaw_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Entity, _impl_.metadata_),
    ~0u,
    0,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::EntityEquipment, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::EntityEquipment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::EntityEquipment, _impl_.slot_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::EntityEquipment, _impl_.item_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_.uuid_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::PlayerEntity, _impl_.equipment_),
    ~0u,
    0,
    1,
    2,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::minecpp::proto::entity::Abilities)},
        {15, -1, -1, sizeof(::minecpp::proto::entity::Metadata)},
        {27, 44, -1, sizeof(::minecpp::proto::entity::Entity)},
        {53, 63, -1, sizeof(::minecpp::proto::entity::EntityEquipment)},
        {65, 78, -1, sizeof(::minecpp::proto::entity::PlayerEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::minecpp::proto::entity::_Abilities_default_instance_._instance,
    &::minecpp::proto::entity::_Metadata_default_instance_._instance,
    &::minecpp::proto::entity::_Entity_default_instance_._instance,
    &::minecpp::proto::entity::_EntityEquipment_default_instance_._instance,
    &::minecpp::proto::entity::_PlayerEntity_default_instance_._instance,
};
const char descriptor_table_protodef_minecpp_2fproto_2fentity_2fEntity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!minecpp/proto/entity/Entity.proto\022\024min"
    "ecpp.proto.entity\032!minecpp/proto/common/"
    "Common.proto\032!minecpp/proto/common/Vecto"
    "r.proto\"\223\001\n\tAbilities\022\022\n\nwalk_speed\030\001 \001("
    "\002\022\021\n\tfly_speed\030\002 \001(\002\022\016\n\006flying\030\003 \001(\010\022\025\n\r"
    "instant_build\030\004 \001(\010\022\024\n\014invulnerable\030\005 \001("
    "\010\022\021\n\tmay_build\030\006 \001(\010\022\017\n\007may_fly\030\007 \001(\010\"^\n"
    "\010Metadata\022\r\n\005index\030\001 \001(\r\022*\n\004slot\030\002 \001(\0132\032"
    ".minecpp.proto.common.SlotH\000\022\016\n\004byte\030\003 \001"
    "(\rH\000B\007\n\005value\"\301\002\n\006Entity\022\021\n\tentity_id\030\001 "
    "\001(\r\022(\n\004uuid\030\002 \001(\0132\032.minecpp.proto.common"
    ".UUID\022\023\n\013entity_type\030\003 \001(\r\022/\n\010position\030\004"
    " \001(\0132\035.minecpp.proto.common.Vector3\0220\n\010r"
    "otation\030\005 \001(\0132\036.minecpp.proto.common.Rot"
    "ation\022\020\n\010head_yaw\030\006 \001(\002\022\014\n\004data\030\007 \001(\r\0220\n"
    "\010velocity\030\010 \001(\0132\036.minecpp.proto.common.V"
    "ector3i\0220\n\010metadata\030\t \003(\0132\036.minecpp.prot"
    "o.entity.Metadata\"n\n\017EntityEquipment\0221\n\004"
    "slot\030\001 \001(\0162#.minecpp.proto.entity.Equipm"
    "entSlot\022(\n\004item\030\002 \001(\0132\032.minecpp.proto.co"
    "mmon.Slot\"\350\001\n\014PlayerEntity\022\021\n\tentity_id\030"
    "\001 \001(\r\022(\n\004uuid\030\002 \001(\0132\032.minecpp.proto.comm"
    "on.UUID\022/\n\010position\030\004 \001(\0132\035.minecpp.prot"
    "o.common.Vector3\0220\n\010rotation\030\005 \001(\0132\036.min"
    "ecpp.proto.common.Rotation\0228\n\tequipment\030"
    "\006 \003(\0132%.minecpp.proto.entity.EntityEquip"
    "ment*a\n\rEquipmentSlot\022\r\n\tMAIN_HAND\020\000\022\014\n\010"
    "OFF_HAND\020\001\022\t\n\005BOOTS\020\002\022\014\n\010LEGGINGS\020\003\022\016\n\nC"
    "HESTPLATE\020\004\022\n\n\006HELMET\020\005b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_deps[2] =
    {
        &::descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto,
        &::descriptor_table_minecpp_2fproto_2fcommon_2fVector_2eproto,
};
static ::absl::once_flag descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto = {
    false,
    false,
    1151,
    descriptor_table_protodef_minecpp_2fproto_2fentity_2fEntity_2eproto,
    "minecpp/proto/entity/Entity.proto",
    &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
    descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto,
    file_level_enum_descriptors_minecpp_2fproto_2fentity_2fEntity_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fentity_2fEntity_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fentity_2fEntity_2eproto(&descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto);
namespace minecpp {
namespace proto {
namespace entity {
const ::google::protobuf::EnumDescriptor* EquipmentSlot_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fentity_2fEntity_2eproto[0];
}
bool EquipmentSlot_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Abilities::_Internal {
 public:
};

Abilities::Abilities(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.entity.Abilities)
}
Abilities::Abilities(const Abilities& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.entity.Abilities)
}
inline void Abilities::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.walk_speed_){0},
      decltype(_impl_.fly_speed_){0},
      decltype(_impl_.flying_){false},
      decltype(_impl_.instant_build_){false},
      decltype(_impl_.invulnerable_){false},
      decltype(_impl_.may_build_){false},
      decltype(_impl_.may_fly_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Abilities::~Abilities() {
  // @@protoc_insertion_point(destructor:minecpp.proto.entity.Abilities)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Abilities::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Abilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Abilities::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.entity.Abilities)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.walk_speed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.may_fly_) -
      reinterpret_cast<char*>(&_impl_.walk_speed_)) + sizeof(_impl_.may_fly_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Abilities::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Abilities::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Abilities_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float walk_speed = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.walk_speed_)}},
    // float fly_speed = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.fly_speed_)}},
    // bool flying = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Abilities, _impl_.flying_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.flying_)}},
    // bool instant_build = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Abilities, _impl_.instant_build_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.instant_build_)}},
    // bool invulnerable = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Abilities, _impl_.invulnerable_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.invulnerable_)}},
    // bool may_build = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Abilities, _impl_.may_build_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.may_build_)}},
    // bool may_fly = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Abilities, _impl_.may_fly_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Abilities, _impl_.may_fly_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float walk_speed = 1;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.walk_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float fly_speed = 2;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.fly_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool flying = 3;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.flying_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool instant_build = 4;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.instant_build_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool invulnerable = 5;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.invulnerable_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool may_build = 6;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.may_build_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool may_fly = 7;
    {PROTOBUF_FIELD_OFFSET(Abilities, _impl_.may_fly_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Abilities::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.entity.Abilities)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float walk_speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  ::uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_walk_speed(), target);
  }

  // float fly_speed = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  ::uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_fly_speed(), target);
  }

  // bool flying = 3;
  if (this->_internal_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_flying(), target);
  }

  // bool instant_build = 4;
  if (this->_internal_instant_build() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_instant_build(), target);
  }

  // bool invulnerable = 5;
  if (this->_internal_invulnerable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_invulnerable(), target);
  }

  // bool may_build = 6;
  if (this->_internal_may_build() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_may_build(), target);
  }

  // bool may_fly = 7;
  if (this->_internal_may_fly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_may_fly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.entity.Abilities)
  return target;
}

::size_t Abilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.entity.Abilities)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float walk_speed = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  ::uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    total_size += 5;
  }

  // float fly_speed = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  ::uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    total_size += 5;
  }

  // bool flying = 3;
  if (this->_internal_flying() != 0) {
    total_size += 2;
  }

  // bool instant_build = 4;
  if (this->_internal_instant_build() != 0) {
    total_size += 2;
  }

  // bool invulnerable = 5;
  if (this->_internal_invulnerable() != 0) {
    total_size += 2;
  }

  // bool may_build = 6;
  if (this->_internal_may_build() != 0) {
    total_size += 2;
  }

  // bool may_fly = 7;
  if (this->_internal_may_fly() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Abilities::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Abilities::MergeImpl
};
const ::google::protobuf::Message::ClassData*Abilities::GetClassData() const { return &_class_data_; }


void Abilities::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Abilities*>(&to_msg);
  auto& from = static_cast<const Abilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.entity.Abilities)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_walk_speed = from._internal_walk_speed();
  ::uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    _this->_internal_set_walk_speed(from._internal_walk_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_fly_speed = from._internal_fly_speed();
  ::uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    _this->_internal_set_fly_speed(from._internal_fly_speed());
  }
  if (from._internal_flying() != 0) {
    _this->_internal_set_flying(from._internal_flying());
  }
  if (from._internal_instant_build() != 0) {
    _this->_internal_set_instant_build(from._internal_instant_build());
  }
  if (from._internal_invulnerable() != 0) {
    _this->_internal_set_invulnerable(from._internal_invulnerable());
  }
  if (from._internal_may_build() != 0) {
    _this->_internal_set_may_build(from._internal_may_build());
  }
  if (from._internal_may_fly() != 0) {
    _this->_internal_set_may_fly(from._internal_may_fly());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Abilities::CopyFrom(const Abilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.entity.Abilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Abilities::IsInitialized() const {
  return true;
}

void Abilities::InternalSwap(Abilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Abilities, _impl_.may_fly_)
      + sizeof(Abilities::_impl_.may_fly_)
      - PROTOBUF_FIELD_OFFSET(Abilities, _impl_.walk_speed_)>(
          reinterpret_cast<char*>(&_impl_.walk_speed_),
          reinterpret_cast<char*>(&other->_impl_.walk_speed_));
}

::google::protobuf::Metadata Abilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter, &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[0]);
}
// ===================================================================

class Metadata::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::entity::Metadata, _impl_._oneof_case_);
  static const ::minecpp::proto::common::Slot& slot(const Metadata* msg);
};

const ::minecpp::proto::common::Slot& Metadata::_Internal::slot(const Metadata* msg) {
  return *msg->_impl_.value_.slot_;
}
void Metadata::set_allocated_slot(::minecpp::proto::common::Slot* slot) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (slot) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(slot));
    if (message_arena != submessage_arena) {
      slot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    set_has_slot();
    _impl_.value_.slot_ = slot;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.Metadata.slot)
}
void Metadata::clear_slot() {
  if (value_case() == kSlot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.slot_;
    }
    clear_has_value();
  }
}
Metadata::Metadata(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.entity.Metadata)
}
Metadata::Metadata(const Metadata& from) : ::google::protobuf::Message() {
  Metadata* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  clear_has_value();
  switch (from.value_case()) {
    case kSlot: {
      _this->_internal_mutable_slot()->::minecpp::proto::common::Slot::MergeFrom(
          from._internal_slot());
      break;
    }
    case kByte: {
      _this->_internal_set_byte(from._internal_byte());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.entity.Metadata)
}
inline void Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u},
      decltype(_impl_.value_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_value();
}
Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:minecpp.proto.entity.Metadata)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}
void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:minecpp.proto.entity.Metadata)
  switch (value_case()) {
    case kSlot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.slot_;
      }
      break;
    }
    case kByte: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.entity.Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 1, 0, 2> Metadata::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Metadata_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Metadata, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Metadata, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(Metadata, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .minecpp.proto.common.Slot slot = 2;
    {PROTOBUF_FIELD_OFFSET(Metadata, _impl_.value_.slot_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 byte = 3;
    {PROTOBUF_FIELD_OFFSET(Metadata, _impl_.value_.byte_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Slot>()},
  }}, {{
  }},
};

::uint8_t* Metadata::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.entity.Metadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  switch (value_case()) {
    case kSlot: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::slot(this),
          _Internal::slot(this).GetCachedSize(), target, stream);
      break;
    }
    case kByte: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this->_internal_byte(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.entity.Metadata)
  return target;
}

::size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.entity.Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  switch (value_case()) {
    // .minecpp.proto.common.Slot slot = 2;
    case kSlot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.value_.slot_);
      break;
    }
    // uint32 byte = 3;
    case kByte: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_byte());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Metadata::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::google::protobuf::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.entity.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  switch (from.value_case()) {
    case kSlot: {
      _this->_internal_mutable_slot()->::minecpp::proto::common::Slot::MergeFrom(
          from._internal_slot());
      break;
    }
    case kByte: {
      _this->_internal_set_byte(from._internal_byte());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.entity.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.index_, other->_impl_.index_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter, &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[1]);
}
// ===================================================================

class Entity::_Internal {
 public:
  using HasBits = decltype(std::declval<Entity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Entity, _impl_._has_bits_);
  static const ::minecpp::proto::common::UUID& uuid(const Entity* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::minecpp::proto::common::Vector3& position(const Entity* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::minecpp::proto::common::Rotation& rotation(const Entity* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::minecpp::proto::common::Vector3i& velocity(const Entity* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::minecpp::proto::common::UUID& Entity::_Internal::uuid(const Entity* msg) {
  return *msg->_impl_.uuid_;
}
const ::minecpp::proto::common::Vector3& Entity::_Internal::position(const Entity* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::common::Rotation& Entity::_Internal::rotation(const Entity* msg) {
  return *msg->_impl_.rotation_;
}
const ::minecpp::proto::common::Vector3i& Entity::_Internal::velocity(const Entity* msg) {
  return *msg->_impl_.velocity_;
}
void Entity::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Entity::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Entity::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Entity::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Entity::Entity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.entity.Entity)
}
Entity::Entity(const Entity& from) : ::google::protobuf::Message() {
  Entity* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.metadata_){from._impl_.metadata_},
      decltype(_impl_.uuid_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.rotation_){nullptr},
      decltype(_impl_.velocity_){nullptr},
      decltype(_impl_.entity_id_){},
      decltype(_impl_.entity_type_){},
      decltype(_impl_.head_yaw_){},
      decltype(_impl_.data_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.uuid_ = new ::minecpp::proto::common::UUID(*from._impl_.uuid_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.position_ = new ::minecpp::proto::common::Vector3(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::Rotation(*from._impl_.rotation_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.velocity_ = new ::minecpp::proto::common::Vector3i(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.data_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.data_));

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.entity.Entity)
}
inline void Entity::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.metadata_){arena},
      decltype(_impl_.uuid_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.rotation_){nullptr},
      decltype(_impl_.velocity_){nullptr},
      decltype(_impl_.entity_id_){0u},
      decltype(_impl_.entity_type_){0u},
      decltype(_impl_.head_yaw_){0},
      decltype(_impl_.data_){0u},
  };
}
Entity::~Entity() {
  // @@protoc_insertion_point(destructor:minecpp.proto.entity.Entity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Entity::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uuid_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}
void Entity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.entity.Entity)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_metadata()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  ::memset(&_impl_.entity_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.data_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Entity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 0, 2> Entity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Entity, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Entity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 entity_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Entity, _impl_.entity_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.entity_id_)}},
    // .minecpp.proto.common.UUID uuid = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.uuid_)}},
    // uint32 entity_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Entity, _impl_.entity_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.entity_type_)}},
    // .minecpp.proto.common.Vector3 position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Entity, _impl_.position_)}},
    // .minecpp.proto.common.Rotation rotation = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Entity, _impl_.rotation_)}},
    // float head_yaw = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.head_yaw_)}},
    // uint32 data = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Entity, _impl_.data_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.data_)}},
    // .minecpp.proto.common.Vector3i velocity = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(Entity, _impl_.velocity_)}},
    // repeated .minecpp.proto.entity.Metadata metadata = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(Entity, _impl_.metadata_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.entity_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .minecpp.proto.common.UUID uuid = 2;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.uuid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 entity_type = 3;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.entity_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .minecpp.proto.common.Vector3 position = 4;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .minecpp.proto.common.Rotation rotation = 5;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.rotation_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float head_yaw = 6;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.head_yaw_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 data = 7;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .minecpp.proto.common.Vector3i velocity = 8;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.velocity_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .minecpp.proto.entity.Metadata metadata = 9;
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.metadata_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::UUID>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Vector3>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Rotation>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Vector3i>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::entity::Metadata>()},
  }}, {{
  }},
};

::uint8_t* Entity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.entity.Entity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_entity_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.UUID uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_type = 3;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_entity_type(), target);
  }

  // .minecpp.proto.common.Vector3 position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.Rotation rotation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // float head_yaw = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = this->_internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_head_yaw(), target);
  }

  // uint32 data = 7;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_data(), target);
  }

  // .minecpp.proto.common.Vector3i velocity = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.entity.Metadata metadata = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.entity.Entity)
  return target;
}

::size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.entity.Entity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.Metadata metadata = 9;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->_internal_metadata()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .minecpp.proto.common.UUID uuid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.uuid_);
    }

    // .minecpp.proto.common.Vector3 position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .minecpp.proto.common.Rotation rotation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

    // .minecpp.proto.common.Vector3i velocity = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

  }
  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_entity_id());
  }

  // uint32 entity_type = 3;
  if (this->_internal_entity_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_entity_type());
  }

  // float head_yaw = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = this->_internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    total_size += 5;
  }

  // uint32 data = 7;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Entity::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Entity::MergeImpl
};
const ::google::protobuf::Message::ClassData*Entity::GetClassData() const { return &_class_data_; }


void Entity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Entity*>(&to_msg);
  auto& from = static_cast<const Entity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.entity.Entity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata()->MergeFrom(from._internal_metadata());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::minecpp::proto::common::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::minecpp::proto::common::Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rotation()->::minecpp::proto::common::Rotation::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_velocity()->::minecpp::proto::common::Vector3i::MergeFrom(
          from._internal_velocity());
    }
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_head_yaw = from._internal_head_yaw();
  ::uint32_t raw_head_yaw;
  memcpy(&raw_head_yaw, &tmp_head_yaw, sizeof(tmp_head_yaw));
  if (raw_head_yaw != 0) {
    _this->_internal_set_head_yaw(from._internal_head_yaw());
  }
  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.entity.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, _impl_.data_)
      + sizeof(Entity::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Entity, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter, &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[2]);
}
// ===================================================================

class EntityEquipment::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityEquipment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_._has_bits_);
  static const ::minecpp::proto::common::Slot& item(const EntityEquipment* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::Slot& EntityEquipment::_Internal::item(const EntityEquipment* msg) {
  return *msg->_impl_.item_;
}
void EntityEquipment::clear_item() {
  if (_impl_.item_ != nullptr) _impl_.item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EntityEquipment::EntityEquipment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.entity.EntityEquipment)
}
EntityEquipment::EntityEquipment(const EntityEquipment& from) : ::google::protobuf::Message() {
  EntityEquipment* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.item_){nullptr},
      decltype(_impl_.slot_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.item_ = new ::minecpp::proto::common::Slot(*from._impl_.item_);
  }
  _this->_impl_.slot_ = from._impl_.slot_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.entity.EntityEquipment)
}
inline void EntityEquipment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.item_){nullptr},
      decltype(_impl_.slot_){0},
  };
}
EntityEquipment::~EntityEquipment() {
  // @@protoc_insertion_point(destructor:minecpp.proto.entity.EntityEquipment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EntityEquipment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}
void EntityEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EntityEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.entity.EntityEquipment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.item_ != nullptr);
    _impl_.item_->Clear();
  }
  _impl_.slot_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EntityEquipment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EntityEquipment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EntityEquipment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .minecpp.proto.common.Slot item = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.item_)}},
    // .minecpp.proto.entity.EquipmentSlot slot = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EntityEquipment, _impl_.slot_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.slot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.entity.EquipmentSlot slot = 1;
    {PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.slot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .minecpp.proto.common.Slot item = 2;
    {PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.item_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Slot>()},
  }}, {{
  }},
};

::uint8_t* EntityEquipment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.entity.EntityEquipment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .minecpp.proto.entity.EquipmentSlot slot = 1;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_slot(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.Slot item = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.entity.EntityEquipment)
  return target;
}

::size_t EntityEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.entity.EntityEquipment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.Slot item = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .minecpp.proto.entity.EquipmentSlot slot = 1;
  if (this->_internal_slot() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EntityEquipment::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EntityEquipment::MergeImpl
};
const ::google::protobuf::Message::ClassData*EntityEquipment::GetClassData() const { return &_class_data_; }


void EntityEquipment::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EntityEquipment*>(&to_msg);
  auto& from = static_cast<const EntityEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.entity.EntityEquipment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_item()->::minecpp::proto::common::Slot::MergeFrom(
        from._internal_item());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntityEquipment::CopyFrom(const EntityEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.entity.EntityEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EntityEquipment::IsInitialized() const {
  return true;
}

void EntityEquipment::InternalSwap(EntityEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.slot_)
      + sizeof(EntityEquipment::_impl_.slot_)
      - PROTOBUF_FIELD_OFFSET(EntityEquipment, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::google::protobuf::Metadata EntityEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter, &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[3]);
}
// ===================================================================

class PlayerEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerEntity>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_._has_bits_);
  static const ::minecpp::proto::common::UUID& uuid(const PlayerEntity* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::minecpp::proto::common::Vector3& position(const PlayerEntity* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::minecpp::proto::common::Rotation& rotation(const PlayerEntity* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::minecpp::proto::common::UUID& PlayerEntity::_Internal::uuid(const PlayerEntity* msg) {
  return *msg->_impl_.uuid_;
}
const ::minecpp::proto::common::Vector3& PlayerEntity::_Internal::position(const PlayerEntity* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::common::Rotation& PlayerEntity::_Internal::rotation(const PlayerEntity* msg) {
  return *msg->_impl_.rotation_;
}
void PlayerEntity::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlayerEntity::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PlayerEntity::clear_rotation() {
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PlayerEntity::PlayerEntity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.entity.PlayerEntity)
}
PlayerEntity::PlayerEntity(const PlayerEntity& from) : ::google::protobuf::Message() {
  PlayerEntity* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.equipment_){from._impl_.equipment_},
      decltype(_impl_.uuid_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.rotation_){nullptr},
      decltype(_impl_.entity_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.uuid_ = new ::minecpp::proto::common::UUID(*from._impl_.uuid_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.position_ = new ::minecpp::proto::common::Vector3(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::Rotation(*from._impl_.rotation_);
  }
  _this->_impl_.entity_id_ = from._impl_.entity_id_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.entity.PlayerEntity)
}
inline void PlayerEntity::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.equipment_){arena},
      decltype(_impl_.uuid_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.rotation_){nullptr},
      decltype(_impl_.entity_id_){0u},
  };
}
PlayerEntity::~PlayerEntity() {
  // @@protoc_insertion_point(destructor:minecpp.proto.entity.PlayerEntity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerEntity::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equipment_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uuid_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}
void PlayerEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PlayerEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.entity.PlayerEntity)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_equipment()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  _impl_.entity_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerEntity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> PlayerEntity::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967236,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlayerEntity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 entity_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerEntity, _impl_.entity_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.entity_id_)}},
    // .minecpp.proto.common.UUID uuid = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.uuid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .minecpp.proto.common.Vector3 position = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.position_)}},
    // .minecpp.proto.common.Rotation rotation = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.rotation_)}},
    // repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 3, PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.equipment_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.entity_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .minecpp.proto.common.UUID uuid = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.uuid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .minecpp.proto.common.Vector3 position = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .minecpp.proto.common.Rotation rotation = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.rotation_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.equipment_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::UUID>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Vector3>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::Rotation>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::entity::EntityEquipment>()},
  }}, {{
  }},
};

::uint8_t* PlayerEntity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.entity.PlayerEntity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_entity_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.UUID uuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.Vector3 position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.Rotation rotation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipment_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipment().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.entity.PlayerEntity)
  return target;
}

::size_t PlayerEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.entity.PlayerEntity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
  total_size += 1UL * this->_internal_equipment_size();
  for (const auto& msg : this->_internal_equipment()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .minecpp.proto.common.UUID uuid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.uuid_);
    }

    // .minecpp.proto.common.Vector3 position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .minecpp.proto.common.Rotation rotation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

  }
  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerEntity::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PlayerEntity::MergeImpl
};
const ::google::protobuf::Message::ClassData*PlayerEntity::GetClassData() const { return &_class_data_; }


void PlayerEntity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerEntity*>(&to_msg);
  auto& from = static_cast<const PlayerEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.entity.PlayerEntity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_equipment()->MergeFrom(from._internal_equipment());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::minecpp::proto::common::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::minecpp::proto::common::Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rotation()->::minecpp::proto::common::Rotation::MergeFrom(
          from._internal_rotation());
    }
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerEntity::CopyFrom(const PlayerEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.entity.PlayerEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerEntity::IsInitialized() const {
  return true;
}

void PlayerEntity::InternalSwap(PlayerEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.equipment_.InternalSwap(&other->_impl_.equipment_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.entity_id_)
      + sizeof(PlayerEntity::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerEntity, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::google::protobuf::Metadata PlayerEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_getter, &descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fentity_2fEntity_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace entity
}  // namespace proto
}  // namespace minecpp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
