// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/common/Common.proto

#include <minecpp/proto/common/Common.pb.h>

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace minecpp {
namespace proto {
namespace common {
        template <typename>
PROTOBUF_CONSTEXPR ChunkPosition::ChunkPosition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ChunkPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkPositionDefaultTypeInternal() {}
  union {
    ChunkPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkPositionDefaultTypeInternal _ChunkPosition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BlockPosition::BlockPosition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BlockPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPositionDefaultTypeInternal() {}
  union {
    BlockPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPositionDefaultTypeInternal _BlockPosition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BlockState::BlockState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.block_state_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct BlockStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockStateDefaultTypeInternal() {}
  union {
    BlockState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockStateDefaultTypeInternal _BlockState_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Gameplay::Gameplay(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.seed_)*/ ::uint64_t{0u},
      /*decltype(_impl_.dimension_)*/ 0,
      /*decltype(_impl_.mode_)*/ 0,
      /*decltype(_impl_.world_)*/ 0,
      /*decltype(_impl_.view_distance_)*/ 0,
      /*decltype(_impl_.max_players_)*/ 0,
      /*decltype(_impl_.hardcore_)*/ false,
      /*decltype(_impl_.reduced_debug_info_)*/ false,
      /*decltype(_impl_.do_immediate_respawn_)*/ false,
      /*decltype(_impl_.difficulty_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GameplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameplayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameplayDefaultTypeInternal() {}
  union {
    Gameplay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameplayDefaultTypeInternal _Gameplay_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Rotation::Rotation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.yaw_)*/ 0,
      /*decltype(_impl_.pitch_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ItemId::ItemId(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.id_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ItemIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemIdDefaultTypeInternal() {}
  union {
    ItemId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemIdDefaultTypeInternal _ItemId_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR LightLevel::LightLevel(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.level_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct LightLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightLevelDefaultTypeInternal() {}
  union {
    LightLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightLevelDefaultTypeInternal _LightLevel_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR ChunkSectionPosition::ChunkSectionPosition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.chunk_position_)*/ nullptr,
      /*decltype(_impl_.y_)*/ 0,
    } {}
struct ChunkSectionPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkSectionPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkSectionPositionDefaultTypeInternal() {}
  union {
    ChunkSectionPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkSectionPositionDefaultTypeInternal _ChunkSectionPosition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SectionRange::SectionRange(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.from_)*/ nullptr,
      /*decltype(_impl_.to_)*/ nullptr,
    } {}
struct SectionRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionRangeDefaultTypeInternal() {}
  union {
    SectionRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionRangeDefaultTypeInternal _SectionRange_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR LightSource::LightSource(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.strength_)*/ 0,
    } {}
struct LightSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightSourceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightSourceDefaultTypeInternal() {}
  union {
    LightSource _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightSourceDefaultTypeInternal _LightSource_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR UUID::UUID(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.lower_)*/ ::uint64_t{0u},
      /*decltype(_impl_.upper_)*/ ::uint64_t{0u},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct UUIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UUIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UUIDDefaultTypeInternal() {}
  union {
    UUID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UUIDDefaultTypeInternal _UUID_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Slot::Slot(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.nbt_data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.item_id_)*/ nullptr,
      /*decltype(_impl_.count_)*/ 0u,
    } {}
struct SlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlotDefaultTypeInternal() {}
  union {
    Slot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlotDefaultTypeInternal _Slot_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto = nullptr;
const ::uint32_t TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkPosition, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkPosition, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockPosition, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockPosition, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockPosition, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::BlockState, _impl_.block_state_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.dimension_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.seed_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.world_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.view_distance_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.hardcore_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.max_players_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.reduced_debug_info_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.do_immediate_respawn_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Gameplay, _impl_.difficulty_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Rotation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Rotation, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Rotation, _impl_.pitch_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ItemId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ItemId, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightLevel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightLevel, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkSectionPosition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkSectionPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkSectionPosition, _impl_.chunk_position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::ChunkSectionPosition, _impl_.y_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::SectionRange, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::SectionRange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::SectionRange, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::SectionRange, _impl_.to_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightSource, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightSource, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightSource, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::LightSource, _impl_.strength_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::UUID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::UUID, _impl_.lower_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::UUID, _impl_.upper_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Slot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Slot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Slot, _impl_.item_id_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Slot, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::Slot, _impl_.nbt_data_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::minecpp::proto::common::ChunkPosition)},
        {10, -1, -1, sizeof(::minecpp::proto::common::BlockPosition)},
        {21, -1, -1, sizeof(::minecpp::proto::common::BlockState)},
        {30, -1, -1, sizeof(::minecpp::proto::common::Gameplay)},
        {48, -1, -1, sizeof(::minecpp::proto::common::Rotation)},
        {58, -1, -1, sizeof(::minecpp::proto::common::ItemId)},
        {67, -1, -1, sizeof(::minecpp::proto::common::LightLevel)},
        {76, 86, -1, sizeof(::minecpp::proto::common::ChunkSectionPosition)},
        {88, 98, -1, sizeof(::minecpp::proto::common::SectionRange)},
        {100, 110, -1, sizeof(::minecpp::proto::common::LightSource)},
        {112, -1, -1, sizeof(::minecpp::proto::common::UUID)},
        {122, 133, -1, sizeof(::minecpp::proto::common::Slot)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::minecpp::proto::common::_ChunkPosition_default_instance_._instance,
    &::minecpp::proto::common::_BlockPosition_default_instance_._instance,
    &::minecpp::proto::common::_BlockState_default_instance_._instance,
    &::minecpp::proto::common::_Gameplay_default_instance_._instance,
    &::minecpp::proto::common::_Rotation_default_instance_._instance,
    &::minecpp::proto::common::_ItemId_default_instance_._instance,
    &::minecpp::proto::common::_LightLevel_default_instance_._instance,
    &::minecpp::proto::common::_ChunkSectionPosition_default_instance_._instance,
    &::minecpp::proto::common::_SectionRange_default_instance_._instance,
    &::minecpp::proto::common::_LightSource_default_instance_._instance,
    &::minecpp::proto::common::_UUID_default_instance_._instance,
    &::minecpp::proto::common::_Slot_default_instance_._instance,
};
const char descriptor_table_protodef_minecpp_2fproto_2fcommon_2fCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!minecpp/proto/common/Common.proto\022\024min"
    "ecpp.proto.common\"%\n\rChunkPosition\022\t\n\001x\030"
    "\001 \001(\005\022\t\n\001z\030\002 \001(\005\"0\n\rBlockPosition\022\t\n\001x\030\001"
    " \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"!\n\nBlockState"
    "\022\023\n\013block_state\030\001 \001(\r\"\334\002\n\010Gameplay\0226\n\tdi"
    "mension\030\001 \001(\0162#.minecpp.proto.common.Dim"
    "ensionType\022\014\n\004seed\030\002 \001(\004\022,\n\004mode\030\003 \001(\0162\036"
    ".minecpp.proto.common.GameMode\022.\n\005world\030"
    "\004 \001(\0162\037.minecpp.proto.common.WorldType\022\025"
    "\n\rview_distance\030\005 \001(\005\022\020\n\010hardcore\030\006 \001(\010\022"
    "\023\n\013max_players\030\007 \001(\005\022\032\n\022reduced_debug_in"
    "fo\030\010 \001(\010\022\034\n\024do_immediate_respawn\030\t \001(\010\0224"
    "\n\ndifficulty\030\n \001(\0162 .minecpp.proto.commo"
    "n.Difficulty\"&\n\010Rotation\022\013\n\003yaw\030\001 \001(\002\022\r\n"
    "\005pitch\030\002 \001(\002\"\024\n\006ItemId\022\n\n\002id\030\001 \001(\r\"\033\n\nLi"
    "ghtLevel\022\r\n\005level\030\001 \001(\r\"^\n\024ChunkSectionP"
    "osition\022;\n\016chunk_position\030\001 \001(\0132#.minecp"
    "p.proto.common.ChunkPosition\022\t\n\001y\030\002 \001(\005\""
    "\200\001\n\014SectionRange\0228\n\004from\030\001 \001(\0132*.minecpp"
    ".proto.common.ChunkSectionPosition\0226\n\002to"
    "\030\002 \001(\0132*.minecpp.proto.common.ChunkSecti"
    "onPosition\"V\n\013LightSource\0225\n\010position\030\001 "
    "\001(\0132#.minecpp.proto.common.BlockPosition"
    "\022\020\n\010strength\030\002 \001(\005\"$\n\004UUID\022\r\n\005lower\030\001 \001("
    "\004\022\r\n\005upper\030\002 \001(\004\"V\n\004Slot\022-\n\007item_id\030\001 \001("
    "\0132\034.minecpp.proto.common.ItemId\022\r\n\005count"
    "\030\002 \001(\r\022\020\n\010nbt_data\030\003 \001(\014*3\n\rDimensionTyp"
    "e\022\r\n\tOverworld\020\000\022\n\n\006Nether\020\001\022\007\n\003End\020\002*,\n"
    "\nDifficulty\022\010\n\004Easy\020\000\022\n\n\006Normal\020\001\022\010\n\004Har"
    "d\020\002*D\n\010GameMode\022\014\n\010Survival\020\000\022\014\n\010Creativ"
    "e\020\001\022\r\n\tAdventure\020\002\022\r\n\tSpectator\020\003*R\n\tWor"
    "ldType\022\013\n\007Default\020\000\022\010\n\004Flat\020\001\022\017\n\013LargeBi"
    "omes\020\002\022\r\n\tAmplified\020\003\022\016\n\nCustomised\020\004*\222\001"
    "\n\022PlayerDiggingState\022\013\n\007Digging\020\000\022\023\n\017Can"
    "celedDigging\020\001\022\023\n\017FinishedDigging\020\002\022\020\n\014D"
    "ropAllItems\020\003\022\014\n\010DropItem\020\004\022\022\n\016ReleaseUs"
    "eItem\020\005\022\021\n\rSwapHeldItems\020\006*E\n\004Face\022\n\n\006Bo"
    "ttom\020\000\022\007\n\003Top\020\001\022\t\n\005North\020\002\022\t\n\005South\020\003\022\010\n"
    "\004West\020\004\022\010\n\004East\020\005*\037\n\tLightType\022\t\n\005Block\020"
    "\000\022\007\n\003Sky\020\001*;\n\017InteractionType\022\014\n\010Interac"
    "t\020\000\022\n\n\006Attack\020\001\022\016\n\nInteractAt\020\002*%\n\010HandT"
    "ype\022\014\n\010MainHand\020\000\022\013\n\007OffHand\020\001*\200\001\n\017Entit"
    "yAnimation\022\020\n\014SwingMainArm\020\000\022\016\n\nTakeDama"
    "ge\020\001\022\014\n\010LeaveBed\020\002\022\020\n\014SwingOffHand\020\003\022\022\n\016"
    "CriticalEffect\020\004\022\027\n\023MagicCriticalEffect\020"
    "\005b\006proto3"
};
static ::absl::once_flag descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto = {
    false,
    false,
    1809,
    descriptor_table_protodef_minecpp_2fproto_2fcommon_2fCommon_2eproto,
    "minecpp/proto/common/Common.proto",
    &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto,
    file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fcommon_2fCommon_2eproto(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
namespace minecpp {
namespace proto {
namespace common {
const ::google::protobuf::EnumDescriptor* DimensionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[0];
}
bool DimensionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* Difficulty_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[1];
}
bool Difficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* GameMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[2];
}
bool GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* WorldType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[3];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* PlayerDiggingState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[4];
}
bool PlayerDiggingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* Face_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[5];
}
bool Face_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* LightType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[6];
}
bool LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* InteractionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[7];
}
bool InteractionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* HandType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[8];
}
bool HandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EntityAnimation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fCommon_2eproto[9];
}
bool EntityAnimation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ChunkPosition::_Internal {
 public:
};

ChunkPosition::ChunkPosition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.ChunkPosition)
}
ChunkPosition::ChunkPosition(const ChunkPosition& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.ChunkPosition)
}
inline void ChunkPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.z_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ChunkPosition::~ChunkPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.ChunkPosition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChunkPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ChunkPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ChunkPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.ChunkPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChunkPosition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ChunkPosition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChunkPosition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 z = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkPosition, _impl_.z_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.z_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkPosition, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 z = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ChunkPosition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.ChunkPosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.ChunkPosition)
  return target;
}

::size_t ChunkPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.ChunkPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChunkPosition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ChunkPosition::MergeImpl
};
const ::google::protobuf::Message::ClassData*ChunkPosition::GetClassData() const { return &_class_data_; }


void ChunkPosition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChunkPosition*>(&to_msg);
  auto& from = static_cast<const ChunkPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.ChunkPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkPosition::CopyFrom(const ChunkPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.ChunkPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChunkPosition::IsInitialized() const {
  return true;
}

void ChunkPosition::InternalSwap(ChunkPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.z_)
      + sizeof(ChunkPosition::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata ChunkPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[0]);
}
// ===================================================================

class BlockPosition::_Internal {
 public:
};

BlockPosition::BlockPosition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.BlockPosition)
}
BlockPosition::BlockPosition(const BlockPosition& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.BlockPosition)
}
inline void BlockPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BlockPosition::~BlockPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.BlockPosition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BlockPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BlockPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BlockPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.BlockPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BlockPosition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> BlockPosition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BlockPosition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPosition, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.x_)}},
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPosition, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.y_)}},
    // int32 z = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPosition, _impl_.z_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 z = 3;
    {PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BlockPosition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.BlockPosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.BlockPosition)
  return target;
}

::size_t BlockPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.BlockPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BlockPosition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BlockPosition::MergeImpl
};
const ::google::protobuf::Message::ClassData*BlockPosition::GetClassData() const { return &_class_data_; }


void BlockPosition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BlockPosition*>(&to_msg);
  auto& from = static_cast<const BlockPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.BlockPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPosition::CopyFrom(const BlockPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.BlockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BlockPosition::IsInitialized() const {
  return true;
}

void BlockPosition::InternalSwap(BlockPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.z_)
      + sizeof(BlockPosition::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata BlockPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[1]);
}
// ===================================================================

class BlockState::_Internal {
 public:
};

BlockState::BlockState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.BlockState)
}
BlockState::BlockState(const BlockState& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.BlockState)
}
inline void BlockState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.block_state_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
BlockState::~BlockState() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.BlockState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BlockState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void BlockState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BlockState::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.BlockState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_state_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BlockState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> BlockState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BlockState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 block_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockState, _impl_.block_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlockState, _impl_.block_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 block_state = 1;
    {PROTOBUF_FIELD_OFFSET(BlockState, _impl_.block_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* BlockState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.BlockState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 block_state = 1;
  if (this->_internal_block_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_block_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.BlockState)
  return target;
}

::size_t BlockState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.BlockState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_state = 1;
  if (this->_internal_block_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_block_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BlockState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BlockState::MergeImpl
};
const ::google::protobuf::Message::ClassData*BlockState::GetClassData() const { return &_class_data_; }


void BlockState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BlockState*>(&to_msg);
  auto& from = static_cast<const BlockState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.BlockState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_state() != 0) {
    _this->_internal_set_block_state(from._internal_block_state());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockState::CopyFrom(const BlockState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.BlockState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BlockState::IsInitialized() const {
  return true;
}

void BlockState::InternalSwap(BlockState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.block_state_, other->_impl_.block_state_);
}

::google::protobuf::Metadata BlockState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[2]);
}
// ===================================================================

class Gameplay::_Internal {
 public:
};

Gameplay::Gameplay(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.Gameplay)
}
Gameplay::Gameplay(const Gameplay& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.Gameplay)
}
inline void Gameplay::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){::uint64_t{0u}},
      decltype(_impl_.dimension_){0},
      decltype(_impl_.mode_){0},
      decltype(_impl_.world_){0},
      decltype(_impl_.view_distance_){0},
      decltype(_impl_.max_players_){0},
      decltype(_impl_.hardcore_){false},
      decltype(_impl_.reduced_debug_info_){false},
      decltype(_impl_.do_immediate_respawn_){false},
      decltype(_impl_.difficulty_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Gameplay::~Gameplay() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.Gameplay)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Gameplay::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Gameplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Gameplay::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.Gameplay)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.difficulty_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.difficulty_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Gameplay::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> Gameplay::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Gameplay_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .minecpp.proto.common.DimensionType dimension = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.dimension_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.dimension_)}},
    // uint64 seed = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Gameplay, _impl_.seed_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.seed_)}},
    // .minecpp.proto.common.GameMode mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.mode_)}},
    // .minecpp.proto.common.WorldType world = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.world_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.world_)}},
    // int32 view_distance = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.view_distance_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.view_distance_)}},
    // bool hardcore = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Gameplay, _impl_.hardcore_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.hardcore_)}},
    // int32 max_players = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.max_players_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.max_players_)}},
    // bool reduced_debug_info = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Gameplay, _impl_.reduced_debug_info_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.reduced_debug_info_)}},
    // bool do_immediate_respawn = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Gameplay, _impl_.do_immediate_respawn_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.do_immediate_respawn_)}},
    // .minecpp.proto.common.Difficulty difficulty = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Gameplay, _impl_.difficulty_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.difficulty_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.DimensionType dimension = 1;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.dimension_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 seed = 2;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.seed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .minecpp.proto.common.GameMode mode = 3;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .minecpp.proto.common.WorldType world = 4;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.world_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 view_distance = 5;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.view_distance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool hardcore = 6;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.hardcore_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 max_players = 7;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.max_players_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool reduced_debug_info = 8;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.reduced_debug_info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool do_immediate_respawn = 9;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.do_immediate_respawn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .minecpp.proto.common.Difficulty difficulty = 10;
    {PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.difficulty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Gameplay::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.Gameplay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .minecpp.proto.common.DimensionType dimension = 1;
  if (this->_internal_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_dimension(), target);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_seed(), target);
  }

  // .minecpp.proto.common.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  // .minecpp.proto.common.WorldType world = 4;
  if (this->_internal_world() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_world(), target);
  }

  // int32 view_distance = 5;
  if (this->_internal_view_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_view_distance(), target);
  }

  // bool hardcore = 6;
  if (this->_internal_hardcore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_hardcore(), target);
  }

  // int32 max_players = 7;
  if (this->_internal_max_players() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_max_players(), target);
  }

  // bool reduced_debug_info = 8;
  if (this->_internal_reduced_debug_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_reduced_debug_info(), target);
  }

  // bool do_immediate_respawn = 9;
  if (this->_internal_do_immediate_respawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_do_immediate_respawn(), target);
  }

  // .minecpp.proto.common.Difficulty difficulty = 10;
  if (this->_internal_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.Gameplay)
  return target;
}

::size_t Gameplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.Gameplay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_seed());
  }

  // .minecpp.proto.common.DimensionType dimension = 1;
  if (this->_internal_dimension() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dimension());
  }

  // .minecpp.proto.common.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .minecpp.proto.common.WorldType world = 4;
  if (this->_internal_world() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_world());
  }

  // int32 view_distance = 5;
  if (this->_internal_view_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_view_distance());
  }

  // int32 max_players = 7;
  if (this->_internal_max_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_players());
  }

  // bool hardcore = 6;
  if (this->_internal_hardcore() != 0) {
    total_size += 2;
  }

  // bool reduced_debug_info = 8;
  if (this->_internal_reduced_debug_info() != 0) {
    total_size += 2;
  }

  // bool do_immediate_respawn = 9;
  if (this->_internal_do_immediate_respawn() != 0) {
    total_size += 2;
  }

  // .minecpp.proto.common.Difficulty difficulty = 10;
  if (this->_internal_difficulty() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Gameplay::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Gameplay::MergeImpl
};
const ::google::protobuf::Message::ClassData*Gameplay::GetClassData() const { return &_class_data_; }


void Gameplay::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Gameplay*>(&to_msg);
  auto& from = static_cast<const Gameplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.Gameplay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_dimension() != 0) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_world() != 0) {
    _this->_internal_set_world(from._internal_world());
  }
  if (from._internal_view_distance() != 0) {
    _this->_internal_set_view_distance(from._internal_view_distance());
  }
  if (from._internal_max_players() != 0) {
    _this->_internal_set_max_players(from._internal_max_players());
  }
  if (from._internal_hardcore() != 0) {
    _this->_internal_set_hardcore(from._internal_hardcore());
  }
  if (from._internal_reduced_debug_info() != 0) {
    _this->_internal_set_reduced_debug_info(from._internal_reduced_debug_info());
  }
  if (from._internal_do_immediate_respawn() != 0) {
    _this->_internal_set_do_immediate_respawn(from._internal_do_immediate_respawn());
  }
  if (from._internal_difficulty() != 0) {
    _this->_internal_set_difficulty(from._internal_difficulty());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Gameplay::CopyFrom(const Gameplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.Gameplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Gameplay::IsInitialized() const {
  return true;
}

void Gameplay::InternalSwap(Gameplay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.difficulty_)
      + sizeof(Gameplay::_impl_.difficulty_)
      - PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.seed_)>(
          reinterpret_cast<char*>(&_impl_.seed_),
          reinterpret_cast<char*>(&other->_impl_.seed_));
}

::google::protobuf::Metadata Gameplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[3]);
}
// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.Rotation)
}
Rotation::Rotation(const Rotation& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.Rotation)
}
inline void Rotation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.yaw_){0},
      decltype(_impl_.pitch_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.Rotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rotation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Rotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.Rotation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.yaw_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pitch_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.pitch_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Rotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float pitch = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)}},
    // float yaw = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float yaw = 1;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 2;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.Rotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_yaw(), target);
  }

  // float pitch = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.Rotation)
  return target;
}

::size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.Rotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 5;
  }

  // float pitch = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rotation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Rotation::MergeImpl
};
const ::google::protobuf::Message::ClassData*Rotation::GetClassData() const { return &_class_data_; }


void Rotation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.Rotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rotation::IsInitialized() const {
  return true;
}

void Rotation::InternalSwap(Rotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)
      + sizeof(Rotation::_impl_.pitch_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)>(
          reinterpret_cast<char*>(&_impl_.yaw_),
          reinterpret_cast<char*>(&other->_impl_.yaw_));
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[4]);
}
// ===================================================================

class ItemId::_Internal {
 public:
};

ItemId::ItemId(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.ItemId)
}
ItemId::ItemId(const ItemId& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.ItemId)
}
inline void ItemId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
ItemId::~ItemId() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.ItemId)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ItemId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void ItemId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ItemId::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.ItemId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ItemId::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ItemId::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ItemId_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ItemId, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ItemId, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ItemId, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* ItemId::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.ItemId)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.ItemId)
  return target;
}

::size_t ItemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.ItemId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ItemId::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ItemId::MergeImpl
};
const ::google::protobuf::Message::ClassData*ItemId::GetClassData() const { return &_class_data_; }


void ItemId::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ItemId*>(&to_msg);
  auto& from = static_cast<const ItemId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.ItemId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ItemId::CopyFrom(const ItemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.ItemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ItemId::IsInitialized() const {
  return true;
}

void ItemId::InternalSwap(ItemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata ItemId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[5]);
}
// ===================================================================

class LightLevel::_Internal {
 public:
};

LightLevel::LightLevel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.LightLevel)
}
LightLevel::LightLevel(const LightLevel& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.LightLevel)
}
inline void LightLevel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
LightLevel::~LightLevel() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.LightLevel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LightLevel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void LightLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void LightLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.LightLevel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LightLevel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> LightLevel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LightLevel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LightLevel, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LightLevel, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 level = 1;
    {PROTOBUF_FIELD_OFFSET(LightLevel, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* LightLevel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.LightLevel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.LightLevel)
  return target;
}

::size_t LightLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.LightLevel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LightLevel::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    LightLevel::MergeImpl
};
const ::google::protobuf::Message::ClassData*LightLevel::GetClassData() const { return &_class_data_; }


void LightLevel::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LightLevel*>(&to_msg);
  auto& from = static_cast<const LightLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.LightLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightLevel::CopyFrom(const LightLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.LightLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LightLevel::IsInitialized() const {
  return true;
}

void LightLevel::InternalSwap(LightLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.level_, other->_impl_.level_);
}

::google::protobuf::Metadata LightLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[6]);
}
// ===================================================================

class ChunkSectionPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<ChunkSectionPosition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_._has_bits_);
  static const ::minecpp::proto::common::ChunkPosition& chunk_position(const ChunkSectionPosition* msg);
  static void set_has_chunk_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::ChunkPosition& ChunkSectionPosition::_Internal::chunk_position(const ChunkSectionPosition* msg) {
  return *msg->_impl_.chunk_position_;
}
ChunkSectionPosition::ChunkSectionPosition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.ChunkSectionPosition)
}
ChunkSectionPosition::ChunkSectionPosition(const ChunkSectionPosition& from) : ::google::protobuf::Message() {
  ChunkSectionPosition* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.chunk_position_){nullptr},
      decltype(_impl_.y_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.chunk_position_ = new ::minecpp::proto::common::ChunkPosition(*from._impl_.chunk_position_);
  }
  _this->_impl_.y_ = from._impl_.y_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.ChunkSectionPosition)
}
inline void ChunkSectionPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.chunk_position_){nullptr},
      decltype(_impl_.y_){0},
  };
}
ChunkSectionPosition::~ChunkSectionPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.ChunkSectionPosition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChunkSectionPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chunk_position_;
}
void ChunkSectionPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ChunkSectionPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.ChunkSectionPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.chunk_position_ != nullptr);
    _impl_.chunk_position_->Clear();
  }
  _impl_.y_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChunkSectionPosition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ChunkSectionPosition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChunkSectionPosition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkSectionPosition, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.y_)}},
    // .minecpp.proto.common.ChunkPosition chunk_position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.chunk_position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.ChunkPosition chunk_position = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.chunk_position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.y_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ChunkPosition>()},
  }}, {{
  }},
};

::uint8_t* ChunkSectionPosition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.ChunkSectionPosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.ChunkPosition chunk_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chunk_position(this),
        _Internal::chunk_position(this).GetCachedSize(), target, stream);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.ChunkSectionPosition)
  return target;
}

::size_t ChunkSectionPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.ChunkSectionPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.ChunkPosition chunk_position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_position_);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChunkSectionPosition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ChunkSectionPosition::MergeImpl
};
const ::google::protobuf::Message::ClassData*ChunkSectionPosition::GetClassData() const { return &_class_data_; }


void ChunkSectionPosition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChunkSectionPosition*>(&to_msg);
  auto& from = static_cast<const ChunkSectionPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.ChunkSectionPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_chunk_position()->::minecpp::proto::common::ChunkPosition::MergeFrom(
        from._internal_chunk_position());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkSectionPosition::CopyFrom(const ChunkSectionPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.ChunkSectionPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChunkSectionPosition::IsInitialized() const {
  return true;
}

void ChunkSectionPosition::InternalSwap(ChunkSectionPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.y_)
      + sizeof(ChunkSectionPosition::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ChunkSectionPosition, _impl_.chunk_position_)>(
          reinterpret_cast<char*>(&_impl_.chunk_position_),
          reinterpret_cast<char*>(&other->_impl_.chunk_position_));
}

::google::protobuf::Metadata ChunkSectionPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[7]);
}
// ===================================================================

class SectionRange::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionRange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SectionRange, _impl_._has_bits_);
  static const ::minecpp::proto::common::ChunkSectionPosition& from(const SectionRange* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::minecpp::proto::common::ChunkSectionPosition& to(const SectionRange* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::_Internal::from(const SectionRange* msg) {
  return *msg->_impl_.from_;
}
const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::_Internal::to(const SectionRange* msg) {
  return *msg->_impl_.to_;
}
SectionRange::SectionRange(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.SectionRange)
}
SectionRange::SectionRange(const SectionRange& from) : ::google::protobuf::Message() {
  SectionRange* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_){nullptr},
      decltype(_impl_.to_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.from_ = new ::minecpp::proto::common::ChunkSectionPosition(*from._impl_.from_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.to_ = new ::minecpp::proto::common::ChunkSectionPosition(*from._impl_.to_);
  }

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.SectionRange)
}
inline void SectionRange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_){nullptr},
      decltype(_impl_.to_){nullptr},
  };
}
SectionRange::~SectionRange() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.SectionRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SectionRange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}
void SectionRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SectionRange::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.SectionRange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SectionRange::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SectionRange::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SectionRange, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SectionRange_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .minecpp.proto.common.ChunkSectionPosition to = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.to_)}},
    // .minecpp.proto.common.ChunkSectionPosition from = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.from_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.ChunkSectionPosition from = 1;
    {PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .minecpp.proto.common.ChunkSectionPosition to = 2;
    {PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ChunkSectionPosition>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ChunkSectionPosition>()},
  }}, {{
  }},
};

::uint8_t* SectionRange::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.SectionRange)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.ChunkSectionPosition from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.ChunkSectionPosition to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.SectionRange)
  return target;
}

::size_t SectionRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.SectionRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .minecpp.proto.common.ChunkSectionPosition from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.from_);
    }

    // .minecpp.proto.common.ChunkSectionPosition to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.to_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SectionRange::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SectionRange::MergeImpl
};
const ::google::protobuf::Message::ClassData*SectionRange::GetClassData() const { return &_class_data_; }


void SectionRange::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SectionRange*>(&to_msg);
  auto& from = static_cast<const SectionRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.SectionRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from()->::minecpp::proto::common::ChunkSectionPosition::MergeFrom(
          from._internal_from());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to()->::minecpp::proto::common::ChunkSectionPosition::MergeFrom(
          from._internal_to());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SectionRange::CopyFrom(const SectionRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.SectionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SectionRange::IsInitialized() const {
  return true;
}

void SectionRange::InternalSwap(SectionRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.to_)
      + sizeof(SectionRange::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(SectionRange, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata SectionRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[8]);
}
// ===================================================================

class LightSource::_Internal {
 public:
  using HasBits = decltype(std::declval<LightSource>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LightSource, _impl_._has_bits_);
  static const ::minecpp::proto::common::BlockPosition& position(const LightSource* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::BlockPosition& LightSource::_Internal::position(const LightSource* msg) {
  return *msg->_impl_.position_;
}
LightSource::LightSource(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.LightSource)
}
LightSource::LightSource(const LightSource& from) : ::google::protobuf::Message() {
  LightSource* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.strength_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::minecpp::proto::common::BlockPosition(*from._impl_.position_);
  }
  _this->_impl_.strength_ = from._impl_.strength_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.LightSource)
}
inline void LightSource::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.strength_){0},
  };
}
LightSource::~LightSource() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.LightSource)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LightSource::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}
void LightSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void LightSource::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.LightSource)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.strength_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LightSource::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> LightSource::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LightSource, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LightSource_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 strength = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LightSource, _impl_.strength_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LightSource, _impl_.strength_)}},
    // .minecpp.proto.common.BlockPosition position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LightSource, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.BlockPosition position = 1;
    {PROTOBUF_FIELD_OFFSET(LightSource, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 strength = 2;
    {PROTOBUF_FIELD_OFFSET(LightSource, _impl_.strength_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::BlockPosition>()},
  }}, {{
  }},
};

::uint8_t* LightSource::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.LightSource)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.BlockPosition position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // int32 strength = 2;
  if (this->_internal_strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.LightSource)
  return target;
}

::size_t LightSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.LightSource)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.BlockPosition position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // int32 strength = 2;
  if (this->_internal_strength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_strength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LightSource::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    LightSource::MergeImpl
};
const ::google::protobuf::Message::ClassData*LightSource::GetClassData() const { return &_class_data_; }


void LightSource::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LightSource*>(&to_msg);
  auto& from = static_cast<const LightSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.LightSource)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::minecpp::proto::common::BlockPosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LightSource::CopyFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LightSource::IsInitialized() const {
  return true;
}

void LightSource::InternalSwap(LightSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightSource, _impl_.strength_)
      + sizeof(LightSource::_impl_.strength_)
      - PROTOBUF_FIELD_OFFSET(LightSource, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata LightSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[9]);
}
// ===================================================================

class UUID::_Internal {
 public:
};

UUID::UUID(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.UUID)
}
UUID::UUID(const UUID& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.UUID)
}
inline void UUID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lower_){::uint64_t{0u}},
      decltype(_impl_.upper_){::uint64_t{0u}},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
UUID::~UUID() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.UUID)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UUID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void UUID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.UUID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lower_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.upper_) -
      reinterpret_cast<char*>(&_impl_.lower_)) + sizeof(_impl_.upper_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UUID::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> UUID::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UUID_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint64 upper = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UUID, _impl_.upper_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(UUID, _impl_.upper_)}},
    // uint64 lower = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UUID, _impl_.lower_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UUID, _impl_.lower_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 lower = 1;
    {PROTOBUF_FIELD_OFFSET(UUID, _impl_.lower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 upper = 2;
    {PROTOBUF_FIELD_OFFSET(UUID, _impl_.upper_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* UUID::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.UUID)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 lower = 1;
  if (this->_internal_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_lower(), target);
  }

  // uint64 upper = 2;
  if (this->_internal_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.UUID)
  return target;
}

::size_t UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.UUID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 lower = 1;
  if (this->_internal_lower() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_lower());
  }

  // uint64 upper = 2;
  if (this->_internal_upper() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_upper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UUID::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    UUID::MergeImpl
};
const ::google::protobuf::Message::ClassData*UUID::GetClassData() const { return &_class_data_; }


void UUID::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UUID*>(&to_msg);
  auto& from = static_cast<const UUID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.UUID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lower() != 0) {
    _this->_internal_set_lower(from._internal_lower());
  }
  if (from._internal_upper() != 0) {
    _this->_internal_set_upper(from._internal_upper());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UUID::CopyFrom(const UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UUID::IsInitialized() const {
  return true;
}

void UUID::InternalSwap(UUID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UUID, _impl_.upper_)
      + sizeof(UUID::_impl_.upper_)
      - PROTOBUF_FIELD_OFFSET(UUID, _impl_.lower_)>(
          reinterpret_cast<char*>(&_impl_.lower_),
          reinterpret_cast<char*>(&other->_impl_.lower_));
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[10]);
}
// ===================================================================

class Slot::_Internal {
 public:
  using HasBits = decltype(std::declval<Slot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Slot, _impl_._has_bits_);
  static const ::minecpp::proto::common::ItemId& item_id(const Slot* msg);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::ItemId& Slot::_Internal::item_id(const Slot* msg) {
  return *msg->_impl_.item_id_;
}
Slot::Slot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.Slot)
}
Slot::Slot(const Slot& from) : ::google::protobuf::Message() {
  Slot* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.nbt_data_){},
      decltype(_impl_.item_id_){nullptr},
      decltype(_impl_.count_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.nbt_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nbt_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nbt_data().empty()) {
    _this->_impl_.nbt_data_.Set(from._internal_nbt_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.item_id_ = new ::minecpp::proto::common::ItemId(*from._impl_.item_id_);
  }
  _this->_impl_.count_ = from._impl_.count_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.Slot)
}
inline void Slot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.nbt_data_){},
      decltype(_impl_.item_id_){nullptr},
      decltype(_impl_.count_){0u},
  };
  _impl_.nbt_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nbt_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Slot::~Slot() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.Slot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Slot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nbt_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_id_;
}
void Slot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.Slot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nbt_data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.item_id_ != nullptr);
    _impl_.item_id_->Clear();
  }
  _impl_.count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Slot::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Slot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Slot, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Slot_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .minecpp.proto.common.ItemId item_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Slot, _impl_.item_id_)}},
    // uint32 count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Slot, _impl_.count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Slot, _impl_.count_)}},
    // bytes nbt_data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Slot, _impl_.nbt_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.ItemId item_id = 1;
    {PROTOBUF_FIELD_OFFSET(Slot, _impl_.item_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 count = 2;
    {PROTOBUF_FIELD_OFFSET(Slot, _impl_.count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes nbt_data = 3;
    {PROTOBUF_FIELD_OFFSET(Slot, _impl_.nbt_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ItemId>()},
  }}, {{
  }},
};

::uint8_t* Slot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.Slot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.ItemId item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item_id(this),
        _Internal::item_id(this).GetCachedSize(), target, stream);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_count(), target);
  }

  // bytes nbt_data = 3;
  if (!this->_internal_nbt_data().empty()) {
    const std::string& _s = this->_internal_nbt_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.Slot)
  return target;
}

::size_t Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.Slot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nbt_data = 3;
  if (!this->_internal_nbt_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_nbt_data());
  }

  // .minecpp.proto.common.ItemId item_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.item_id_);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Slot::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Slot::MergeImpl
};
const ::google::protobuf::Message::ClassData*Slot::GetClassData() const { return &_class_data_; }


void Slot::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Slot*>(&to_msg);
  auto& from = static_cast<const Slot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.Slot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nbt_data().empty()) {
    _this->_internal_set_nbt_data(from._internal_nbt_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_item_id()->::minecpp::proto::common::ItemId::MergeFrom(
        from._internal_item_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Slot::CopyFrom(const Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Slot::IsInitialized() const {
  return true;
}

void Slot::InternalSwap(Slot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nbt_data_, lhs_arena,
                                       &other->_impl_.nbt_data_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slot, _impl_.count_)
      + sizeof(Slot::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(Slot, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::google::protobuf::Metadata Slot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fCommon_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace proto
}  // namespace minecpp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
