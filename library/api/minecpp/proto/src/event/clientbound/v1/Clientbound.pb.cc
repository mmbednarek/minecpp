// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/event/clientbound/v1/Clientbound.proto

#include <minecpp/proto/event/clientbound/v1/Clientbound.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace event {
namespace clientbound {
namespace v1 {
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_.recipient_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR RecipientSinglePlayer::RecipientSinglePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecipientSinglePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientSinglePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientSinglePlayerDefaultTypeInternal() {}
  union {
    RecipientSinglePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientSinglePlayerDefaultTypeInternal _RecipientSinglePlayer_default_instance_;
PROTOBUF_CONSTEXPR RecipientMultiplePlayers::RecipientMultiplePlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecipientMultiplePlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientMultiplePlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientMultiplePlayersDefaultTypeInternal() {}
  union {
    RecipientMultiplePlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientMultiplePlayersDefaultTypeInternal _RecipientMultiplePlayers_default_instance_;
PROTOBUF_CONSTEXPR RecipientAllPlayers::RecipientAllPlayers(
    ::_pbi::ConstantInitialized) {}
struct RecipientAllPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientAllPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientAllPlayersDefaultTypeInternal() {}
  union {
    RecipientAllPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientAllPlayersDefaultTypeInternal _RecipientAllPlayers_default_instance_;
PROTOBUF_CONSTEXPR RecipientExcluding::RecipientExcluding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecipientExcludingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientExcludingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientExcludingDefaultTypeInternal() {}
  union {
    RecipientExcluding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientExcludingDefaultTypeInternal _RecipientExcluding_default_instance_;
PROTOBUF_CONSTEXPR AddPlayer::AddPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.ping_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPlayerDefaultTypeInternal() {}
  union {
    AddPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPlayerDefaultTypeInternal _AddPlayer_default_instance_;
PROTOBUF_CONSTEXPR SpawnPlayer::SpawnPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnPlayerDefaultTypeInternal() {}
  union {
    SpawnPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
PROTOBUF_CONSTEXPR EntityMove::EntityMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.movement_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityMoveDefaultTypeInternal() {}
  union {
    EntityMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityMoveDefaultTypeInternal _EntityMove_default_instance_;
PROTOBUF_CONSTEXPR EntityLook::EntityLook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityLookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityLookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityLookDefaultTypeInternal() {}
  union {
    EntityLook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityLookDefaultTypeInternal _EntityLook_default_instance_;
PROTOBUF_CONSTEXPR PlayerPositionRotation::PlayerPositionRotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerPositionRotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerPositionRotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerPositionRotationDefaultTypeInternal() {}
  union {
    PlayerPositionRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerPositionRotationDefaultTypeInternal _PlayerPositionRotation_default_instance_;
PROTOBUF_CONSTEXPR SetSpawnPosition::SetSpawnPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/uint64_t{0u}
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetSpawnPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSpawnPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSpawnPositionDefaultTypeInternal() {}
  union {
    SetSpawnPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSpawnPositionDefaultTypeInternal _SetSpawnPosition_default_instance_;
PROTOBUF_CONSTEXPR Chat::Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDefaultTypeInternal _Chat_default_instance_;
PROTOBUF_CONSTEXPR RemovePlayer::RemovePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemovePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovePlayerDefaultTypeInternal() {}
  union {
    RemovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
PROTOBUF_CONSTEXPR UpdateBlock::UpdateBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_position_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateBlockDefaultTypeInternal() {}
  union {
    UpdateBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateBlockDefaultTypeInternal _UpdateBlock_default_instance_;
PROTOBUF_CONSTEXPR AnimateEntity::AnimateEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_.animation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnimateEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimateEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimateEntityDefaultTypeInternal() {}
  union {
    AnimateEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimateEntityDefaultTypeInternal _AnimateEntity_default_instance_;
PROTOBUF_CONSTEXPR AcknowledgeBlockChange::AcknowledgeBlockChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sequence_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcknowledgeBlockChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgeBlockChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgeBlockChangeDefaultTypeInternal() {}
  union {
    AcknowledgeBlockChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgeBlockChangeDefaultTypeInternal _AcknowledgeBlockChange_default_instance_;
PROTOBUF_CONSTEXPR LoadTerrain::LoadTerrain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coords_)*/{}
  , /*decltype(_impl_.central_chunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadTerrainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadTerrainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadTerrainDefaultTypeInternal() {}
  union {
    LoadTerrain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadTerrainDefaultTypeInternal _LoadTerrain_default_instance_;
PROTOBUF_CONSTEXPR TransferPlayer::TransferPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.engine_instance_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferPlayerDefaultTypeInternal() {}
  union {
    TransferPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferPlayerDefaultTypeInternal _TransferPlayer_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerAbilities::UpdatePlayerAbilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.invulnerable_)*/false
  , /*decltype(_impl_.is_flying_)*/false
  , /*decltype(_impl_.allow_flying_)*/false
  , /*decltype(_impl_.creative_mode_)*/false
  , /*decltype(_impl_.walk_speed_)*/0
  , /*decltype(_impl_.fly_speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePlayerAbilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerAbilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerAbilitiesDefaultTypeInternal() {}
  union {
    UpdatePlayerAbilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerAbilitiesDefaultTypeInternal _UpdatePlayerAbilities_default_instance_;
PROTOBUF_CONSTEXPR UnloadChunk::UnloadChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/nullptr
  , /*decltype(_impl_.chunk_position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnloadChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnloadChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnloadChunkDefaultTypeInternal() {}
  union {
    UnloadChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnloadChunkDefaultTypeInternal _UnloadChunk_default_instance_;
PROTOBUF_CONSTEXPR PlayerList::PlayerList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerListDefaultTypeInternal() {}
  union {
    PlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerListDefaultTypeInternal _PlayerList_default_instance_;
PROTOBUF_CONSTEXPR EntityList::EntityList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityListDefaultTypeInternal() {}
  union {
    EntityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityListDefaultTypeInternal _EntityList_default_instance_;
PROTOBUF_CONSTEXPR AcceptPlayer::AcceptPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameplay_)*/nullptr
  , /*decltype(_impl_.abilities_)*/nullptr
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptPlayerDefaultTypeInternal() {}
  union {
    AcceptPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptPlayerDefaultTypeInternal _AcceptPlayer_default_instance_;
PROTOBUF_CONSTEXPR DenyPlayer::DenyPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denial_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DenyPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenyPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenyPlayerDefaultTypeInternal() {}
  union {
    DenyPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenyPlayerDefaultTypeInternal _DenyPlayer_default_instance_;
PROTOBUF_CONSTEXPR SetInventorySlot::SetInventorySlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slot_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetInventorySlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetInventorySlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetInventorySlotDefaultTypeInternal() {}
  union {
    SetInventorySlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetInventorySlotDefaultTypeInternal _SetInventorySlot_default_instance_;
PROTOBUF_CONSTEXPR SectionBlockLight::SectionBlockLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_light_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionBlockLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionBlockLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionBlockLightDefaultTypeInternal() {}
  union {
    SectionBlockLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionBlockLightDefaultTypeInternal _SectionBlockLight_default_instance_;
PROTOBUF_CONSTEXPR ChunkBlockLight::ChunkBlockLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkBlockLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkBlockLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkBlockLightDefaultTypeInternal() {}
  union {
    ChunkBlockLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkBlockLightDefaultTypeInternal _ChunkBlockLight_default_instance_;
PROTOBUF_CONSTEXPR UpdateBlockLight::UpdateBlockLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_light_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateBlockLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateBlockLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateBlockLightDefaultTypeInternal() {}
  union {
    UpdateBlockLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateBlockLightDefaultTypeInternal _UpdateBlockLight_default_instance_;
PROTOBUF_CONSTEXPR ChunkData::ChunkData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkDataDefaultTypeInternal() {}
  union {
    ChunkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
PROTOBUF_CONSTEXPR SetCenterChunk::SetCenterChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetCenterChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCenterChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCenterChunkDefaultTypeInternal() {}
  union {
    SetCenterChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCenterChunkDefaultTypeInternal _SetCenterChunk_default_instance_;
PROTOBUF_CONSTEXPR SetEntityEquipment::SetEntityEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_.equipment_slot_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetEntityEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEntityEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEntityEquipmentDefaultTypeInternal() {}
  union {
    SetEntityEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEntityEquipmentDefaultTypeInternal _SetEntityEquipment_default_instance_;
PROTOBUF_CONSTEXPR SetHealth::SetHealth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.health_)*/0
  , /*decltype(_impl_.food_)*/0
  , /*decltype(_impl_.food_saturation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetHealthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetHealthDefaultTypeInternal() {}
  union {
    SetHealth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetHealthDefaultTypeInternal _SetHealth_default_instance_;
}  // namespace v1
}  // namespace clientbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[32];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _impl_.payload_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _impl_.recipient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers, _impl_.player_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientExcluding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientExcluding, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _impl_.ping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _impl_.movement_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetSpawnPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetSpawnPosition, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetSpawnPosition, _impl_.angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, _impl_.entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, _impl_.block_position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateEntity, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateEntity, _impl_.animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange, _impl_.sequence_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, _impl_.central_chunk_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, _impl_.coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::TransferPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::TransferPlayer, _impl_.engine_instance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.invulnerable_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.is_flying_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.allow_flying_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.creative_mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.walk_speed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _impl_.fly_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, _impl_.chunk_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, _impl_.gameplay_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::DenyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::DenyPlayer, _impl_.denial_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetInventorySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetInventorySlot, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SectionBlockLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SectionBlockLight, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SectionBlockLight, _impl_.block_light_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::ChunkBlockLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::ChunkBlockLight, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::ChunkBlockLight, _impl_.sections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlockLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlockLight, _impl_.block_light_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::ChunkData, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetCenterChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetCenterChunk, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetEntityEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetEntityEquipment, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetEntityEquipment, _impl_.equipment_slot_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetEntityEquipment, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetHealth, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetHealth, _impl_.food_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SetHealth, _impl_.food_saturation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::Event)},
  { 12, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer)},
  { 19, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers)},
  { 26, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers)},
  { 32, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientExcluding)},
  { 39, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AddPlayer)},
  { 49, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SpawnPlayer)},
  { 59, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityMove)},
  { 69, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityLook)},
  { 78, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation)},
  { 86, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SetSpawnPosition)},
  { 94, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::Chat)},
  { 102, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RemovePlayer)},
  { 110, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UpdateBlock)},
  { 118, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AnimateEntity)},
  { 126, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange)},
  { 133, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::LoadTerrain)},
  { 141, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::TransferPlayer)},
  { 148, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities)},
  { 161, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UnloadChunk)},
  { 169, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::PlayerList)},
  { 176, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityList)},
  { 183, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AcceptPlayer)},
  { 192, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::DenyPlayer)},
  { 199, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SetInventorySlot)},
  { 206, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SectionBlockLight)},
  { 214, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::ChunkBlockLight)},
  { 222, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UpdateBlockLight)},
  { 229, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::ChunkData)},
  { 236, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SetCenterChunk)},
  { 243, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SetEntityEquipment)},
  { 252, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SetHealth)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::event::clientbound::v1::_Event_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientSinglePlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientMultiplePlayers_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientAllPlayers_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientExcluding_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AddPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SpawnPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityMove_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityLook_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_PlayerPositionRotation_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SetSpawnPosition_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_Chat_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RemovePlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UpdateBlock_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AnimateEntity_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AcknowledgeBlockChange_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_LoadTerrain_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_TransferPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UpdatePlayerAbilities_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UnloadChunk_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_PlayerList_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityList_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AcceptPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_DenyPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SetInventorySlot_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SectionBlockLight_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_ChunkBlockLight_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UpdateBlockLight_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_ChunkData_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SetCenterChunk_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SetEntityEquipment_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SetHealth_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4minecpp/proto/event/clientbound/v1/Cli"
  "entbound.proto\022\"minecpp.proto.event.clie"
  "ntbound.v1\032\031google/protobuf/any.proto\032$m"
  "inecpp/proto/common/v1/Common.proto\032$min"
  "ecpp/proto/common/v1/Vector.proto\032 minec"
  "pp/proto/player/v1/Id.proto\032$minecpp/pro"
  "to/player/v1/Player.proto\032$minecpp/proto"
  "/entity/v1/Entity.proto\032\"minecpp/proto/c"
  "hunk/v1/Chunk.proto\"\206\003\n\005Event\022%\n\007payload"
  "\030\001 \001(\0132\024.google.protobuf.Any\022R\n\rsingle_p"
  "layer\030\002 \001(\01329.minecpp.proto.event.client"
  "bound.v1.RecipientSinglePlayerH\000\022X\n\020mult"
  "iple_players\030\003 \001(\0132<.minecpp.proto.event"
  ".clientbound.v1.RecipientMultiplePlayers"
  "H\000\022N\n\013all_players\030\004 \001(\01327.minecpp.proto."
  "event.clientbound.v1.RecipientAllPlayers"
  "H\000\022K\n\texcluding\030\005 \001(\01326.minecpp.proto.ev"
  "ent.clientbound.v1.RecipientExcludingH\000B"
  "\013\n\trecipient\"M\n\025RecipientSinglePlayer\0224\n"
  "\tplayer_id\030\001 \001(\0132!.minecpp.proto.player."
  "v1.PlayerId\"Q\n\030RecipientMultiplePlayers\022"
  "5\n\nplayer_ids\030\001 \003(\0132!.minecpp.proto.play"
  "er.v1.PlayerId\"\025\n\023RecipientAllPlayers\"J\n"
  "\022RecipientExcluding\0224\n\tplayer_id\030\001 \001(\0132!"
  ".minecpp.proto.player.v1.PlayerId\"\223\001\n\tAd"
  "dPlayer\0224\n\tplayer_id\030\001 \001(\0132!.minecpp.pro"
  "to.player.v1.PlayerId\022\014\n\004name\030\002 \001(\t\0224\n\tg"
  "ame_mode\030\003 \001(\0162!.minecpp.proto.common.v1"
  ".GameMode\022\014\n\004ping\030\004 \001(\r\"\277\001\n\013SpawnPlayer\022"
  "4\n\tplayer_id\030\001 \001(\0132!.minecpp.proto.playe"
  "r.v1.PlayerId\022\021\n\tentity_id\030\002 \001(\r\0222\n\010posi"
  "tion\030\003 \001(\0132 .minecpp.proto.common.v1.Vec"
  "tor3\0223\n\010rotation\030\004 \001(\0132!.minecpp.proto.c"
  "ommon.v1.Rotation\"\277\001\n\nEntityMove\0224\n\tplay"
  "er_id\030\001 \001(\0132!.minecpp.proto.player.v1.Pl"
  "ayerId\022\021\n\tentity_id\030\002 \001(\r\0223\n\010movement\030\003 "
  "\001(\0132!.minecpp.proto.common.v1.Vector3i\0223"
  "\n\010rotation\030\004 \001(\0132!.minecpp.proto.common."
  "v1.Rotation\"\212\001\n\nEntityLook\0224\n\tplayer_id\030"
  "\001 \001(\0132!.minecpp.proto.player.v1.PlayerId"
  "\022\021\n\tentity_id\030\002 \001(\r\0223\n\010rotation\030\003 \001(\0132!."
  "minecpp.proto.common.v1.Rotation\"\201\001\n\026Pla"
  "yerPositionRotation\0222\n\010position\030\001 \001(\0132 ."
  "minecpp.proto.common.v1.Vector3\0223\n\010rotat"
  "ion\030\002 \001(\0132!.minecpp.proto.common.v1.Rota"
  "tion\"3\n\020SetSpawnPosition\022\020\n\010position\030\001 \001"
  "(\004\022\r\n\005angle\030\002 \001(\002\"%\n\004Chat\022\017\n\007message\030\001 \001"
  "(\t\022\014\n\004type\030\002 \001(\005\"W\n\014RemovePlayer\0224\n\tplay"
  "er_id\030\001 \001(\0132!.minecpp.proto.player.v1.Pl"
  "ayerId\022\021\n\tentity_id\030\002 \001(\r\"4\n\013UpdateBlock"
  "\022\026\n\016block_position\030\001 \001(\004\022\r\n\005state\030\002 \001(\r\""
  "_\n\rAnimateEntity\022\021\n\tentity_id\030\001 \001(\r\022;\n\ta"
  "nimation\030\002 \001(\0162(.minecpp.proto.common.v1"
  ".EntityAnimation\"-\n\026AcknowledgeBlockChan"
  "ge\022\023\n\013sequence_id\030\001 \001(\005\"\204\001\n\013LoadTerrain\022"
  "=\n\rcentral_chunk\030\001 \001(\0132&.minecpp.proto.c"
  "ommon.v1.ChunkPosition\0226\n\006coords\030\002 \003(\0132&"
  ".minecpp.proto.common.v1.ChunkPosition\","
  "\n\016TransferPlayer\022\032\n\022engine_instance_id\030\002"
  " \001(\004\"\312\001\n\025UpdatePlayerAbilities\0224\n\tplayer"
  "_id\030\001 \001(\0132!.minecpp.proto.player.v1.Play"
  "erId\022\024\n\014invulnerable\030\002 \001(\010\022\021\n\tis_flying\030"
  "\003 \001(\010\022\024\n\014allow_flying\030\004 \001(\010\022\025\n\rcreative_"
  "mode\030\005 \001(\010\022\022\n\nwalk_speed\030\007 \001(\002\022\021\n\tfly_sp"
  "eed\030\010 \001(\002\"\203\001\n\013UnloadChunk\0224\n\tplayer_id\030\001"
  " \001(\0132!.minecpp.proto.player.v1.PlayerId\022"
  ">\n\016chunk_position\030\002 \001(\0132&.minecpp.proto."
  "common.v1.ChunkPosition\";\n\nPlayerList\022-\n"
  "\004list\030\001 \003(\0132\037.minecpp.proto.player.v1.St"
  "atus\";\n\nEntityList\022-\n\004list\030\001 \003(\0132\037.minec"
  "pp.proto.entity.v1.Entity\"\253\001\n\014AcceptPlay"
  "er\0223\n\010gameplay\030\001 \001(\0132!.minecpp.proto.com"
  "mon.v1.Gameplay\0225\n\tabilities\030\002 \001(\0132\".min"
  "ecpp.proto.entity.v1.Abilities\022/\n\006player"
  "\030\003 \001(\0132\037.minecpp.proto.player.v1.Player\""
  "#\n\nDenyPlayer\022\025\n\rdenial_reason\030\001 \001(\t\"\?\n\020"
  "SetInventorySlot\022+\n\004slot\030\001 \001(\0132\035.minecpp"
  ".proto.player.v1.Slot\"3\n\021SectionBlockLig"
  "ht\022\t\n\001y\030\001 \001(\005\022\023\n\013block_light\030\002 \001(\014\"\224\001\n\017C"
  "hunkBlockLight\0228\n\010position\030\001 \001(\0132&.minec"
  "pp.proto.common.v1.ChunkPosition\022G\n\010sect"
  "ions\030\002 \003(\01325.minecpp.proto.event.clientb"
  "ound.v1.SectionBlockLight\"\\\n\020UpdateBlock"
  "Light\022H\n\013block_light\030\001 \003(\01323.minecpp.pro"
  "to.event.clientbound.v1.ChunkBlockLight\""
  "9\n\tChunkData\022,\n\005chunk\030\001 \001(\0132\035.minecpp.pr"
  "oto.chunk.v1.Chunk\"J\n\016SetCenterChunk\0228\n\010"
  "position\030\001 \001(\0132&.minecpp.proto.common.v1"
  ".ChunkPosition\"\224\001\n\022SetEntityEquipment\022\021\n"
  "\tentity_id\030\001 \001(\r\022>\n\016equipment_slot\030\002 \001(\016"
  "2&.minecpp.proto.entity.v1.EquipmentSlot"
  "\022+\n\004item\030\003 \001(\0132\035.minecpp.proto.player.v1"
  ".Slot\"B\n\tSetHealth\022\016\n\006health\030\001 \001(\002\022\014\n\004fo"
  "od\030\002 \001(\005\022\027\n\017food_saturation\030\003 \001(\002b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto,
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto,
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fVector_2eproto,
  &::descriptor_table_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fId_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto = {
    false, false, 3761, descriptor_table_protodef_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto,
    "minecpp/proto/event/clientbound/v1/Clientbound.proto",
    &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once, descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_deps, 7, 32,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto(&descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto);
namespace minecpp {
namespace proto {
namespace event {
namespace clientbound {
namespace v1 {

// ===================================================================

class Event::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& payload(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer& single_player(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers& multiple_players(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers& all_players(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientExcluding& excluding(const Event* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Event::_Internal::payload(const Event* msg) {
  return *msg->_impl_.payload_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer&
Event::_Internal::single_player(const Event* msg) {
  return *msg->_impl_.recipient_.single_player_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers&
Event::_Internal::multiple_players(const Event* msg) {
  return *msg->_impl_.recipient_.multiple_players_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers&
Event::_Internal::all_players(const Event* msg) {
  return *msg->_impl_.recipient_.all_players_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientExcluding&
Event::_Internal::excluding(const Event* msg) {
  return *msg->_impl_.recipient_.excluding_;
}
void Event::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
void Event::set_allocated_single_player(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer* single_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (single_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_player);
    if (message_arena != submessage_arena) {
      single_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_player, submessage_arena);
    }
    set_has_single_player();
    _impl_.recipient_.single_player_ = single_player;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.single_player)
}
void Event::set_allocated_multiple_players(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers* multiple_players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (multiple_players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_players);
    if (message_arena != submessage_arena) {
      multiple_players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_players, submessage_arena);
    }
    set_has_multiple_players();
    _impl_.recipient_.multiple_players_ = multiple_players;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.multiple_players)
}
void Event::set_allocated_all_players(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers* all_players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (all_players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_players);
    if (message_arena != submessage_arena) {
      all_players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_players, submessage_arena);
    }
    set_has_all_players();
    _impl_.recipient_.all_players_ = all_players;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.all_players)
}
void Event::set_allocated_excluding(::minecpp::proto::event::clientbound::v1::RecipientExcluding* excluding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (excluding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(excluding);
    if (message_arena != submessage_arena) {
      excluding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excluding, submessage_arena);
    }
    set_has_excluding();
    _impl_.recipient_.excluding_ = excluding;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.excluding)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.payload_);
  }
  clear_has_recipient();
  switch (from.recipient_case()) {
    case kSinglePlayer: {
      _this->_internal_mutable_single_player()->::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer::MergeFrom(
          from._internal_single_player());
      break;
    }
    case kMultiplePlayers: {
      _this->_internal_mutable_multiple_players()->::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers::MergeFrom(
          from._internal_multiple_players());
      break;
    }
    case kAllPlayers: {
      _this->_internal_mutable_all_players()->::minecpp::proto::event::clientbound::v1::RecipientAllPlayers::MergeFrom(
          from._internal_all_players());
      break;
    }
    case kExcluding: {
      _this->_internal_mutable_excluding()->::minecpp::proto::event::clientbound::v1::RecipientExcluding::MergeFrom(
          from._internal_excluding());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){nullptr}
    , decltype(_impl_.recipient_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_recipient();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.payload_;
  if (has_recipient()) {
    clear_recipient();
  }
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::clear_recipient() {
// @@protoc_insertion_point(one_of_clear_start:minecpp.proto.event.clientbound.v1.Event)
  switch (recipient_case()) {
    case kSinglePlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.recipient_.single_player_;
      }
      break;
    }
    case kMultiplePlayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.recipient_.multiple_players_;
      }
      break;
    }
    case kAllPlayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.recipient_.all_players_;
      }
      break;
    }
    case kExcluding: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.recipient_.excluding_;
      }
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RECIPIENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  clear_recipient();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_players(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_players(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_excluding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
  if (_internal_has_single_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::single_player(this),
        _Internal::single_player(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
  if (_internal_has_multiple_players()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::multiple_players(this),
        _Internal::multiple_players(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
  if (_internal_has_all_players()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::all_players(this),
        _Internal::all_players(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
  if (_internal_has_excluding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::excluding(this),
        _Internal::excluding(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  switch (recipient_case()) {
    // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
    case kSinglePlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recipient_.single_player_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
    case kMultiplePlayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recipient_.multiple_players_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
    case kAllPlayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recipient_.all_players_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
    case kExcluding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recipient_.excluding_);
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_payload());
  }
  switch (from.recipient_case()) {
    case kSinglePlayer: {
      _this->_internal_mutable_single_player()->::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer::MergeFrom(
          from._internal_single_player());
      break;
    }
    case kMultiplePlayers: {
      _this->_internal_mutable_multiple_players()->::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers::MergeFrom(
          from._internal_multiple_players());
      break;
    }
    case kAllPlayers: {
      _this->_internal_mutable_all_players()->::minecpp::proto::event::clientbound::v1::RecipientAllPlayers::MergeFrom(
          from._internal_all_players());
      break;
    }
    case kExcluding: {
      _this->_internal_mutable_excluding()->::minecpp::proto::event::clientbound::v1::RecipientExcluding::MergeFrom(
          from._internal_excluding());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_.recipient_, other->_impl_.recipient_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[0]);
}

// ===================================================================

class RecipientSinglePlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RecipientSinglePlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RecipientSinglePlayer::_Internal::player_id(const RecipientSinglePlayer* msg) {
  return *msg->_impl_.player_id_;
}
void RecipientSinglePlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
RecipientSinglePlayer::RecipientSinglePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
}
RecipientSinglePlayer::RecipientSinglePlayer(const RecipientSinglePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecipientSinglePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
}

inline void RecipientSinglePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecipientSinglePlayer::~RecipientSinglePlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientSinglePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
}

void RecipientSinglePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecipientSinglePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientSinglePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientSinglePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  return target;
}

size_t RecipientSinglePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientSinglePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecipientSinglePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientSinglePlayer::GetClassData() const { return &_class_data_; }


void RecipientSinglePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecipientSinglePlayer*>(&to_msg);
  auto& from = static_cast<const RecipientSinglePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientSinglePlayer::CopyFrom(const RecipientSinglePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientSinglePlayer::IsInitialized() const {
  return true;
}

void RecipientSinglePlayer::InternalSwap(RecipientSinglePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientSinglePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[1]);
}

// ===================================================================

class RecipientMultiplePlayers::_Internal {
 public:
};

void RecipientMultiplePlayers::clear_player_ids() {
  _impl_.player_ids_.Clear();
}
RecipientMultiplePlayers::RecipientMultiplePlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
}
RecipientMultiplePlayers::RecipientMultiplePlayers(const RecipientMultiplePlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecipientMultiplePlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){from._impl_.player_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
}

inline void RecipientMultiplePlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecipientMultiplePlayers::~RecipientMultiplePlayers() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientMultiplePlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_ids_.~RepeatedPtrField();
}

void RecipientMultiplePlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecipientMultiplePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientMultiplePlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientMultiplePlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  return target;
}

size_t RecipientMultiplePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
  total_size += 1UL * this->_internal_player_ids_size();
  for (const auto& msg : this->_impl_.player_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientMultiplePlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecipientMultiplePlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientMultiplePlayers::GetClassData() const { return &_class_data_; }


void RecipientMultiplePlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecipientMultiplePlayers*>(&to_msg);
  auto& from = static_cast<const RecipientMultiplePlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_ids_.MergeFrom(from._impl_.player_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientMultiplePlayers::CopyFrom(const RecipientMultiplePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientMultiplePlayers::IsInitialized() const {
  return true;
}

void RecipientMultiplePlayers::InternalSwap(RecipientMultiplePlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_ids_.InternalSwap(&other->_impl_.player_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientMultiplePlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[2]);
}

// ===================================================================

class RecipientAllPlayers::_Internal {
 public:
};

RecipientAllPlayers::RecipientAllPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientAllPlayers)
}
RecipientAllPlayers::RecipientAllPlayers(const RecipientAllPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RecipientAllPlayers* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientAllPlayers)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientAllPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientAllPlayers::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RecipientAllPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[3]);
}

// ===================================================================

class RecipientExcluding::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RecipientExcluding* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RecipientExcluding::_Internal::player_id(const RecipientExcluding* msg) {
  return *msg->_impl_.player_id_;
}
void RecipientExcluding::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
RecipientExcluding::RecipientExcluding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
}
RecipientExcluding::RecipientExcluding(const RecipientExcluding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecipientExcluding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
}

inline void RecipientExcluding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecipientExcluding::~RecipientExcluding() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientExcluding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
}

void RecipientExcluding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecipientExcluding::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientExcluding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientExcluding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  return target;
}

size_t RecipientExcluding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientExcluding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecipientExcluding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientExcluding::GetClassData() const { return &_class_data_; }


void RecipientExcluding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecipientExcluding*>(&to_msg);
  auto& from = static_cast<const RecipientExcluding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientExcluding::CopyFrom(const RecipientExcluding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientExcluding::IsInitialized() const {
  return true;
}

void RecipientExcluding::InternalSwap(RecipientExcluding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientExcluding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[4]);
}

// ===================================================================

class AddPlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const AddPlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
AddPlayer::_Internal::player_id(const AddPlayer* msg) {
  return *msg->_impl_.player_id_;
}
void AddPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
AddPlayer::AddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AddPlayer)
}
AddPlayer::AddPlayer(const AddPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.ping_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  ::memcpy(&_impl_.game_mode_, &from._impl_.game_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_) -
    reinterpret_cast<char*>(&_impl_.game_mode_)) + sizeof(_impl_.ping_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AddPlayer)
}

inline void AddPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.ping_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddPlayer::~AddPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AddPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_id_;
}

void AddPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  ::memset(&_impl_.game_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ping_) -
      reinterpret_cast<char*>(&_impl_.game_mode_)) + sizeof(_impl_.ping_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.AddPlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.GameMode game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_mode(static_cast<::minecpp::proto::common::v1::GameMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.AddPlayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 3;
  if (this->_internal_game_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_game_mode(), target);
  }

  // uint32 ping = 4;
  if (this->_internal_ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AddPlayer)
  return target;
}

size_t AddPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 3;
  if (this->_internal_game_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
  }

  // uint32 ping = 4;
  if (this->_internal_ping() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPlayer::GetClassData() const { return &_class_data_; }


void AddPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPlayer*>(&to_msg);
  auto& from = static_cast<const AddPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_game_mode() != 0) {
    _this->_internal_set_game_mode(from._internal_game_mode());
  }
  if (from._internal_ping() != 0) {
    _this->_internal_set_ping(from._internal_ping());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPlayer::CopyFrom(const AddPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayer::IsInitialized() const {
  return true;
}

void AddPlayer::InternalSwap(AddPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlayer, _impl_.ping_)
      + sizeof(AddPlayer::_impl_.ping_)
      - PROTOBUF_FIELD_OFFSET(AddPlayer, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[5]);
}

// ===================================================================

class SpawnPlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const SpawnPlayer* msg);
  static const ::minecpp::proto::common::v1::Vector3& position(const SpawnPlayer* msg);
  static const ::minecpp::proto::common::v1::Rotation& rotation(const SpawnPlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
SpawnPlayer::_Internal::player_id(const SpawnPlayer* msg) {
  return *msg->_impl_.player_id_;
}
const ::minecpp::proto::common::v1::Vector3&
SpawnPlayer::_Internal::position(const SpawnPlayer* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::common::v1::Rotation&
SpawnPlayer::_Internal::rotation(const SpawnPlayer* msg) {
  return *msg->_impl_.rotation_;
}
void SpawnPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
void SpawnPlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void SpawnPlayer::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
SpawnPlayer::SpawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
}
SpawnPlayer::SpawnPlayer(const SpawnPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::minecpp::proto::common::v1::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::v1::Rotation(*from._impl_.rotation_);
  }
  _this->_impl_.entity_id_ = from._impl_.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
}

inline void SpawnPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnPlayer::~SpawnPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void SpawnPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Vector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Rotation rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.common.v1.Vector3 position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  return target;
}

size_t SpawnPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // .minecpp.proto.common.v1.Vector3 position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnPlayer::GetClassData() const { return &_class_data_; }


void SpawnPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnPlayer*>(&to_msg);
  auto& from = static_cast<const SpawnPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::minecpp::proto::common::v1::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::minecpp::proto::common::v1::Rotation::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnPlayer::CopyFrom(const SpawnPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnPlayer::IsInitialized() const {
  return true;
}

void SpawnPlayer::InternalSwap(SpawnPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnPlayer, _impl_.entity_id_)
      + sizeof(SpawnPlayer::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(SpawnPlayer, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[6]);
}

// ===================================================================

class EntityMove::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const EntityMove* msg);
  static const ::minecpp::proto::common::v1::Vector3i& movement(const EntityMove* msg);
  static const ::minecpp::proto::common::v1::Rotation& rotation(const EntityMove* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
EntityMove::_Internal::player_id(const EntityMove* msg) {
  return *msg->_impl_.player_id_;
}
const ::minecpp::proto::common::v1::Vector3i&
EntityMove::_Internal::movement(const EntityMove* msg) {
  return *msg->_impl_.movement_;
}
const ::minecpp::proto::common::v1::Rotation&
EntityMove::_Internal::rotation(const EntityMove* msg) {
  return *msg->_impl_.rotation_;
}
void EntityMove::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
void EntityMove::clear_movement() {
  if (GetArenaForAllocation() == nullptr && _impl_.movement_ != nullptr) {
    delete _impl_.movement_;
  }
  _impl_.movement_ = nullptr;
}
void EntityMove::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
EntityMove::EntityMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityMove)
}
EntityMove::EntityMove(const EntityMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.movement_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  if (from._internal_has_movement()) {
    _this->_impl_.movement_ = new ::minecpp::proto::common::v1::Vector3i(*from._impl_.movement_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::v1::Rotation(*from._impl_.rotation_);
  }
  _this->_impl_.entity_id_ = from._impl_.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityMove)
}

inline void EntityMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.movement_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityMove::~EntityMove() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.movement_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void EntityMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityMove::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.movement_ != nullptr) {
    delete _impl_.movement_;
  }
  _impl_.movement_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Vector3i movement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Rotation rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.common.v1.Vector3i movement = 3;
  if (this->_internal_has_movement()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::movement(this),
        _Internal::movement(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityMove)
  return target;
}

size_t EntityMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // .minecpp.proto.common.v1.Vector3i movement = 3;
  if (this->_internal_has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.movement_);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityMove::GetClassData() const { return &_class_data_; }


void EntityMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityMove*>(&to_msg);
  auto& from = static_cast<const EntityMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_has_movement()) {
    _this->_internal_mutable_movement()->::minecpp::proto::common::v1::Vector3i::MergeFrom(
        from._internal_movement());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::minecpp::proto::common::v1::Rotation::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityMove::CopyFrom(const EntityMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMove::IsInitialized() const {
  return true;
}

void EntityMove::InternalSwap(EntityMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityMove, _impl_.entity_id_)
      + sizeof(EntityMove::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(EntityMove, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[7]);
}

// ===================================================================

class EntityLook::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const EntityLook* msg);
  static const ::minecpp::proto::common::v1::Rotation& rotation(const EntityLook* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
EntityLook::_Internal::player_id(const EntityLook* msg) {
  return *msg->_impl_.player_id_;
}
const ::minecpp::proto::common::v1::Rotation&
EntityLook::_Internal::rotation(const EntityLook* msg) {
  return *msg->_impl_.rotation_;
}
void EntityLook::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
void EntityLook::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
EntityLook::EntityLook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityLook)
}
EntityLook::EntityLook(const EntityLook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityLook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::v1::Rotation(*from._impl_.rotation_);
  }
  _this->_impl_.entity_id_ = from._impl_.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityLook)
}

inline void EntityLook::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityLook::~EntityLook() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityLook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityLook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void EntityLook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityLook::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityLook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityLook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Rotation rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityLook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityLook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityLook)
  return target;
}

size_t EntityLook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityLook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityLook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityLook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityLook::GetClassData() const { return &_class_data_; }


void EntityLook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityLook*>(&to_msg);
  auto& from = static_cast<const EntityLook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityLook)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::minecpp::proto::common::v1::Rotation::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityLook::CopyFrom(const EntityLook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityLook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityLook::IsInitialized() const {
  return true;
}

void EntityLook::InternalSwap(EntityLook* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityLook, _impl_.entity_id_)
      + sizeof(EntityLook::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(EntityLook, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityLook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[8]);
}

// ===================================================================

class PlayerPositionRotation::_Internal {
 public:
  static const ::minecpp::proto::common::v1::Vector3& position(const PlayerPositionRotation* msg);
  static const ::minecpp::proto::common::v1::Rotation& rotation(const PlayerPositionRotation* msg);
};

const ::minecpp::proto::common::v1::Vector3&
PlayerPositionRotation::_Internal::position(const PlayerPositionRotation* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::common::v1::Rotation&
PlayerPositionRotation::_Internal::rotation(const PlayerPositionRotation* msg) {
  return *msg->_impl_.rotation_;
}
void PlayerPositionRotation::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void PlayerPositionRotation::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
PlayerPositionRotation::PlayerPositionRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
}
PlayerPositionRotation::PlayerPositionRotation(const PlayerPositionRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerPositionRotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::minecpp::proto::common::v1::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::minecpp::proto::common::v1::Rotation(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
}

inline void PlayerPositionRotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerPositionRotation::~PlayerPositionRotation() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerPositionRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void PlayerPositionRotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerPositionRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerPositionRotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Rotation rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerPositionRotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  return target;
}

size_t PlayerPositionRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .minecpp.proto.common.v1.Rotation rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerPositionRotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerPositionRotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerPositionRotation::GetClassData() const { return &_class_data_; }


void PlayerPositionRotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerPositionRotation*>(&to_msg);
  auto& from = static_cast<const PlayerPositionRotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::minecpp::proto::common::v1::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::minecpp::proto::common::v1::Rotation::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerPositionRotation::CopyFrom(const PlayerPositionRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPositionRotation::IsInitialized() const {
  return true;
}

void PlayerPositionRotation::InternalSwap(PlayerPositionRotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerPositionRotation, _impl_.rotation_)
      + sizeof(PlayerPositionRotation::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(PlayerPositionRotation, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerPositionRotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[9]);
}

// ===================================================================

class SetSpawnPosition::_Internal {
 public:
};

SetSpawnPosition::SetSpawnPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
}
SetSpawnPosition::SetSpawnPosition(const SetSpawnPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetSpawnPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){}
    , decltype(_impl_.angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angle_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.angle_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
}

inline void SetSpawnPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){uint64_t{0u}}
    , decltype(_impl_.angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetSpawnPosition::~SetSpawnPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSpawnPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSpawnPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSpawnPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.angle_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSpawnPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetSpawnPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 position = 1;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_position(), target);
  }

  // float angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  return target;
}

size_t SetSpawnPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 position = 1;
  if (this->_internal_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_position());
  }

  // float angle = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSpawnPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetSpawnPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSpawnPosition::GetClassData() const { return &_class_data_; }


void SetSpawnPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetSpawnPosition*>(&to_msg);
  auto& from = static_cast<const SetSpawnPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSpawnPosition::CopyFrom(const SetSpawnPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SetSpawnPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpawnPosition::IsInitialized() const {
  return true;
}

void SetSpawnPosition::InternalSwap(SetSpawnPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSpawnPosition, _impl_.angle_)
      + sizeof(SetSpawnPosition::_impl_.angle_)
      - PROTOBUF_FIELD_OFFSET(SetSpawnPosition, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSpawnPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[10]);
}

// ===================================================================

class Chat::_Internal {
 public:
};

Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.Chat)
}

inline void Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.Chat.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.Chat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat::GetClassData() const { return &_class_data_; }


void Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chat*>(&to_msg);
  auto& from = static_cast<const Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[11]);
}

// ===================================================================

class RemovePlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RemovePlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RemovePlayer::_Internal::player_id(const RemovePlayer* msg) {
  return *msg->_impl_.player_id_;
}
void RemovePlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
RemovePlayer::RemovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
}
RemovePlayer::RemovePlayer(const RemovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemovePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.entity_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  _this->_impl_.entity_id_ = from._impl_.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
}

inline void RemovePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemovePlayer::~RemovePlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
}

void RemovePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  _impl_.entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemovePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RemovePlayer)
  return target;
}

size_t RemovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemovePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemovePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemovePlayer::GetClassData() const { return &_class_data_; }


void RemovePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemovePlayer*>(&to_msg);
  auto& from = static_cast<const RemovePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemovePlayer::CopyFrom(const RemovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayer::IsInitialized() const {
  return true;
}

void RemovePlayer::InternalSwap(RemovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemovePlayer, _impl_.entity_id_)
      + sizeof(RemovePlayer::_impl_.entity_id_)
      - PROTOBUF_FIELD_OFFSET(RemovePlayer, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[12]);
}

// ===================================================================

class UpdateBlock::_Internal {
 public:
};

UpdateBlock::UpdateBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
}
UpdateBlock::UpdateBlock(const UpdateBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_position_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_position_, &from._impl_.block_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.block_position_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
}

inline void UpdateBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_position_){uint64_t{0u}}
    , decltype(_impl_.state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateBlock::~UpdateBlock() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.block_position_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_position = 1;
  if (this->_internal_block_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_position(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UpdateBlock)
  return target;
}

size_t UpdateBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_position = 1;
  if (this->_internal_block_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_position());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBlock::GetClassData() const { return &_class_data_; }


void UpdateBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateBlock*>(&to_msg);
  auto& from = static_cast<const UpdateBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_position() != 0) {
    _this->_internal_set_block_position(from._internal_block_position());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBlock::CopyFrom(const UpdateBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlock::IsInitialized() const {
  return true;
}

void UpdateBlock::InternalSwap(UpdateBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBlock, _impl_.state_)
      + sizeof(UpdateBlock::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(UpdateBlock, _impl_.block_position_)>(
          reinterpret_cast<char*>(&_impl_.block_position_),
          reinterpret_cast<char*>(&other->_impl_.block_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[13]);
}

// ===================================================================

class AnimateEntity::_Internal {
 public:
};

AnimateEntity::AnimateEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AnimateEntity)
}
AnimateEntity::AnimateEntity(const AnimateEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnimateEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.animation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animation_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.animation_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AnimateEntity)
}

inline void AnimateEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){0u}
    , decltype(_impl_.animation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnimateEntity::~AnimateEntity() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AnimateEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnimateEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnimateEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnimateEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AnimateEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.animation_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.animation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimateEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.EntityAnimation animation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_animation(static_cast<::minecpp::proto::common::v1::EntityAnimation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimateEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AnimateEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.common.v1.EntityAnimation animation = 2;
  if (this->_internal_animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AnimateEntity)
  return target;
}

size_t AnimateEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AnimateEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // .minecpp.proto.common.v1.EntityAnimation animation = 2;
  if (this->_internal_animation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_animation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimateEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnimateEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimateEntity::GetClassData() const { return &_class_data_; }


void AnimateEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnimateEntity*>(&to_msg);
  auto& from = static_cast<const AnimateEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AnimateEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_animation() != 0) {
    _this->_internal_set_animation(from._internal_animation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimateEntity::CopyFrom(const AnimateEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AnimateEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimateEntity::IsInitialized() const {
  return true;
}

void AnimateEntity::InternalSwap(AnimateEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimateEntity, _impl_.animation_)
      + sizeof(AnimateEntity::_impl_.animation_)
      - PROTOBUF_FIELD_OFFSET(AnimateEntity, _impl_.entity_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimateEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[14]);
}

// ===================================================================

class AcknowledgeBlockChange::_Internal {
 public:
};

AcknowledgeBlockChange::AcknowledgeBlockChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
}
AcknowledgeBlockChange::AcknowledgeBlockChange(const AcknowledgeBlockChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcknowledgeBlockChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
}

inline void AcknowledgeBlockChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sequence_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcknowledgeBlockChange::~AcknowledgeBlockChange() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcknowledgeBlockChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AcknowledgeBlockChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcknowledgeBlockChange::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sequence_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcknowledgeBlockChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcknowledgeBlockChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  return target;
}

size_t AcknowledgeBlockChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sequence_id = 1;
  if (this->_internal_sequence_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcknowledgeBlockChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcknowledgeBlockChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcknowledgeBlockChange::GetClassData() const { return &_class_data_; }


void AcknowledgeBlockChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcknowledgeBlockChange*>(&to_msg);
  auto& from = static_cast<const AcknowledgeBlockChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sequence_id() != 0) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcknowledgeBlockChange::CopyFrom(const AcknowledgeBlockChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AcknowledgeBlockChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeBlockChange::IsInitialized() const {
  return true;
}

void AcknowledgeBlockChange::InternalSwap(AcknowledgeBlockChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sequence_id_, other->_impl_.sequence_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcknowledgeBlockChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[15]);
}

// ===================================================================

class LoadTerrain::_Internal {
 public:
  static const ::minecpp::proto::common::v1::ChunkPosition& central_chunk(const LoadTerrain* msg);
};

const ::minecpp::proto::common::v1::ChunkPosition&
LoadTerrain::_Internal::central_chunk(const LoadTerrain* msg) {
  return *msg->_impl_.central_chunk_;
}
void LoadTerrain::clear_central_chunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.central_chunk_ != nullptr) {
    delete _impl_.central_chunk_;
  }
  _impl_.central_chunk_ = nullptr;
}
void LoadTerrain::clear_coords() {
  _impl_.coords_.Clear();
}
LoadTerrain::LoadTerrain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
}
LoadTerrain::LoadTerrain(const LoadTerrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadTerrain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){from._impl_.coords_}
    , decltype(_impl_.central_chunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_central_chunk()) {
    _this->_impl_.central_chunk_ = new ::minecpp::proto::common::v1::ChunkPosition(*from._impl_.central_chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
}

inline void LoadTerrain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){arena}
    , decltype(_impl_.central_chunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadTerrain::~LoadTerrain() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadTerrain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coords_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.central_chunk_;
}

void LoadTerrain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadTerrain::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coords_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.central_chunk_ != nullptr) {
    delete _impl_.central_chunk_;
  }
  _impl_.central_chunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadTerrain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_central_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadTerrain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
  if (this->_internal_has_central_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::central_chunk(this),
        _Internal::central_chunk(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.LoadTerrain)
  return target;
}

size_t LoadTerrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
  total_size += 1UL * this->_internal_coords_size();
  for (const auto& msg : this->_impl_.coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
  if (this->_internal_has_central_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.central_chunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadTerrain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadTerrain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadTerrain::GetClassData() const { return &_class_data_; }


void LoadTerrain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadTerrain*>(&to_msg);
  auto& from = static_cast<const LoadTerrain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coords_.MergeFrom(from._impl_.coords_);
  if (from._internal_has_central_chunk()) {
    _this->_internal_mutable_central_chunk()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(
        from._internal_central_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadTerrain::CopyFrom(const LoadTerrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadTerrain::IsInitialized() const {
  return true;
}

void LoadTerrain::InternalSwap(LoadTerrain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coords_.InternalSwap(&other->_impl_.coords_);
  swap(_impl_.central_chunk_, other->_impl_.central_chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadTerrain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[16]);
}

// ===================================================================

class TransferPlayer::_Internal {
 public:
};

TransferPlayer::TransferPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
}
TransferPlayer::TransferPlayer(const TransferPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.engine_instance_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.engine_instance_id_ = from._impl_.engine_instance_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
}

inline void TransferPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.engine_instance_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferPlayer::~TransferPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransferPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.engine_instance_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 engine_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.engine_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 engine_instance_id = 2;
  if (this->_internal_engine_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_engine_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.TransferPlayer)
  return target;
}

size_t TransferPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 engine_instance_id = 2;
  if (this->_internal_engine_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_engine_instance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferPlayer::GetClassData() const { return &_class_data_; }


void TransferPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferPlayer*>(&to_msg);
  auto& from = static_cast<const TransferPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_engine_instance_id() != 0) {
    _this->_internal_set_engine_instance_id(from._internal_engine_instance_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferPlayer::CopyFrom(const TransferPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferPlayer::IsInitialized() const {
  return true;
}

void TransferPlayer::InternalSwap(TransferPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.engine_instance_id_, other->_impl_.engine_instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[17]);
}

// ===================================================================

class UpdatePlayerAbilities::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const UpdatePlayerAbilities* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
UpdatePlayerAbilities::_Internal::player_id(const UpdatePlayerAbilities* msg) {
  return *msg->_impl_.player_id_;
}
void UpdatePlayerAbilities::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
UpdatePlayerAbilities::UpdatePlayerAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
}
UpdatePlayerAbilities::UpdatePlayerAbilities(const UpdatePlayerAbilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePlayerAbilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.invulnerable_){}
    , decltype(_impl_.is_flying_){}
    , decltype(_impl_.allow_flying_){}
    , decltype(_impl_.creative_mode_){}
    , decltype(_impl_.walk_speed_){}
    , decltype(_impl_.fly_speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  ::memcpy(&_impl_.invulnerable_, &from._impl_.invulnerable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fly_speed_) -
    reinterpret_cast<char*>(&_impl_.invulnerable_)) + sizeof(_impl_.fly_speed_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
}

inline void UpdatePlayerAbilities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.invulnerable_){false}
    , decltype(_impl_.is_flying_){false}
    , decltype(_impl_.allow_flying_){false}
    , decltype(_impl_.creative_mode_){false}
    , decltype(_impl_.walk_speed_){0}
    , decltype(_impl_.fly_speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdatePlayerAbilities::~UpdatePlayerAbilities() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePlayerAbilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
}

void UpdatePlayerAbilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePlayerAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  ::memset(&_impl_.invulnerable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fly_speed_) -
      reinterpret_cast<char*>(&_impl_.invulnerable_)) + sizeof(_impl_.fly_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerAbilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool invulnerable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.invulnerable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_flying = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_flying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_flying = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allow_flying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool creative_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.creative_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float walk_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.walk_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fly_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.fly_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePlayerAbilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // bool invulnerable = 2;
  if (this->_internal_invulnerable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_invulnerable(), target);
  }

  // bool is_flying = 3;
  if (this->_internal_is_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_flying(), target);
  }

  // bool allow_flying = 4;
  if (this->_internal_allow_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_flying(), target);
  }

  // bool creative_mode = 5;
  if (this->_internal_creative_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_creative_mode(), target);
  }

  // float walk_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_walk_speed(), target);
  }

  // float fly_speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_fly_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  return target;
}

size_t UpdatePlayerAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // bool invulnerable = 2;
  if (this->_internal_invulnerable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_flying = 3;
  if (this->_internal_is_flying() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_flying = 4;
  if (this->_internal_allow_flying() != 0) {
    total_size += 1 + 1;
  }

  // bool creative_mode = 5;
  if (this->_internal_creative_mode() != 0) {
    total_size += 1 + 1;
  }

  // float walk_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    total_size += 1 + 4;
  }

  // float fly_speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePlayerAbilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePlayerAbilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePlayerAbilities::GetClassData() const { return &_class_data_; }


void UpdatePlayerAbilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePlayerAbilities*>(&to_msg);
  auto& from = static_cast<const UpdatePlayerAbilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_invulnerable() != 0) {
    _this->_internal_set_invulnerable(from._internal_invulnerable());
  }
  if (from._internal_is_flying() != 0) {
    _this->_internal_set_is_flying(from._internal_is_flying());
  }
  if (from._internal_allow_flying() != 0) {
    _this->_internal_set_allow_flying(from._internal_allow_flying());
  }
  if (from._internal_creative_mode() != 0) {
    _this->_internal_set_creative_mode(from._internal_creative_mode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = from._internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    _this->_internal_set_walk_speed(from._internal_walk_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = from._internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    _this->_internal_set_fly_speed(from._internal_fly_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePlayerAbilities::CopyFrom(const UpdatePlayerAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerAbilities::IsInitialized() const {
  return true;
}

void UpdatePlayerAbilities::InternalSwap(UpdatePlayerAbilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerAbilities, _impl_.fly_speed_)
      + sizeof(UpdatePlayerAbilities::_impl_.fly_speed_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerAbilities, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerAbilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[18]);
}

// ===================================================================

class UnloadChunk::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const UnloadChunk* msg);
  static const ::minecpp::proto::common::v1::ChunkPosition& chunk_position(const UnloadChunk* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
UnloadChunk::_Internal::player_id(const UnloadChunk* msg) {
  return *msg->_impl_.player_id_;
}
const ::minecpp::proto::common::v1::ChunkPosition&
UnloadChunk::_Internal::chunk_position(const UnloadChunk* msg) {
  return *msg->_impl_.chunk_position_;
}
void UnloadChunk::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
}
void UnloadChunk::clear_chunk_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunk_position_ != nullptr) {
    delete _impl_.chunk_position_;
  }
  _impl_.chunk_position_ = nullptr;
}
UnloadChunk::UnloadChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
}
UnloadChunk::UnloadChunk(const UnloadChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnloadChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.chunk_position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    _this->_impl_.player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from._impl_.player_id_);
  }
  if (from._internal_has_chunk_position()) {
    _this->_impl_.chunk_position_ = new ::minecpp::proto::common::v1::ChunkPosition(*from._impl_.chunk_position_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
}

inline void UnloadChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){nullptr}
    , decltype(_impl_.chunk_position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnloadChunk::~UnloadChunk() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnloadChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_id_;
  if (this != internal_default_instance()) delete _impl_.chunk_position_;
}

void UnloadChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnloadChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_id_ != nullptr) {
    delete _impl_.player_id_;
  }
  _impl_.player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chunk_position_ != nullptr) {
    delete _impl_.chunk_position_;
  }
  _impl_.chunk_position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloadChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnloadChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
  if (this->_internal_has_chunk_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk_position(this),
        _Internal::chunk_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UnloadChunk)
  return target;
}

size_t UnloadChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_id_);
  }

  // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
  if (this->_internal_has_chunk_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnloadChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnloadChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnloadChunk::GetClassData() const { return &_class_data_; }


void UnloadChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnloadChunk*>(&to_msg);
  auto& from = static_cast<const UnloadChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _this->_internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(
        from._internal_player_id());
  }
  if (from._internal_has_chunk_position()) {
    _this->_internal_mutable_chunk_position()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(
        from._internal_chunk_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnloadChunk::CopyFrom(const UnloadChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadChunk::IsInitialized() const {
  return true;
}

void UnloadChunk::InternalSwap(UnloadChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnloadChunk, _impl_.chunk_position_)
      + sizeof(UnloadChunk::_impl_.chunk_position_)
      - PROTOBUF_FIELD_OFFSET(UnloadChunk, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloadChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[19]);
}

// ===================================================================

class PlayerList::_Internal {
 public:
};

void PlayerList::clear_list() {
  _impl_.list_.Clear();
}
PlayerList::PlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.PlayerList)
}
PlayerList::PlayerList(const PlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.PlayerList)
}

inline void PlayerList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerList::~PlayerList() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.PlayerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void PlayerList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.PlayerList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.player.v1.Status list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.PlayerList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.Status list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.PlayerList)
  return target;
}

size_t PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.PlayerList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.Status list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerList::GetClassData() const { return &_class_data_; }


void PlayerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerList*>(&to_msg);
  auto& from = static_cast<const PlayerList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.PlayerList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerList::CopyFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerList::IsInitialized() const {
  return true;
}

void PlayerList::InternalSwap(PlayerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[20]);
}

// ===================================================================

class EntityList::_Internal {
 public:
};

void EntityList::clear_list() {
  _impl_.list_.Clear();
}
EntityList::EntityList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityList)
}
EntityList::EntityList(const EntityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityList)
}

inline void EntityList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityList::~EntityList() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void EntityList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityList::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.entity.v1.Entity list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.v1.Entity list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityList)
  return target;
}

size_t EntityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.v1.Entity list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityList::GetClassData() const { return &_class_data_; }


void EntityList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityList*>(&to_msg);
  auto& from = static_cast<const EntityList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityList::CopyFrom(const EntityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityList::IsInitialized() const {
  return true;
}

void EntityList::InternalSwap(EntityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[21]);
}

// ===================================================================

class AcceptPlayer::_Internal {
 public:
  static const ::minecpp::proto::common::v1::Gameplay& gameplay(const AcceptPlayer* msg);
  static const ::minecpp::proto::entity::v1::Abilities& abilities(const AcceptPlayer* msg);
  static const ::minecpp::proto::player::v1::Player& player(const AcceptPlayer* msg);
};

const ::minecpp::proto::common::v1::Gameplay&
AcceptPlayer::_Internal::gameplay(const AcceptPlayer* msg) {
  return *msg->_impl_.gameplay_;
}
const ::minecpp::proto::entity::v1::Abilities&
AcceptPlayer::_Internal::abilities(const AcceptPlayer* msg) {
  return *msg->_impl_.abilities_;
}
const ::minecpp::proto::player::v1::Player&
AcceptPlayer::_Internal::player(const AcceptPlayer* msg) {
  return *msg->_impl_.player_;
}
void AcceptPlayer::clear_gameplay() {
  if (GetArenaForAllocation() == nullptr && _impl_.gameplay_ != nullptr) {
    delete _impl_.gameplay_;
  }
  _impl_.gameplay_ = nullptr;
}
void AcceptPlayer::clear_abilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.abilities_ != nullptr) {
    delete _impl_.abilities_;
  }
  _impl_.abilities_ = nullptr;
}
void AcceptPlayer::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
AcceptPlayer::AcceptPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
}
AcceptPlayer::AcceptPlayer(const AcceptPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameplay_){nullptr}
    , decltype(_impl_.abilities_){nullptr}
    , decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameplay()) {
    _this->_impl_.gameplay_ = new ::minecpp::proto::common::v1::Gameplay(*from._impl_.gameplay_);
  }
  if (from._internal_has_abilities()) {
    _this->_impl_.abilities_ = new ::minecpp::proto::entity::v1::Abilities(*from._impl_.abilities_);
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::minecpp::proto::player::v1::Player(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
}

inline void AcceptPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameplay_){nullptr}
    , decltype(_impl_.abilities_){nullptr}
    , decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AcceptPlayer::~AcceptPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gameplay_;
  if (this != internal_default_instance()) delete _impl_.abilities_;
  if (this != internal_default_instance()) delete _impl_.player_;
}

void AcceptPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gameplay_ != nullptr) {
    delete _impl_.gameplay_;
  }
  _impl_.gameplay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.abilities_ != nullptr) {
    delete _impl_.abilities_;
  }
  _impl_.abilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.Gameplay gameplay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Abilities abilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_abilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Gameplay gameplay = 1;
  if (this->_internal_has_gameplay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gameplay(this),
        _Internal::gameplay(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.entity.v1.Abilities abilities = 2;
  if (this->_internal_has_abilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::abilities(this),
        _Internal::abilities(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.player.v1.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  return target;
}

size_t AcceptPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Gameplay gameplay = 1;
  if (this->_internal_has_gameplay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameplay_);
  }

  // .minecpp.proto.entity.v1.Abilities abilities = 2;
  if (this->_internal_has_abilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.abilities_);
  }

  // .minecpp.proto.player.v1.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptPlayer::GetClassData() const { return &_class_data_; }


void AcceptPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptPlayer*>(&to_msg);
  auto& from = static_cast<const AcceptPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameplay()) {
    _this->_internal_mutable_gameplay()->::minecpp::proto::common::v1::Gameplay::MergeFrom(
        from._internal_gameplay());
  }
  if (from._internal_has_abilities()) {
    _this->_internal_mutable_abilities()->::minecpp::proto::entity::v1::Abilities::MergeFrom(
        from._internal_abilities());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::minecpp::proto::player::v1::Player::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptPlayer::CopyFrom(const AcceptPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayer::IsInitialized() const {
  return true;
}

void AcceptPlayer::InternalSwap(AcceptPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptPlayer, _impl_.player_)
      + sizeof(AcceptPlayer::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(AcceptPlayer, _impl_.gameplay_)>(
          reinterpret_cast<char*>(&_impl_.gameplay_),
          reinterpret_cast<char*>(&other->_impl_.gameplay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[22]);
}

// ===================================================================

class DenyPlayer::_Internal {
 public:
};

DenyPlayer::DenyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
}
DenyPlayer::DenyPlayer(const DenyPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenyPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denial_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denial_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denial_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denial_reason().empty()) {
    _this->_impl_.denial_reason_.Set(from._internal_denial_reason(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
}

inline void DenyPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.denial_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denial_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.denial_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenyPlayer::~DenyPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenyPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denial_reason_.Destroy();
}

void DenyPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denial_reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenyPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denial_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denial_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.DenyPlayer.denial_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DenyPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denial_reason = 1;
  if (!this->_internal_denial_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denial_reason().data(), static_cast<int>(this->_internal_denial_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.DenyPlayer.denial_reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_denial_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.DenyPlayer)
  return target;
}

size_t DenyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denial_reason = 1;
  if (!this->_internal_denial_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denial_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenyPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenyPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenyPlayer::GetClassData() const { return &_class_data_; }


void DenyPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenyPlayer*>(&to_msg);
  auto& from = static_cast<const DenyPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denial_reason().empty()) {
    _this->_internal_set_denial_reason(from._internal_denial_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenyPlayer::CopyFrom(const DenyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenyPlayer::IsInitialized() const {
  return true;
}

void DenyPlayer::InternalSwap(DenyPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.denial_reason_, lhs_arena,
      &other->_impl_.denial_reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DenyPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[23]);
}

// ===================================================================

class SetInventorySlot::_Internal {
 public:
  static const ::minecpp::proto::player::v1::Slot& slot(const SetInventorySlot* msg);
};

const ::minecpp::proto::player::v1::Slot&
SetInventorySlot::_Internal::slot(const SetInventorySlot* msg) {
  return *msg->_impl_.slot_;
}
void SetInventorySlot::clear_slot() {
  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
}
SetInventorySlot::SetInventorySlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SetInventorySlot)
}
SetInventorySlot::SetInventorySlot(const SetInventorySlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetInventorySlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slot()) {
    _this->_impl_.slot_ = new ::minecpp::proto::player::v1::Slot(*from._impl_.slot_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SetInventorySlot)
}

inline void SetInventorySlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetInventorySlot::~SetInventorySlot() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetInventorySlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slot_;
}

void SetInventorySlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetInventorySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.slot_ != nullptr) {
    delete _impl_.slot_;
  }
  _impl_.slot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetInventorySlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.Slot slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetInventorySlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.Slot slot = 1;
  if (this->_internal_has_slot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slot(this),
        _Internal::slot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  return target;
}

size_t SetInventorySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.Slot slot = 1;
  if (this->_internal_has_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slot_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetInventorySlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetInventorySlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetInventorySlot::GetClassData() const { return &_class_data_; }


void SetInventorySlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetInventorySlot*>(&to_msg);
  auto& from = static_cast<const SetInventorySlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _this->_internal_mutable_slot()->::minecpp::proto::player::v1::Slot::MergeFrom(
        from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetInventorySlot::CopyFrom(const SetInventorySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SetInventorySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetInventorySlot::IsInitialized() const {
  return true;
}

void SetInventorySlot::InternalSwap(SetInventorySlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.slot_, other->_impl_.slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetInventorySlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[24]);
}

// ===================================================================

class SectionBlockLight::_Internal {
 public:
};

SectionBlockLight::SectionBlockLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SectionBlockLight)
}
SectionBlockLight::SectionBlockLight(const SectionBlockLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionBlockLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_light_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_light().empty()) {
    _this->_impl_.block_light_.Set(from._internal_block_light(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.y_ = from._impl_.y_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SectionBlockLight)
}

inline void SectionBlockLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_light_){}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SectionBlockLight::~SectionBlockLight() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionBlockLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_light_.Destroy();
}

void SectionBlockLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionBlockLight::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_light_.ClearToEmpty();
  _impl_.y_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionBlockLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block_light();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionBlockLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_y(), target);
  }

  // bytes block_light = 2;
  if (!this->_internal_block_light().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  return target;
}

size_t SectionBlockLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_light = 2;
  if (!this->_internal_block_light().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_light());
  }

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionBlockLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionBlockLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionBlockLight::GetClassData() const { return &_class_data_; }


void SectionBlockLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionBlockLight*>(&to_msg);
  auto& from = static_cast<const SectionBlockLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_light().empty()) {
    _this->_internal_set_block_light(from._internal_block_light());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionBlockLight::CopyFrom(const SectionBlockLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SectionBlockLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionBlockLight::IsInitialized() const {
  return true;
}

void SectionBlockLight::InternalSwap(SectionBlockLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_light_, lhs_arena,
      &other->_impl_.block_light_, rhs_arena
  );
  swap(_impl_.y_, other->_impl_.y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionBlockLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[25]);
}

// ===================================================================

class ChunkBlockLight::_Internal {
 public:
  static const ::minecpp::proto::common::v1::ChunkPosition& position(const ChunkBlockLight* msg);
};

const ::minecpp::proto::common::v1::ChunkPosition&
ChunkBlockLight::_Internal::position(const ChunkBlockLight* msg) {
  return *msg->_impl_.position_;
}
void ChunkBlockLight::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
ChunkBlockLight::ChunkBlockLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
}
ChunkBlockLight::ChunkBlockLight(const ChunkBlockLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunkBlockLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::minecpp::proto::common::v1::ChunkPosition(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
}

inline void ChunkBlockLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sections_){arena}
    , decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChunkBlockLight::~ChunkBlockLight() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkBlockLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
}

void ChunkBlockLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkBlockLight::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sections_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkBlockLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.ChunkPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.event.clientbound.v1.SectionBlockLight sections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunkBlockLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkPosition position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.event.clientbound.v1.SectionBlockLight sections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  return target;
}

size_t ChunkBlockLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.event.clientbound.v1.SectionBlockLight sections = 2;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minecpp.proto.common.v1.ChunkPosition position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkBlockLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkBlockLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkBlockLight::GetClassData() const { return &_class_data_; }


void ChunkBlockLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunkBlockLight*>(&to_msg);
  auto& from = static_cast<const ChunkBlockLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkBlockLight::CopyFrom(const ChunkBlockLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.ChunkBlockLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkBlockLight::IsInitialized() const {
  return true;
}

void ChunkBlockLight::InternalSwap(ChunkBlockLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkBlockLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[26]);
}

// ===================================================================

class UpdateBlockLight::_Internal {
 public:
};

UpdateBlockLight::UpdateBlockLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
}
UpdateBlockLight::UpdateBlockLight(const UpdateBlockLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateBlockLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_light_){from._impl_.block_light_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
}

inline void UpdateBlockLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_light_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateBlockLight::~UpdateBlockLight() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateBlockLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_light_.~RepeatedPtrField();
}

void UpdateBlockLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateBlockLight::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_light_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBlockLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.event.clientbound.v1.ChunkBlockLight block_light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBlockLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.event.clientbound.v1.ChunkBlockLight block_light = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_light_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_light(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  return target;
}

size_t UpdateBlockLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.event.clientbound.v1.ChunkBlockLight block_light = 1;
  total_size += 1UL * this->_internal_block_light_size();
  for (const auto& msg : this->_impl_.block_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBlockLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateBlockLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBlockLight::GetClassData() const { return &_class_data_; }


void UpdateBlockLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateBlockLight*>(&to_msg);
  auto& from = static_cast<const UpdateBlockLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.block_light_.MergeFrom(from._impl_.block_light_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBlockLight::CopyFrom(const UpdateBlockLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UpdateBlockLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlockLight::IsInitialized() const {
  return true;
}

void UpdateBlockLight::InternalSwap(UpdateBlockLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.block_light_.InternalSwap(&other->_impl_.block_light_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBlockLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[27]);
}

// ===================================================================

class ChunkData::_Internal {
 public:
  static const ::minecpp::proto::chunk::v1::Chunk& chunk(const ChunkData* msg);
};

const ::minecpp::proto::chunk::v1::Chunk&
ChunkData::_Internal::chunk(const ChunkData* msg) {
  return *msg->_impl_.chunk_;
}
void ChunkData::clear_chunk() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunk_ != nullptr) {
    delete _impl_.chunk_;
  }
  _impl_.chunk_ = nullptr;
}
ChunkData::ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.ChunkData)
}
ChunkData::ChunkData(const ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunkData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chunk()) {
    _this->_impl_.chunk_ = new ::minecpp::proto::chunk::v1::Chunk(*from._impl_.chunk_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.ChunkData)
}

inline void ChunkData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChunkData::~ChunkData() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.ChunkData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chunk_;
}

void ChunkData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.ChunkData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chunk_ != nullptr) {
    delete _impl_.chunk_;
  }
  _impl_.chunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.chunk.v1.Chunk chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunkData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.ChunkData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.chunk.v1.Chunk chunk = 1;
  if (this->_internal_has_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chunk(this),
        _Internal::chunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.ChunkData)
  return target;
}

size_t ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.ChunkData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.chunk.v1.Chunk chunk = 1;
  if (this->_internal_has_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkData::GetClassData() const { return &_class_data_; }


void ChunkData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunkData*>(&to_msg);
  auto& from = static_cast<const ChunkData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.ChunkData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chunk()) {
    _this->_internal_mutable_chunk()->::minecpp::proto::chunk::v1::Chunk::MergeFrom(
        from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkData::CopyFrom(const ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData::IsInitialized() const {
  return true;
}

void ChunkData::InternalSwap(ChunkData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.chunk_, other->_impl_.chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[28]);
}

// ===================================================================

class SetCenterChunk::_Internal {
 public:
  static const ::minecpp::proto::common::v1::ChunkPosition& position(const SetCenterChunk* msg);
};

const ::minecpp::proto::common::v1::ChunkPosition&
SetCenterChunk::_Internal::position(const SetCenterChunk* msg) {
  return *msg->_impl_.position_;
}
void SetCenterChunk::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
SetCenterChunk::SetCenterChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SetCenterChunk)
}
SetCenterChunk::SetCenterChunk(const SetCenterChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetCenterChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::minecpp::proto::common::v1::ChunkPosition(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SetCenterChunk)
}

inline void SetCenterChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetCenterChunk::~SetCenterChunk() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCenterChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void SetCenterChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCenterChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCenterChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.ChunkPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCenterChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkPosition position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  return target;
}

size_t SetCenterChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkPosition position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCenterChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetCenterChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCenterChunk::GetClassData() const { return &_class_data_; }


void SetCenterChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetCenterChunk*>(&to_msg);
  auto& from = static_cast<const SetCenterChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCenterChunk::CopyFrom(const SetCenterChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SetCenterChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCenterChunk::IsInitialized() const {
  return true;
}

void SetCenterChunk::InternalSwap(SetCenterChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCenterChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[29]);
}

// ===================================================================

class SetEntityEquipment::_Internal {
 public:
  static const ::minecpp::proto::player::v1::Slot& item(const SetEntityEquipment* msg);
};

const ::minecpp::proto::player::v1::Slot&
SetEntityEquipment::_Internal::item(const SetEntityEquipment* msg) {
  return *msg->_impl_.item_;
}
void SetEntityEquipment::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
SetEntityEquipment::SetEntityEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
}
SetEntityEquipment::SetEntityEquipment(const SetEntityEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetEntityEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.equipment_slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::minecpp::proto::player::v1::Slot(*from._impl_.item_);
  }
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equipment_slot_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.equipment_slot_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
}

inline void SetEntityEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , decltype(_impl_.equipment_slot_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetEntityEquipment::~SetEntityEquipment() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEntityEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void SetEntityEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEntityEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equipment_slot_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.equipment_slot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetEntityEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.EquipmentSlot equipment_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_equipment_slot(static_cast<::minecpp::proto::entity::v1::EquipmentSlot>(val));
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.Slot item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetEntityEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.entity.v1.EquipmentSlot equipment_slot = 2;
  if (this->_internal_equipment_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_equipment_slot(), target);
  }

  // .minecpp.proto.player.v1.Slot item = 3;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  return target;
}

size_t SetEntityEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.Slot item = 3;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // .minecpp.proto.entity.v1.EquipmentSlot equipment_slot = 2;
  if (this->_internal_equipment_slot() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_equipment_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetEntityEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetEntityEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetEntityEquipment::GetClassData() const { return &_class_data_; }


void SetEntityEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetEntityEquipment*>(&to_msg);
  auto& from = static_cast<const SetEntityEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::minecpp::proto::player::v1::Slot::MergeFrom(
        from._internal_item());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_equipment_slot() != 0) {
    _this->_internal_set_equipment_slot(from._internal_equipment_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetEntityEquipment::CopyFrom(const SetEntityEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SetEntityEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEntityEquipment::IsInitialized() const {
  return true;
}

void SetEntityEquipment::InternalSwap(SetEntityEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetEntityEquipment, _impl_.equipment_slot_)
      + sizeof(SetEntityEquipment::_impl_.equipment_slot_)
      - PROTOBUF_FIELD_OFFSET(SetEntityEquipment, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEntityEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[30]);
}

// ===================================================================

class SetHealth::_Internal {
 public:
};

SetHealth::SetHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SetHealth)
}
SetHealth::SetHealth(const SetHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetHealth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.health_){}
    , decltype(_impl_.food_){}
    , decltype(_impl_.food_saturation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.health_, &from._impl_.health_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.food_saturation_) -
    reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.food_saturation_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SetHealth)
}

inline void SetHealth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.health_){0}
    , decltype(_impl_.food_){0}
    , decltype(_impl_.food_saturation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetHealth::~SetHealth() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SetHealth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetHealth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SetHealth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.health_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.food_saturation_) -
      reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.food_saturation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetHealth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 food = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.food_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float food_saturation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.food_saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetHealth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SetHealth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float health = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = this->_internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_health(), target);
  }

  // int32 food = 2;
  if (this->_internal_food() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_food(), target);
  }

  // float food_saturation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_food_saturation = this->_internal_food_saturation();
  uint32_t raw_food_saturation;
  memcpy(&raw_food_saturation, &tmp_food_saturation, sizeof(tmp_food_saturation));
  if (raw_food_saturation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_food_saturation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SetHealth)
  return target;
}

size_t SetHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SetHealth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float health = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = this->_internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    total_size += 1 + 4;
  }

  // int32 food = 2;
  if (this->_internal_food() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_food());
  }

  // float food_saturation = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_food_saturation = this->_internal_food_saturation();
  uint32_t raw_food_saturation;
  memcpy(&raw_food_saturation, &tmp_food_saturation, sizeof(tmp_food_saturation));
  if (raw_food_saturation != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetHealth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetHealth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetHealth::GetClassData() const { return &_class_data_; }


void SetHealth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetHealth*>(&to_msg);
  auto& from = static_cast<const SetHealth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SetHealth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_health = from._internal_health();
  uint32_t raw_health;
  memcpy(&raw_health, &tmp_health, sizeof(tmp_health));
  if (raw_health != 0) {
    _this->_internal_set_health(from._internal_health());
  }
  if (from._internal_food() != 0) {
    _this->_internal_set_food(from._internal_food());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_food_saturation = from._internal_food_saturation();
  uint32_t raw_food_saturation;
  memcpy(&raw_food_saturation, &tmp_food_saturation, sizeof(tmp_food_saturation));
  if (raw_food_saturation != 0) {
    _this->_internal_set_food_saturation(from._internal_food_saturation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetHealth::CopyFrom(const SetHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SetHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHealth::IsInitialized() const {
  return true;
}

void SetHealth::InternalSwap(SetHealth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetHealth, _impl_.food_saturation_)
      + sizeof(SetHealth::_impl_.food_saturation_)
      - PROTOBUF_FIELD_OFFSET(SetHealth, _impl_.health_)>(
          reinterpret_cast<char*>(&_impl_.health_),
          reinterpret_cast<char*>(&other->_impl_.health_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetHealth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fClientbound_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace clientbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::Event*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientExcluding*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientExcluding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientExcluding >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AddPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AddPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AddPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SpawnPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SpawnPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SpawnPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityMove*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityMove >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityLook*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityLook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityLook >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SetSpawnPosition*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SetSpawnPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SetSpawnPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::Chat*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RemovePlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RemovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RemovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UpdateBlock*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UpdateBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UpdateBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AnimateEntity*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AnimateEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AnimateEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AcknowledgeBlockChange >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::LoadTerrain*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::LoadTerrain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::LoadTerrain >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::TransferPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::TransferPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::TransferPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UnloadChunk*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UnloadChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UnloadChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::PlayerList*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::PlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::PlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityList*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityList >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AcceptPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AcceptPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AcceptPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::DenyPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::DenyPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::DenyPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SetInventorySlot*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SetInventorySlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SetInventorySlot >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SectionBlockLight*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SectionBlockLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SectionBlockLight >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::ChunkBlockLight*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::ChunkBlockLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::ChunkBlockLight >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UpdateBlockLight*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UpdateBlockLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UpdateBlockLight >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::ChunkData*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SetCenterChunk*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SetCenterChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SetCenterChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SetEntityEquipment*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SetEntityEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SetEntityEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SetHealth*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SetHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SetHealth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
