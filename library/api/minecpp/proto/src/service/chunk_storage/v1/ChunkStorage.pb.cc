// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/service/chunk_storage/v1/ChunkStorage.proto

#include <minecpp/proto/service/chunk_storage/v1/ChunkStorage.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace service {
namespace chunk_storage {
namespace v1 {
PROTOBUF_CONSTEXPR LoadChunkRequest::LoadChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoadChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadChunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadChunkRequestDefaultTypeInternal() {}
  union {
    LoadChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadChunkRequestDefaultTypeInternal _LoadChunkRequest_default_instance_;
PROTOBUF_CONSTEXPR SetBlockRequest::SetBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetBlockRequestDefaultTypeInternal() {}
  union {
    SetBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetBlockRequestDefaultTypeInternal _SetBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR Coord::Coord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordDefaultTypeInternal() {}
  union {
    Coord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordDefaultTypeInternal _Coord_default_instance_;
PROTOBUF_CONSTEXPR AddReferencesRequest::AddReferencesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coords_)*/{}
  , /*decltype(_impl_.engine_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddReferencesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReferencesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReferencesRequestDefaultTypeInternal() {}
  union {
    AddReferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReferencesRequestDefaultTypeInternal _AddReferencesRequest_default_instance_;
PROTOBUF_CONSTEXPR AddReferencesResponse::AddReferencesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_engine_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddReferencesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddReferencesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddReferencesResponseDefaultTypeInternal() {}
  union {
    AddReferencesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddReferencesResponseDefaultTypeInternal _AddReferencesResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveReferencesRequest::RemoveReferencesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coords_)*/{}
  , /*decltype(_impl_.player_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveReferencesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveReferencesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveReferencesRequestDefaultTypeInternal() {}
  union {
    RemoveReferencesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveReferencesRequestDefaultTypeInternal _RemoveReferencesRequest_default_instance_;
PROTOBUF_CONSTEXPR HeightAtRequest::HeightAtRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeightAtRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeightAtRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeightAtRequestDefaultTypeInternal() {}
  union {
    HeightAtRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeightAtRequestDefaultTypeInternal _HeightAtRequest_default_instance_;
PROTOBUF_CONSTEXPR HeightAtResponse::HeightAtResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeightAtResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeightAtResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeightAtResponseDefaultTypeInternal() {}
  union {
    HeightAtResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeightAtResponseDefaultTypeInternal _HeightAtResponse_default_instance_;
PROTOBUF_CONSTEXPR EmptyResponse::EmptyResponse(
    ::_pbi::ConstantInitialized) {}
struct EmptyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyResponseDefaultTypeInternal() {}
  union {
    EmptyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
}  // namespace v1
}  // namespace chunk_storage
}  // namespace service
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::Coord, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::Coord, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest, _impl_.engine_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest, _impl_.coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse, _impl_.target_engine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest, _impl_.coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::HeightAtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::HeightAtRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::HeightAtRequest, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::HeightAtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::HeightAtResponse, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::chunk_storage::v1::EmptyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest)},
  { 8, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::SetBlockRequest)},
  { 18, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::Coord)},
  { 26, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest)},
  { 35, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse)},
  { 43, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest)},
  { 51, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::HeightAtRequest)},
  { 59, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::HeightAtResponse)},
  { 66, -1, -1, sizeof(::minecpp::proto::service::chunk_storage::v1::EmptyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::service::chunk_storage::v1::_LoadChunkRequest_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_SetBlockRequest_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_Coord_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_AddReferencesRequest_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_AddReferencesResponse_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_RemoveReferencesRequest_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_HeightAtRequest_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_HeightAtResponse_default_instance_._instance,
  &::minecpp::proto::service::chunk_storage::v1::_EmptyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9minecpp/proto/service/chunk_storage/v1"
  "/ChunkStorage.proto\022&minecpp.proto.servi"
  "ce.chunk_storage.v1\032\"minecpp/proto/chunk"
  "/v1/Chunk.proto\032$minecpp/proto/common/v1"
  "/Common.proto\"(\n\020LoadChunkRequest\022\t\n\001x\030\001"
  " \001(\005\022\t\n\001z\030\002 \001(\005\"A\n\017SetBlockRequest\022\t\n\001x\030"
  "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\022\r\n\005state\030\004 \001"
  "(\005\"\035\n\005Coord\022\t\n\001x\030\001 \001(\005\022\t\n\001z\030\002 \001(\005\"{\n\024Add"
  "ReferencesRequest\022\021\n\tengine_id\030\001 \001(\014\022\021\n\t"
  "player_id\030\002 \001(\014\022=\n\006coords\030\003 \003(\0132-.minecp"
  "p.proto.service.chunk_storage.v1.Coord\"z"
  "\n\025AddReferencesResponse\022G\n\006status\030\001 \001(\0162"
  "7.minecpp.proto.service.chunk_storage.v1"
  ".ReferenceStatus\022\030\n\020target_engine_id\030\002 \001"
  "(\014\"k\n\027RemoveReferencesRequest\022\021\n\tplayer_"
  "id\030\001 \001(\014\022=\n\006coords\030\002 \003(\0132-.minecpp.proto"
  ".service.chunk_storage.v1.Coord\"\'\n\017Heigh"
  "tAtRequest\022\t\n\001x\030\001 \001(\005\022\t\n\001z\030\002 \001(\005\"\"\n\020Heig"
  "htAtResponse\022\016\n\006height\030\001 \001(\005\"\017\n\rEmptyRes"
  "ponse*(\n\017ReferenceStatus\022\006\n\002OK\020\000\022\r\n\tMUST"
  "_MOVE\020\0012\343\005\n\014ChunkStorage\022d\n\tLoadChunk\0228."
  "minecpp.proto.service.chunk_storage.v1.L"
  "oadChunkRequest\032\035.minecpp.proto.chunk.v1"
  ".Chunk\022z\n\010SetBlock\0227.minecpp.proto.servi"
  "ce.chunk_storage.v1.SetBlockRequest\0325.mi"
  "necpp.proto.service.chunk_storage.v1.Emp"
  "tyResponse\022\214\001\n\rAddReferences\022<.minecpp.p"
  "roto.service.chunk_storage.v1.AddReferen"
  "cesRequest\032=.minecpp.proto.service.chunk"
  "_storage.v1.AddReferencesResponse\022\211\001\n\017Re"
  "moveReference\022\?.minecpp.proto.service.ch"
  "unk_storage.v1.RemoveReferencesRequest\0325"
  ".minecpp.proto.service.chunk_storage.v1."
  "EmptyResponse\022}\n\010HeightAt\0227.minecpp.prot"
  "o.service.chunk_storage.v1.HeightAtReque"
  "st\0328.minecpp.proto.service.chunk_storage"
  ".v1.HeightAtResponse\022W\n\010GetBlock\022&.minec"
  "pp.proto.common.v1.BlockPosition\032#.minec"
  "pp.proto.common.v1.BlockStateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_deps[2] = {
  &::descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto,
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto = {
    false, false, 1557, descriptor_table_protodef_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto,
    "minecpp/proto/service/chunk_storage/v1/ChunkStorage.proto",
    &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once, descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto(&descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto);
namespace minecpp {
namespace proto {
namespace service {
namespace chunk_storage {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[0];
}
bool ReferenceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LoadChunkRequest::_Internal {
 public:
};

LoadChunkRequest::LoadChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
}
LoadChunkRequest::LoadChunkRequest(const LoadChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoadChunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
}

inline void LoadChunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LoadChunkRequest::~LoadChunkRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoadChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  return target;
}

size_t LoadChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoadChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadChunkRequest::GetClassData() const { return &_class_data_; }


void LoadChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoadChunkRequest*>(&to_msg);
  auto& from = static_cast<const LoadChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadChunkRequest::CopyFrom(const LoadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.LoadChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadChunkRequest::IsInitialized() const {
  return true;
}

void LoadChunkRequest::InternalSwap(LoadChunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadChunkRequest, _impl_.z_)
      + sizeof(LoadChunkRequest::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(LoadChunkRequest, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[0]);
}

// ===================================================================

class SetBlockRequest::_Internal {
 public:
};

SetBlockRequest::SetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
}
SetBlockRequest::SetBlockRequest(const SetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
}

inline void SetBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetBlockRequest::~SetBlockRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  // int32 state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  return target;
}

size_t SetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  // int32 state = 4;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBlockRequest::GetClassData() const { return &_class_data_; }


void SetBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetBlockRequest*>(&to_msg);
  auto& from = static_cast<const SetBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBlockRequest::CopyFrom(const SetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.SetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBlockRequest::IsInitialized() const {
  return true;
}

void SetBlockRequest::InternalSwap(SetBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetBlockRequest, _impl_.state_)
      + sizeof(SetBlockRequest::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(SetBlockRequest, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[1]);
}

// ===================================================================

class Coord::_Internal {
 public:
};

Coord::Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.Coord)
}
Coord::Coord(const Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.Coord)
}

inline void Coord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Coord::~Coord() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.Coord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.Coord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.Coord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.Coord)
  return target;
}

size_t Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.Coord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coord::GetClassData() const { return &_class_data_; }


void Coord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coord*>(&to_msg);
  auto& from = static_cast<const Coord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.Coord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coord::CopyFrom(const Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coord::IsInitialized() const {
  return true;
}

void Coord::InternalSwap(Coord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coord, _impl_.z_)
      + sizeof(Coord::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Coord, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[2]);
}

// ===================================================================

class AddReferencesRequest::_Internal {
 public:
};

AddReferencesRequest::AddReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
}
AddReferencesRequest::AddReferencesRequest(const AddReferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddReferencesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){from._impl_.coords_}
    , decltype(_impl_.engine_id_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.engine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_engine_id().empty()) {
    _this->_impl_.engine_id_.Set(from._internal_engine_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
}

inline void AddReferencesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){arena}
    , decltype(_impl_.engine_id_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.engine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddReferencesRequest::~AddReferencesRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coords_.~RepeatedPtrField();
  _impl_.engine_id_.Destroy();
  _impl_.player_id_.Destroy();
}

void AddReferencesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coords_.Clear();
  _impl_.engine_id_.ClearToEmpty();
  _impl_.player_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReferencesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes engine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_engine_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes engine_id = 1;
  if (!this->_internal_engine_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_engine_id(), target);
  }

  // bytes player_id = 2;
  if (!this->_internal_player_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_player_id(), target);
  }

  // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  return target;
}

size_t AddReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 3;
  total_size += 1UL * this->_internal_coords_size();
  for (const auto& msg : this->_impl_.coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes engine_id = 1;
  if (!this->_internal_engine_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_engine_id());
  }

  // bytes player_id = 2;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddReferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReferencesRequest::GetClassData() const { return &_class_data_; }


void AddReferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddReferencesRequest*>(&to_msg);
  auto& from = static_cast<const AddReferencesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coords_.MergeFrom(from._impl_.coords_);
  if (!from._internal_engine_id().empty()) {
    _this->_internal_set_engine_id(from._internal_engine_id());
  }
  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReferencesRequest::CopyFrom(const AddReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.AddReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReferencesRequest::IsInitialized() const {
  return true;
}

void AddReferencesRequest::InternalSwap(AddReferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coords_.InternalSwap(&other->_impl_.coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.engine_id_, lhs_arena,
      &other->_impl_.engine_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReferencesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[3]);
}

// ===================================================================

class AddReferencesResponse::_Internal {
 public:
};

AddReferencesResponse::AddReferencesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
}
AddReferencesResponse::AddReferencesResponse(const AddReferencesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddReferencesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_engine_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_engine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_engine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_engine_id().empty()) {
    _this->_impl_.target_engine_id_.Set(from._internal_target_engine_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
}

inline void AddReferencesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_engine_id_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_engine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_engine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddReferencesResponse::~AddReferencesResponse() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddReferencesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_engine_id_.Destroy();
}

void AddReferencesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddReferencesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_engine_id_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddReferencesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.service.chunk_storage.v1.ReferenceStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::minecpp::proto::service::chunk_storage::v1::ReferenceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes target_engine_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_engine_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddReferencesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.service.chunk_storage.v1.ReferenceStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // bytes target_engine_id = 2;
  if (!this->_internal_target_engine_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_engine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  return target;
}

size_t AddReferencesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target_engine_id = 2;
  if (!this->_internal_target_engine_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_engine_id());
  }

  // .minecpp.proto.service.chunk_storage.v1.ReferenceStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddReferencesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddReferencesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddReferencesResponse::GetClassData() const { return &_class_data_; }


void AddReferencesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddReferencesResponse*>(&to_msg);
  auto& from = static_cast<const AddReferencesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_engine_id().empty()) {
    _this->_internal_set_target_engine_id(from._internal_target_engine_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddReferencesResponse::CopyFrom(const AddReferencesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.AddReferencesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReferencesResponse::IsInitialized() const {
  return true;
}

void AddReferencesResponse::InternalSwap(AddReferencesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_engine_id_, lhs_arena,
      &other->_impl_.target_engine_id_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddReferencesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[4]);
}

// ===================================================================

class RemoveReferencesRequest::_Internal {
 public:
};

RemoveReferencesRequest::RemoveReferencesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
}
RemoveReferencesRequest::RemoveReferencesRequest(const RemoveReferencesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveReferencesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){from._impl_.coords_}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_id().empty()) {
    _this->_impl_.player_id_.Set(from._internal_player_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
}

inline void RemoveReferencesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coords_){arena}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveReferencesRequest::~RemoveReferencesRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveReferencesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coords_.~RepeatedPtrField();
  _impl_.player_id_.Destroy();
}

void RemoveReferencesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveReferencesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coords_.Clear();
  _impl_.player_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveReferencesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveReferencesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes player_id = 1;
  if (!this->_internal_player_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_player_id(), target);
  }

  // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  return target;
}

size_t RemoveReferencesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.service.chunk_storage.v1.Coord coords = 2;
  total_size += 1UL * this->_internal_coords_size();
  for (const auto& msg : this->_impl_.coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveReferencesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveReferencesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveReferencesRequest::GetClassData() const { return &_class_data_; }


void RemoveReferencesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveReferencesRequest*>(&to_msg);
  auto& from = static_cast<const RemoveReferencesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coords_.MergeFrom(from._impl_.coords_);
  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveReferencesRequest::CopyFrom(const RemoveReferencesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.RemoveReferencesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveReferencesRequest::IsInitialized() const {
  return true;
}

void RemoveReferencesRequest::InternalSwap(RemoveReferencesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coords_.InternalSwap(&other->_impl_.coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_id_, lhs_arena,
      &other->_impl_.player_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveReferencesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[5]);
}

// ===================================================================

class HeightAtRequest::_Internal {
 public:
};

HeightAtRequest::HeightAtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
}
HeightAtRequest::HeightAtRequest(const HeightAtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeightAtRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
}

inline void HeightAtRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeightAtRequest::~HeightAtRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeightAtRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeightAtRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeightAtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeightAtRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeightAtRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  return target;
}

size_t HeightAtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeightAtRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeightAtRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeightAtRequest::GetClassData() const { return &_class_data_; }


void HeightAtRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeightAtRequest*>(&to_msg);
  auto& from = static_cast<const HeightAtRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeightAtRequest::CopyFrom(const HeightAtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.HeightAtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightAtRequest::IsInitialized() const {
  return true;
}

void HeightAtRequest::InternalSwap(HeightAtRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeightAtRequest, _impl_.z_)
      + sizeof(HeightAtRequest::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(HeightAtRequest, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightAtRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[6]);
}

// ===================================================================

class HeightAtResponse::_Internal {
 public:
};

HeightAtResponse::HeightAtResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
}
HeightAtResponse::HeightAtResponse(const HeightAtResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeightAtResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
}

inline void HeightAtResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeightAtResponse::~HeightAtResponse() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeightAtResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeightAtResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeightAtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.height_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeightAtResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeightAtResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  return target;
}

size_t HeightAtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeightAtResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeightAtResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeightAtResponse::GetClassData() const { return &_class_data_; }


void HeightAtResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeightAtResponse*>(&to_msg);
  auto& from = static_cast<const HeightAtResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeightAtResponse::CopyFrom(const HeightAtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.chunk_storage.v1.HeightAtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightAtResponse::IsInitialized() const {
  return true;
}

void HeightAtResponse::InternalSwap(HeightAtResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightAtResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[7]);
}

// ===================================================================

class EmptyResponse::_Internal {
 public:
};

EmptyResponse::EmptyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.chunk_storage.v1.EmptyResponse)
}
EmptyResponse::EmptyResponse(const EmptyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EmptyResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.chunk_storage.v1.EmptyResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fchunk_5fstorage_2fv1_2fChunkStorage_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chunk_storage
}  // namespace service
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::LoadChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::SetBlockRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::SetBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::SetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::Coord*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::AddReferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::AddReferencesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::RemoveReferencesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::HeightAtRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::HeightAtRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::HeightAtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::HeightAtResponse*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::HeightAtResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::HeightAtResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::chunk_storage::v1::EmptyResponse*
Arena::CreateMaybeMessage< ::minecpp::proto::service::chunk_storage::v1::EmptyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::chunk_storage::v1::EmptyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
