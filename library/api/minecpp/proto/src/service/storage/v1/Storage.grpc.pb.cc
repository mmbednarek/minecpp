// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minecpp/proto/service/storage/v1/Storage.proto

#include <minecpp/proto/service/storage/v1/Storage.pb.h>
#include <minecpp/proto/service/storage/v1/Storage.grpc.pb.h>

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minecpp {
namespace proto {
namespace service {
namespace storage {
namespace v1 {

static const char* StorageService_method_names[] = {
  "/minecpp.proto.service.storage.v1.StorageService/Join",
};

std::unique_ptr< StorageService::Stub> StorageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageService::Stub> stub(new StorageService::Stub(channel, options));
  return stub;
}

StorageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Join_(StorageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>* StorageService::Stub::JoinRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>::Create(channel_.get(), rpcmethod_Join_, context);
}

void StorageService::Stub::async::Join(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::minecpp::proto::service::storage::v1::Request,::minecpp::proto::service::storage::v1::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::minecpp::proto::service::storage::v1::Request,::minecpp::proto::service::storage::v1::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>* StorageService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>::Create(channel_.get(), cq, rpcmethod_Join_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>* StorageService::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>::Create(channel_.get(), cq, rpcmethod_Join_, context, false, nullptr);
}

StorageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< StorageService::Service, ::minecpp::proto::service::storage::v1::Request, ::minecpp::proto::service::storage::v1::Response>(
          [](StorageService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::minecpp::proto::service::storage::v1::Response,
             ::minecpp::proto::service::storage::v1::Request>* stream) {
               return service->Join(ctx, stream);
             }, this)));
}

StorageService::Service::~Service() {
}

::grpc::Status StorageService::Service::Join(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::minecpp::proto::service::storage::v1::Response, ::minecpp::proto::service::storage::v1::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minecpp
}  // namespace proto
}  // namespace service
}  // namespace storage
}  // namespace v1

