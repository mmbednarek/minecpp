// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/chunk/v1/Chunk.proto

#include <minecpp/proto/chunk/v1/Chunk.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace chunk {
namespace v1 {
PROTOBUF_CONSTEXPR Section::Section(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.palette_)*/{}
  , /*decltype(_impl_._palette_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.light_sources_)*/{}
  , /*decltype(_impl_.block_light_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sky_light_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.bits_)*/0
  , /*decltype(_impl_.ref_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionDefaultTypeInternal() {}
  union {
    Section _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionDefaultTypeInternal _Section_default_instance_;
PROTOBUF_CONSTEXPR Chunk::Chunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.biomes_)*/{}
  , /*decltype(_impl_._biomes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.hm_world_surface_)*/{}
  , /*decltype(_impl_._hm_world_surface_cached_byte_size_)*/{0}
  , /*decltype(_impl_.hm_motion_blocking_)*/{}
  , /*decltype(_impl_._hm_motion_blocking_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.full_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkDefaultTypeInternal _Chunk_default_instance_;
PROTOBUF_CONSTEXPR SectionWithPosition::SectionWithPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.section_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionWithPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionWithPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionWithPositionDefaultTypeInternal() {}
  union {
    SectionWithPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionWithPositionDefaultTypeInternal _SectionWithPosition_default_instance_;
PROTOBUF_CONSTEXPR SectionSlice::SectionSlice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionSliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionSliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionSliceDefaultTypeInternal() {}
  union {
    SectionSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionSliceDefaultTypeInternal _SectionSlice_default_instance_;
}  // namespace v1
}  // namespace chunk
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.bits_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.ref_count_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.palette_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.block_light_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.sky_light_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Section, _impl_.light_sources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.pos_z_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.full_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.biomes_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.hm_world_surface_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.hm_motion_blocking_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::Chunk, _impl_.sections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionWithPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionWithPosition, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionWithPosition, _impl_.section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionSlice, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::v1::SectionSlice, _impl_.sections_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::chunk::v1::Section)},
  { 14, -1, -1, sizeof(::minecpp::proto::chunk::v1::Chunk)},
  { 27, -1, -1, sizeof(::minecpp::proto::chunk::v1::SectionWithPosition)},
  { 35, -1, -1, sizeof(::minecpp::proto::chunk::v1::SectionSlice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::chunk::v1::_Section_default_instance_._instance,
  &::minecpp::proto::chunk::v1::_Chunk_default_instance_._instance,
  &::minecpp::proto::chunk::v1::_SectionWithPosition_default_instance_._instance,
  &::minecpp::proto::chunk::v1::_SectionSlice_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"minecpp/proto/chunk/v1/Chunk.proto\022\026mi"
  "necpp.proto.chunk.v1\032$minecpp/proto/comm"
  "on/v1/Common.proto\"\271\001\n\007Section\022\t\n\001y\030\001 \001("
  "\005\022\014\n\004bits\030\002 \001(\005\022\021\n\tref_count\030\003 \001(\005\022\017\n\007pa"
  "lette\030\004 \003(\005\022\014\n\004data\030\005 \003(\003\022\023\n\013block_light"
  "\030\006 \001(\014\022\021\n\tsky_light\030\007 \001(\014\022;\n\rlight_sourc"
  "es\030\010 \003(\0132$.minecpp.proto.common.v1.Light"
  "Source\"\260\001\n\005Chunk\022\r\n\005pos_x\030\001 \001(\005\022\r\n\005pos_z"
  "\030\002 \001(\005\022\014\n\004full\030\003 \001(\010\022\022\n\006biomes\030\004 \003(\005B\002\020\001"
  "\022\030\n\020hm_world_surface\030\005 \003(\003\022\032\n\022hm_motion_"
  "blocking\030\006 \003(\003\0221\n\010sections\030\007 \003(\0132\037.minec"
  "pp.proto.chunk.v1.Section\"\210\001\n\023SectionWit"
  "hPosition\022\?\n\010position\030\001 \001(\0132-.minecpp.pr"
  "oto.common.v1.ChunkSectionPosition\0220\n\007se"
  "ction\030\002 \001(\0132\037.minecpp.proto.chunk.v1.Sec"
  "tion\"\203\001\n\014SectionSlice\0224\n\005range\030\001 \001(\0132%.m"
  "inecpp.proto.common.v1.SectionRange\022=\n\010s"
  "ections\030\002 \003(\0132+.minecpp.proto.chunk.v1.S"
  "ectionWithPositionb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_deps[1] = {
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto = {
    false, false, 746, descriptor_table_protodef_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto,
    "minecpp/proto/chunk/v1/Chunk.proto",
    &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once, descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto(&descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto);
namespace minecpp {
namespace proto {
namespace chunk {
namespace v1 {

// ===================================================================

class Section::_Internal {
 public:
};

void Section::clear_light_sources() {
  _impl_.light_sources_.Clear();
}
Section::Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.v1.Section)
}
Section::Section(const Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Section* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){from._impl_.palette_}
    , /*decltype(_impl_._palette_cached_byte_size_)*/{0}
    , decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.light_sources_){from._impl_.light_sources_}
    , decltype(_impl_.block_light_){}
    , decltype(_impl_.sky_light_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.bits_){}
    , decltype(_impl_.ref_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_light().empty()) {
    _this->_impl_.block_light_.Set(from._internal_block_light(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sky_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sky_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sky_light().empty()) {
    _this->_impl_.sky_light_.Set(from._internal_sky_light(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.y_, &from._impl_.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ref_count_) -
    reinterpret_cast<char*>(&_impl_.y_)) + sizeof(_impl_.ref_count_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.v1.Section)
}

inline void Section::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){arena}
    , /*decltype(_impl_._palette_cached_byte_size_)*/{0}
    , decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.light_sources_){arena}
    , decltype(_impl_.block_light_){}
    , decltype(_impl_.sky_light_){}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.bits_){0}
    , decltype(_impl_.ref_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sky_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sky_light_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Section::~Section() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.v1.Section)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Section::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.palette_.~RepeatedField();
  _impl_.data_.~RepeatedField();
  _impl_.light_sources_.~RepeatedPtrField();
  _impl_.block_light_.Destroy();
  _impl_.sky_light_.Destroy();
}

void Section::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.v1.Section)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.palette_.Clear();
  _impl_.data_.Clear();
  _impl_.light_sources_.Clear();
  _impl_.block_light_.ClearToEmpty();
  _impl_.sky_light_.ClearToEmpty();
  ::memset(&_impl_.y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ref_count_) -
      reinterpret_cast<char*>(&_impl_.y_)) + sizeof(_impl_.ref_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Section::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ref_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 palette = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_palette(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_palette(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_block_light();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sky_light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sky_light();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.common.v1.LightSource light_sources = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_light_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Section::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.v1.Section)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_y(), target);
  }

  // int32 bits = 2;
  if (this->_internal_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bits(), target);
  }

  // int32 ref_count = 3;
  if (this->_internal_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ref_count(), target);
  }

  // repeated int32 palette = 4;
  {
    int byte_size = _impl_._palette_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_palette(), byte_size, target);
    }
  }

  // repeated int64 data = 5;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_data(), byte_size, target);
    }
  }

  // bytes block_light = 6;
  if (!this->_internal_block_light().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_block_light(), target);
  }

  // bytes sky_light = 7;
  if (!this->_internal_sky_light().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_sky_light(), target);
  }

  // repeated .minecpp.proto.common.v1.LightSource light_sources = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_light_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_light_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.v1.Section)
  return target;
}

size_t Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.v1.Section)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 palette = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.palette_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._palette_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 data = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .minecpp.proto.common.v1.LightSource light_sources = 8;
  total_size += 1UL * this->_internal_light_sources_size();
  for (const auto& msg : this->_impl_.light_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes block_light = 6;
  if (!this->_internal_block_light().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_light());
  }

  // bytes sky_light = 7;
  if (!this->_internal_sky_light().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sky_light());
  }

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 bits = 2;
  if (this->_internal_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bits());
  }

  // int32 ref_count = 3;
  if (this->_internal_ref_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ref_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Section::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Section::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Section::GetClassData() const { return &_class_data_; }


void Section::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Section*>(&to_msg);
  auto& from = static_cast<const Section&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.v1.Section)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.palette_.MergeFrom(from._impl_.palette_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.light_sources_.MergeFrom(from._impl_.light_sources_);
  if (!from._internal_block_light().empty()) {
    _this->_internal_set_block_light(from._internal_block_light());
  }
  if (!from._internal_sky_light().empty()) {
    _this->_internal_set_sky_light(from._internal_sky_light());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_bits() != 0) {
    _this->_internal_set_bits(from._internal_bits());
  }
  if (from._internal_ref_count() != 0) {
    _this->_internal_set_ref_count(from._internal_ref_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.v1.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Section::IsInitialized() const {
  return true;
}

void Section::InternalSwap(Section* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.palette_.InternalSwap(&other->_impl_.palette_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.light_sources_.InternalSwap(&other->_impl_.light_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_light_, lhs_arena,
      &other->_impl_.block_light_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sky_light_, lhs_arena,
      &other->_impl_.sky_light_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Section, _impl_.ref_count_)
      + sizeof(Section::_impl_.ref_count_)
      - PROTOBUF_FIELD_OFFSET(Section, _impl_.y_)>(
          reinterpret_cast<char*>(&_impl_.y_),
          reinterpret_cast<char*>(&other->_impl_.y_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Section::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[0]);
}

// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.v1.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.biomes_){from._impl_.biomes_}
    , /*decltype(_impl_._biomes_cached_byte_size_)*/{0}
    , decltype(_impl_.hm_world_surface_){from._impl_.hm_world_surface_}
    , /*decltype(_impl_._hm_world_surface_cached_byte_size_)*/{0}
    , decltype(_impl_.hm_motion_blocking_){from._impl_.hm_motion_blocking_}
    , /*decltype(_impl_._hm_motion_blocking_cached_byte_size_)*/{0}
    , decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.full_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.full_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.full_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.v1.Chunk)
}

inline void Chunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.biomes_){arena}
    , /*decltype(_impl_._biomes_cached_byte_size_)*/{0}
    , decltype(_impl_.hm_world_surface_){arena}
    , /*decltype(_impl_._hm_world_surface_cached_byte_size_)*/{0}
    , decltype(_impl_.hm_motion_blocking_){arena}
    , /*decltype(_impl_._hm_motion_blocking_cached_byte_size_)*/{0}
    , decltype(_impl_.sections_){arena}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.full_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.v1.Chunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.biomes_.~RepeatedField();
  _impl_.hm_world_surface_.~RepeatedField();
  _impl_.hm_motion_blocking_.~RepeatedField();
  _impl_.sections_.~RepeatedPtrField();
}

void Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.v1.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.biomes_.Clear();
  _impl_.hm_world_surface_.Clear();
  _impl_.hm_motion_blocking_.Clear();
  _impl_.sections_.Clear();
  ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.full_) -
      reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.full_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pos_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 biomes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_biomes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_biomes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 hm_world_surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hm_world_surface(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_hm_world_surface(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 hm_motion_blocking = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hm_motion_blocking(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_hm_motion_blocking(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.chunk.v1.Section sections = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.v1.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos_x = 1;
  if (this->_internal_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pos_x(), target);
  }

  // int32 pos_z = 2;
  if (this->_internal_pos_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pos_z(), target);
  }

  // bool full = 3;
  if (this->_internal_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_full(), target);
  }

  // repeated int32 biomes = 4 [packed = true];
  {
    int byte_size = _impl_._biomes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_biomes(), byte_size, target);
    }
  }

  // repeated int64 hm_world_surface = 5;
  {
    int byte_size = _impl_._hm_world_surface_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_hm_world_surface(), byte_size, target);
    }
  }

  // repeated int64 hm_motion_blocking = 6;
  {
    int byte_size = _impl_._hm_motion_blocking_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_hm_motion_blocking(), byte_size, target);
    }
  }

  // repeated .minecpp.proto.chunk.v1.Section sections = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.v1.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.v1.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 biomes = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.biomes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._biomes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hm_world_surface = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.hm_world_surface_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hm_world_surface_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hm_motion_blocking = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.hm_motion_blocking_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hm_motion_blocking_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .minecpp.proto.chunk.v1.Section sections = 7;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 pos_x = 1;
  if (this->_internal_pos_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos_x());
  }

  // int32 pos_z = 2;
  if (this->_internal_pos_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos_z());
  }

  // bool full = 3;
  if (this->_internal_full() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }


void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chunk*>(&to_msg);
  auto& from = static_cast<const Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.v1.Chunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.biomes_.MergeFrom(from._impl_.biomes_);
  _this->_impl_.hm_world_surface_.MergeFrom(from._impl_.hm_world_surface_);
  _this->_impl_.hm_motion_blocking_.MergeFrom(from._impl_.hm_motion_blocking_);
  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  if (from._internal_pos_x() != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  if (from._internal_pos_z() != 0) {
    _this->_internal_set_pos_z(from._internal_pos_z());
  }
  if (from._internal_full() != 0) {
    _this->_internal_set_full(from._internal_full());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.v1.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.biomes_.InternalSwap(&other->_impl_.biomes_);
  _impl_.hm_world_surface_.InternalSwap(&other->_impl_.hm_world_surface_);
  _impl_.hm_motion_blocking_.InternalSwap(&other->_impl_.hm_motion_blocking_);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, _impl_.full_)
      + sizeof(Chunk::_impl_.full_)
      - PROTOBUF_FIELD_OFFSET(Chunk, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[1]);
}

// ===================================================================

class SectionWithPosition::_Internal {
 public:
  static const ::minecpp::proto::common::v1::ChunkSectionPosition& position(const SectionWithPosition* msg);
  static const ::minecpp::proto::chunk::v1::Section& section(const SectionWithPosition* msg);
};

const ::minecpp::proto::common::v1::ChunkSectionPosition&
SectionWithPosition::_Internal::position(const SectionWithPosition* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::chunk::v1::Section&
SectionWithPosition::_Internal::section(const SectionWithPosition* msg) {
  return *msg->_impl_.section_;
}
void SectionWithPosition::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
SectionWithPosition::SectionWithPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.v1.SectionWithPosition)
}
SectionWithPosition::SectionWithPosition(const SectionWithPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionWithPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.section_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::minecpp::proto::common::v1::ChunkSectionPosition(*from._impl_.position_);
  }
  if (from._internal_has_section()) {
    _this->_impl_.section_ = new ::minecpp::proto::chunk::v1::Section(*from._impl_.section_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.v1.SectionWithPosition)
}

inline void SectionWithPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.section_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SectionWithPosition::~SectionWithPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.v1.SectionWithPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionWithPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.section_;
}

void SectionWithPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionWithPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.v1.SectionWithPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.section_ != nullptr) {
    delete _impl_.section_;
  }
  _impl_.section_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionWithPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.ChunkSectionPosition position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.chunk.v1.Section section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionWithPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.v1.SectionWithPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkSectionPosition position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.chunk.v1.Section section = 2;
  if (this->_internal_has_section()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::section(this),
        _Internal::section(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.v1.SectionWithPosition)
  return target;
}

size_t SectionWithPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.v1.SectionWithPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkSectionPosition position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .minecpp.proto.chunk.v1.Section section = 2;
  if (this->_internal_has_section()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.section_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionWithPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionWithPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionWithPosition::GetClassData() const { return &_class_data_; }


void SectionWithPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionWithPosition*>(&to_msg);
  auto& from = static_cast<const SectionWithPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.v1.SectionWithPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::minecpp::proto::common::v1::ChunkSectionPosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_section()) {
    _this->_internal_mutable_section()->::minecpp::proto::chunk::v1::Section::MergeFrom(
        from._internal_section());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionWithPosition::CopyFrom(const SectionWithPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.v1.SectionWithPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionWithPosition::IsInitialized() const {
  return true;
}

void SectionWithPosition::InternalSwap(SectionWithPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.section_)
      + sizeof(SectionWithPosition::_impl_.section_)
      - PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionWithPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[2]);
}

// ===================================================================

class SectionSlice::_Internal {
 public:
  static const ::minecpp::proto::common::v1::SectionRange& range(const SectionSlice* msg);
};

const ::minecpp::proto::common::v1::SectionRange&
SectionSlice::_Internal::range(const SectionSlice* msg) {
  return *msg->_impl_.range_;
}
void SectionSlice::clear_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
}
SectionSlice::SectionSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.v1.SectionSlice)
}
SectionSlice::SectionSlice(const SectionSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionSlice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::minecpp::proto::common::v1::SectionRange(*from._impl_.range_);
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.v1.SectionSlice)
}

inline void SectionSlice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sections_){arena}
    , decltype(_impl_.range_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SectionSlice::~SectionSlice() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.v1.SectionSlice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void SectionSlice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.v1.SectionSlice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sections_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionSlice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.SectionRange range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.chunk.v1.SectionWithPosition sections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionSlice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.v1.SectionSlice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.SectionRange range = 1;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.chunk.v1.SectionWithPosition sections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.v1.SectionSlice)
  return target;
}

size_t SectionSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.v1.SectionSlice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.chunk.v1.SectionWithPosition sections = 2;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minecpp.proto.common.v1.SectionRange range = 1;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionSlice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionSlice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionSlice::GetClassData() const { return &_class_data_; }


void SectionSlice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionSlice*>(&to_msg);
  auto& from = static_cast<const SectionSlice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.v1.SectionSlice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::minecpp::proto::common::v1::SectionRange::MergeFrom(
        from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionSlice::CopyFrom(const SectionSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.v1.SectionSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionSlice::IsInitialized() const {
  return true;
}

void SectionSlice::InternalSwap(SectionSlice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  swap(_impl_.range_, other->_impl_.range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionSlice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fv1_2fChunk_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chunk
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::chunk::v1::Section*
Arena::CreateMaybeMessage< ::minecpp::proto::chunk::v1::Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::chunk::v1::Section >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::chunk::v1::Chunk*
Arena::CreateMaybeMessage< ::minecpp::proto::chunk::v1::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::chunk::v1::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::chunk::v1::SectionWithPosition*
Arena::CreateMaybeMessage< ::minecpp::proto::chunk::v1::SectionWithPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::chunk::v1::SectionWithPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::chunk::v1::SectionSlice*
Arena::CreateMaybeMessage< ::minecpp::proto::chunk::v1::SectionSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::chunk::v1::SectionSlice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
