// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/chunk/Chunk.proto

#include <minecpp/proto/chunk/Chunk.pb.h>

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace minecpp {
namespace proto {
namespace chunk {
        template <typename>
PROTOBUF_CONSTEXPR Section::Section(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.palette_)*/ {},
      /* _impl_._palette_cached_byte_size_ = */ {0},
      /*decltype(_impl_.data_)*/ {},
      /* _impl_._data_cached_byte_size_ = */ {0},
      /*decltype(_impl_.light_sources_)*/ {},
      /*decltype(_impl_.block_light_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.sky_light_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.bits_)*/ 0,
      /*decltype(_impl_.ref_count_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionDefaultTypeInternal() {}
  union {
    Section _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionDefaultTypeInternal _Section_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Chunk::Chunk(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.biomes_)*/ {},
      /* _impl_._biomes_cached_byte_size_ = */ {0},
      /*decltype(_impl_.hm_world_surface_)*/ {},
      /* _impl_._hm_world_surface_cached_byte_size_ = */ {0},
      /*decltype(_impl_.hm_motion_blocking_)*/ {},
      /* _impl_._hm_motion_blocking_cached_byte_size_ = */ {0},
      /*decltype(_impl_.sections_)*/ {},
      /*decltype(_impl_.engine_ids_)*/ {},
      /* _impl_._engine_ids_cached_byte_size_ = */ {0},
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.full_)*/ false,
    } {}
struct ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkDefaultTypeInternal _Chunk_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SectionWithPosition::SectionWithPosition(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.section_)*/ nullptr,
    } {}
struct SectionWithPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionWithPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionWithPositionDefaultTypeInternal() {}
  union {
    SectionWithPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionWithPositionDefaultTypeInternal _SectionWithPosition_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SectionSlice::SectionSlice(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.sections_)*/ {},
      /*decltype(_impl_.range_)*/ nullptr,
    } {}
struct SectionSliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionSliceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionSliceDefaultTypeInternal() {}
  union {
    SectionSlice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionSliceDefaultTypeInternal _SectionSlice_default_instance_;
}  // namespace chunk
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_minecpp_2fproto_2fchunk_2fChunk_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_minecpp_2fproto_2fchunk_2fChunk_2eproto = nullptr;
const ::uint32_t TableStruct_minecpp_2fproto_2fchunk_2fChunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.ref_count_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.palette_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.block_light_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.sky_light_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Section, _impl_.light_sources_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.full_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.biomes_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.hm_world_surface_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.hm_motion_blocking_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.sections_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::Chunk, _impl_.engine_ids_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionWithPosition, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionWithPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionWithPosition, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionWithPosition, _impl_.section_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionSlice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionSlice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionSlice, _impl_.range_),
    PROTOBUF_FIELD_OFFSET(::minecpp::proto::chunk::SectionSlice, _impl_.sections_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::minecpp::proto::chunk::Section)},
        {16, 31, -1, sizeof(::minecpp::proto::chunk::Chunk)},
        {38, 48, -1, sizeof(::minecpp::proto::chunk::SectionWithPosition)},
        {50, 60, -1, sizeof(::minecpp::proto::chunk::SectionSlice)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::minecpp::proto::chunk::_Section_default_instance_._instance,
    &::minecpp::proto::chunk::_Chunk_default_instance_._instance,
    &::minecpp::proto::chunk::_SectionWithPosition_default_instance_._instance,
    &::minecpp::proto::chunk::_SectionSlice_default_instance_._instance,
};
const char descriptor_table_protodef_minecpp_2fproto_2fchunk_2fChunk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037minecpp/proto/chunk/Chunk.proto\022\023minec"
    "pp.proto.chunk\032!minecpp/proto/common/Com"
    "mon.proto\"\266\001\n\007Section\022\t\n\001y\030\001 \001(\005\022\014\n\004bits"
    "\030\002 \001(\005\022\021\n\tref_count\030\003 \001(\005\022\017\n\007palette\030\004 \003"
    "(\r\022\014\n\004data\030\005 \003(\004\022\023\n\013block_light\030\006 \001(\014\022\021\n"
    "\tsky_light\030\007 \001(\014\0228\n\rlight_sources\030\010 \003(\0132"
    "!.minecpp.proto.common.LightSource\"\332\001\n\005C"
    "hunk\0225\n\010position\030\001 \001(\0132#.minecpp.proto.c"
    "ommon.ChunkPosition\022\014\n\004full\030\002 \001(\010\022\022\n\006bio"
    "mes\030\003 \003(\005B\002\020\001\022\030\n\020hm_world_surface\030\004 \003(\003\022"
    "\032\n\022hm_motion_blocking\030\005 \003(\003\022.\n\010sections\030"
    "\006 \003(\0132\034.minecpp.proto.chunk.Section\022\022\n\ne"
    "ngine_ids\030\007 \003(\003\"\202\001\n\023SectionWithPosition\022"
    "<\n\010position\030\001 \001(\0132*.minecpp.proto.common"
    ".ChunkSectionPosition\022-\n\007section\030\002 \001(\0132\034"
    ".minecpp.proto.chunk.Section\"}\n\014SectionS"
    "lice\0221\n\005range\030\001 \001(\0132\".minecpp.proto.comm"
    "on.SectionRange\022:\n\010sections\030\002 \003(\0132(.mine"
    "cpp.proto.chunk.SectionWithPositionb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_deps[1] =
    {
        &::descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto,
};
static ::absl::once_flag descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto = {
    false,
    false,
    763,
    descriptor_table_protodef_minecpp_2fproto_2fchunk_2fChunk_2eproto,
    "minecpp/proto/chunk/Chunk.proto",
    &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once,
    descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_minecpp_2fproto_2fchunk_2fChunk_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto,
    file_level_enum_descriptors_minecpp_2fproto_2fchunk_2fChunk_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fchunk_2fChunk_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fchunk_2fChunk_2eproto(&descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto);
namespace minecpp {
namespace proto {
namespace chunk {
// ===================================================================

class Section::_Internal {
 public:
};

void Section::clear_light_sources() {
  _internal_mutable_light_sources()->Clear();
}
Section::Section(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.Section)
}
Section::Section(const Section& from) : ::google::protobuf::Message() {
  Section* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){from._impl_.palette_},
      /* _impl_._palette_cached_byte_size_ = */ {0},
      decltype(_impl_.data_){from._impl_.data_},
      /* _impl_._data_cached_byte_size_ = */ {0},
      decltype(_impl_.light_sources_){from._impl_.light_sources_},
      decltype(_impl_.block_light_){},
      decltype(_impl_.sky_light_){},
      decltype(_impl_.y_){},
      decltype(_impl_.bits_){},
      decltype(_impl_.ref_count_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_light().empty()) {
    _this->_impl_.block_light_.Set(from._internal_block_light(), _this->GetArenaForAllocation());
  }
  _impl_.sky_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sky_light_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sky_light().empty()) {
    _this->_impl_.sky_light_.Set(from._internal_sky_light(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.y_, &from._impl_.y_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ref_count_) -
    reinterpret_cast<char*>(&_impl_.y_)) + sizeof(_impl_.ref_count_));

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.Section)
}
inline void Section::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.palette_){arena},
      /* _impl_._palette_cached_byte_size_ = */ {0},
      decltype(_impl_.data_){arena},
      /* _impl_._data_cached_byte_size_ = */ {0},
      decltype(_impl_.light_sources_){arena},
      decltype(_impl_.block_light_){},
      decltype(_impl_.sky_light_){},
      decltype(_impl_.y_){0},
      decltype(_impl_.bits_){0},
      decltype(_impl_.ref_count_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.block_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_light_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sky_light_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sky_light_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Section::~Section() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.Section)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Section::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.palette_.~RepeatedField();
  _impl_.data_.~RepeatedField();
  _impl_.light_sources_.~RepeatedPtrField();
  _impl_.block_light_.Destroy();
  _impl_.sky_light_.Destroy();
}
void Section::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.Section)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_palette()->Clear();
  _internal_mutable_data()->Clear();
  _internal_mutable_light_sources()->Clear();
  _impl_.block_light_.ClearToEmpty();
  _impl_.sky_light_.ClearToEmpty();
  ::memset(&_impl_.y_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ref_count_) -
      reinterpret_cast<char*>(&_impl_.y_)) + sizeof(_impl_.ref_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Section::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 0, 2> Section::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Section_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .minecpp.proto.common.LightSource light_sources = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.light_sources_)}},
    // int32 y = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Section, _impl_.y_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.y_)}},
    // int32 bits = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Section, _impl_.bits_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.bits_)}},
    // int32 ref_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Section, _impl_.ref_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.ref_count_)}},
    // repeated uint32 palette = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.palette_)}},
    // repeated uint64 data = 5;
    {::_pbi::TcParser::FastV64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.data_)}},
    // bytes block_light = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.block_light_)}},
    // bytes sky_light = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Section, _impl_.sky_light_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 y = 1;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 bits = 2;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.bits_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ref_count = 3;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.ref_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated uint32 palette = 4;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.palette_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint64 data = 5;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // bytes block_light = 6;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.block_light_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes sky_light = 7;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.sky_light_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .minecpp.proto.common.LightSource light_sources = 8;
    {PROTOBUF_FIELD_OFFSET(Section, _impl_.light_sources_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::LightSource>()},
  }}, {{
  }},
};

::uint8_t* Section::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.Section)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_y(), target);
  }

  // int32 bits = 2;
  if (this->_internal_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_bits(), target);
  }

  // int32 ref_count = 3;
  if (this->_internal_ref_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_ref_count(), target);
  }

  // repeated uint32 palette = 4;
  {
    int byte_size = _impl_._palette_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(4, _internal_palette(),
                                                 byte_size, target);
    }
  }

  // repeated uint64 data = 5;
  {
    int byte_size = _impl_._data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(5, _internal_data(),
                                                 byte_size, target);
    }
  }

  // bytes block_light = 6;
  if (!this->_internal_block_light().empty()) {
    const std::string& _s = this->_internal_block_light();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes sky_light = 7;
  if (!this->_internal_sky_light().empty()) {
    const std::string& _s = this->_internal_sky_light();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // repeated .minecpp.proto.common.LightSource light_sources = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_light_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_light_sources().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.Section)
  return target;
}

::size_t Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.Section)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 palette = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_palette())
    ;
    _impl_._palette_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint64 data = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_data())
    ;
    _impl_._data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .minecpp.proto.common.LightSource light_sources = 8;
  total_size += 1UL * this->_internal_light_sources_size();
  for (const auto& msg : this->_internal_light_sources()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes block_light = 6;
  if (!this->_internal_block_light().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_block_light());
  }

  // bytes sky_light = 7;
  if (!this->_internal_sky_light().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_sky_light());
  }

  // int32 y = 1;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  // int32 bits = 2;
  if (this->_internal_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_bits());
  }

  // int32 ref_count = 3;
  if (this->_internal_ref_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ref_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Section::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Section::MergeImpl
};
const ::google::protobuf::Message::ClassData*Section::GetClassData() const { return &_class_data_; }


void Section::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Section*>(&to_msg);
  auto& from = static_cast<const Section&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.Section)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_palette()->MergeFrom(from._internal_palette());
  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_mutable_light_sources()->MergeFrom(from._internal_light_sources());
  if (!from._internal_block_light().empty()) {
    _this->_internal_set_block_light(from._internal_block_light());
  }
  if (!from._internal_sky_light().empty()) {
    _this->_internal_set_sky_light(from._internal_sky_light());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_bits() != 0) {
    _this->_internal_set_bits(from._internal_bits());
  }
  if (from._internal_ref_count() != 0) {
    _this->_internal_set_ref_count(from._internal_ref_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Section::IsInitialized() const {
  return true;
}

void Section::InternalSwap(Section* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.palette_.InternalSwap(&other->_impl_.palette_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.light_sources_.InternalSwap(&other->_impl_.light_sources_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_light_, lhs_arena,
                                       &other->_impl_.block_light_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sky_light_, lhs_arena,
                                       &other->_impl_.sky_light_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Section, _impl_.ref_count_)
      + sizeof(Section::_impl_.ref_count_)
      - PROTOBUF_FIELD_OFFSET(Section, _impl_.y_)>(
          reinterpret_cast<char*>(&_impl_.y_),
          reinterpret_cast<char*>(&other->_impl_.y_));
}

::google::protobuf::Metadata Section::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto[0]);
}
// ===================================================================

class Chunk::_Internal {
 public:
  using HasBits = decltype(std::declval<Chunk>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Chunk, _impl_._has_bits_);
  static const ::minecpp::proto::common::ChunkPosition& position(const Chunk* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::ChunkPosition& Chunk::_Internal::position(const Chunk* msg) {
  return *msg->_impl_.position_;
}
void Chunk::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Chunk::Chunk(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.Chunk)
}
Chunk::Chunk(const Chunk& from) : ::google::protobuf::Message() {
  Chunk* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.biomes_){from._impl_.biomes_},
      /* _impl_._biomes_cached_byte_size_ = */ {0},
      decltype(_impl_.hm_world_surface_){from._impl_.hm_world_surface_},
      /* _impl_._hm_world_surface_cached_byte_size_ = */ {0},
      decltype(_impl_.hm_motion_blocking_){from._impl_.hm_motion_blocking_},
      /* _impl_._hm_motion_blocking_cached_byte_size_ = */ {0},
      decltype(_impl_.sections_){from._impl_.sections_},
      decltype(_impl_.engine_ids_){from._impl_.engine_ids_},
      /* _impl_._engine_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.full_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::minecpp::proto::common::ChunkPosition(*from._impl_.position_);
  }
  _this->_impl_.full_ = from._impl_.full_;

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.Chunk)
}
inline void Chunk::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.biomes_){arena},
      /* _impl_._biomes_cached_byte_size_ = */ {0},
      decltype(_impl_.hm_world_surface_){arena},
      /* _impl_._hm_world_surface_cached_byte_size_ = */ {0},
      decltype(_impl_.hm_motion_blocking_){arena},
      /* _impl_._hm_motion_blocking_cached_byte_size_ = */ {0},
      decltype(_impl_.sections_){arena},
      decltype(_impl_.engine_ids_){arena},
      /* _impl_._engine_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.full_){false},
  };
}
Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.Chunk)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Chunk::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.biomes_.~RepeatedField();
  _impl_.hm_world_surface_.~RepeatedField();
  _impl_.hm_motion_blocking_.~RepeatedField();
  _impl_.sections_.~RepeatedPtrField();
  _impl_.engine_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.position_;
}
void Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.Chunk)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_biomes()->Clear();
  _internal_mutable_hm_world_surface()->Clear();
  _internal_mutable_hm_motion_blocking()->Clear();
  _internal_mutable_sections()->Clear();
  _internal_mutable_engine_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.full_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> Chunk::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Chunk, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Chunk_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .minecpp.proto.common.ChunkPosition position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.position_)}},
    // bool full = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Chunk, _impl_.full_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.full_)}},
    // repeated int32 biomes = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.biomes_)}},
    // repeated int64 hm_world_surface = 4;
    {::_pbi::TcParser::FastV64P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.hm_world_surface_)}},
    // repeated int64 hm_motion_blocking = 5;
    {::_pbi::TcParser::FastV64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.hm_motion_blocking_)}},
    // repeated .minecpp.proto.chunk.Section sections = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.sections_)}},
    // repeated int64 engine_ids = 7;
    {::_pbi::TcParser::FastV64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Chunk, _impl_.engine_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.ChunkPosition position = 1;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool full = 2;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.full_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int32 biomes = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.biomes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int64 hm_world_surface = 4;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.hm_world_surface_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated int64 hm_motion_blocking = 5;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.hm_motion_blocking_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated .minecpp.proto.chunk.Section sections = 6;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.sections_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int64 engine_ids = 7;
    {PROTOBUF_FIELD_OFFSET(Chunk, _impl_.engine_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ChunkPosition>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::chunk::Section>()},
  }}, {{
  }},
};

::uint8_t* Chunk::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.Chunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.ChunkPosition position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // bool full = 2;
  if (this->_internal_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_full(), target);
  }

  // repeated int32 biomes = 3 [packed = true];
  {
    int byte_size = _impl_._biomes_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_biomes(),
                                                 byte_size, target);
    }
  }

  // repeated int64 hm_world_surface = 4;
  {
    int byte_size = _impl_._hm_world_surface_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(4, _internal_hm_world_surface(),
                                                 byte_size, target);
    }
  }

  // repeated int64 hm_motion_blocking = 5;
  {
    int byte_size = _impl_._hm_motion_blocking_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(5, _internal_hm_motion_blocking(),
                                                 byte_size, target);
    }
  }

  // repeated .minecpp.proto.chunk.Section sections = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 engine_ids = 7;
  {
    int byte_size = _impl_._engine_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(7, _internal_engine_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.Chunk)
  return target;
}

::size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.Chunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 biomes = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_biomes())
    ;
    _impl_._biomes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 hm_world_surface = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_hm_world_surface())
    ;
    _impl_._hm_world_surface_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 hm_motion_blocking = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_hm_motion_blocking())
    ;
    _impl_._hm_motion_blocking_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .minecpp.proto.chunk.Section sections = 6;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_internal_sections()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int64 engine_ids = 7;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_engine_ids())
    ;
    _impl_._engine_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // .minecpp.proto.common.ChunkPosition position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // bool full = 2;
  if (this->_internal_full() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Chunk::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Chunk::MergeImpl
};
const ::google::protobuf::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }


void Chunk::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Chunk*>(&to_msg);
  auto& from = static_cast<const Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.Chunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_biomes()->MergeFrom(from._internal_biomes());
  _this->_internal_mutable_hm_world_surface()->MergeFrom(from._internal_hm_world_surface());
  _this->_internal_mutable_hm_motion_blocking()->MergeFrom(from._internal_hm_motion_blocking());
  _this->_internal_mutable_sections()->MergeFrom(from._internal_sections());
  _this->_internal_mutable_engine_ids()->MergeFrom(from._internal_engine_ids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::minecpp::proto::common::ChunkPosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_full() != 0) {
    _this->_internal_set_full(from._internal_full());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.biomes_.InternalSwap(&other->_impl_.biomes_);
  _impl_.hm_world_surface_.InternalSwap(&other->_impl_.hm_world_surface_);
  _impl_.hm_motion_blocking_.InternalSwap(&other->_impl_.hm_motion_blocking_);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  _impl_.engine_ids_.InternalSwap(&other->_impl_.engine_ids_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, _impl_.full_)
      + sizeof(Chunk::_impl_.full_)
      - PROTOBUF_FIELD_OFFSET(Chunk, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto[1]);
}
// ===================================================================

class SectionWithPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionWithPosition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_._has_bits_);
  static const ::minecpp::proto::common::ChunkSectionPosition& position(const SectionWithPosition* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::minecpp::proto::chunk::Section& section(const SectionWithPosition* msg);
  static void set_has_section(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::minecpp::proto::common::ChunkSectionPosition& SectionWithPosition::_Internal::position(const SectionWithPosition* msg) {
  return *msg->_impl_.position_;
}
const ::minecpp::proto::chunk::Section& SectionWithPosition::_Internal::section(const SectionWithPosition* msg) {
  return *msg->_impl_.section_;
}
void SectionWithPosition::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SectionWithPosition::SectionWithPosition(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.SectionWithPosition)
}
SectionWithPosition::SectionWithPosition(const SectionWithPosition& from) : ::google::protobuf::Message() {
  SectionWithPosition* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.section_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::minecpp::proto::common::ChunkSectionPosition(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.section_ = new ::minecpp::proto::chunk::Section(*from._impl_.section_);
  }

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.SectionWithPosition)
}
inline void SectionWithPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.section_){nullptr},
  };
}
SectionWithPosition::~SectionWithPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.SectionWithPosition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SectionWithPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.section_;
}
void SectionWithPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SectionWithPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.SectionWithPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.section_ != nullptr);
      _impl_.section_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SectionWithPosition::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SectionWithPosition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SectionWithPosition_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .minecpp.proto.chunk.Section section = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.section_)}},
    // .minecpp.proto.common.ChunkSectionPosition position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.ChunkSectionPosition position = 1;
    {PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .minecpp.proto.chunk.Section section = 2;
    {PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.section_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::ChunkSectionPosition>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::chunk::Section>()},
  }}, {{
  }},
};

::uint8_t* SectionWithPosition::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.SectionWithPosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.ChunkSectionPosition position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.chunk.Section section = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::section(this),
        _Internal::section(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.SectionWithPosition)
  return target;
}

::size_t SectionWithPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.SectionWithPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .minecpp.proto.common.ChunkSectionPosition position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .minecpp.proto.chunk.Section section = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.section_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SectionWithPosition::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SectionWithPosition::MergeImpl
};
const ::google::protobuf::Message::ClassData*SectionWithPosition::GetClassData() const { return &_class_data_; }


void SectionWithPosition::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SectionWithPosition*>(&to_msg);
  auto& from = static_cast<const SectionWithPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.SectionWithPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::minecpp::proto::common::ChunkSectionPosition::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_section()->::minecpp::proto::chunk::Section::MergeFrom(
          from._internal_section());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SectionWithPosition::CopyFrom(const SectionWithPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.SectionWithPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SectionWithPosition::IsInitialized() const {
  return true;
}

void SectionWithPosition::InternalSwap(SectionWithPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.section_)
      + sizeof(SectionWithPosition::_impl_.section_)
      - PROTOBUF_FIELD_OFFSET(SectionWithPosition, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata SectionWithPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto[2]);
}
// ===================================================================

class SectionSlice::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionSlice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_._has_bits_);
  static const ::minecpp::proto::common::SectionRange& range(const SectionSlice* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::minecpp::proto::common::SectionRange& SectionSlice::_Internal::range(const SectionSlice* msg) {
  return *msg->_impl_.range_;
}
void SectionSlice::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SectionSlice::SectionSlice(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.chunk.SectionSlice)
}
SectionSlice::SectionSlice(const SectionSlice& from) : ::google::protobuf::Message() {
  SectionSlice* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.sections_){from._impl_.sections_},
      decltype(_impl_.range_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.range_ = new ::minecpp::proto::common::SectionRange(*from._impl_.range_);
  }

  // @@protoc_insertion_point(copy_constructor:minecpp.proto.chunk.SectionSlice)
}
inline void SectionSlice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.sections_){arena},
      decltype(_impl_.range_){nullptr},
  };
}
SectionSlice::~SectionSlice() {
  // @@protoc_insertion_point(destructor:minecpp.proto.chunk.SectionSlice)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SectionSlice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_;
}
void SectionSlice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SectionSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.chunk.SectionSlice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sections()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SectionSlice::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SectionSlice::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SectionSlice_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .minecpp.proto.chunk.SectionWithPosition sections = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_.sections_)}},
    // .minecpp.proto.common.SectionRange range = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_.range_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .minecpp.proto.common.SectionRange range = 1;
    {PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_.range_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .minecpp.proto.chunk.SectionWithPosition sections = 2;
    {PROTOBUF_FIELD_OFFSET(SectionSlice, _impl_.sections_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::minecpp::proto::common::SectionRange>()},
    {::_pbi::TcParser::GetTable<::minecpp::proto::chunk::SectionWithPosition>()},
  }}, {{
  }},
};

::uint8_t* SectionSlice::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.chunk.SectionSlice)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .minecpp.proto.common.SectionRange range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.chunk.SectionWithPosition sections = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.chunk.SectionSlice)
  return target;
}

::size_t SectionSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.chunk.SectionSlice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.chunk.SectionWithPosition sections = 2;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_internal_sections()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .minecpp.proto.common.SectionRange range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SectionSlice::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SectionSlice::MergeImpl
};
const ::google::protobuf::Message::ClassData*SectionSlice::GetClassData() const { return &_class_data_; }


void SectionSlice::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SectionSlice*>(&to_msg);
  auto& from = static_cast<const SectionSlice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.chunk.SectionSlice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sections()->MergeFrom(from._internal_sections());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_range()->::minecpp::proto::common::SectionRange::MergeFrom(
        from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SectionSlice::CopyFrom(const SectionSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.chunk.SectionSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SectionSlice::IsInitialized() const {
  return true;
}

void SectionSlice::InternalSwap(SectionSlice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  swap(_impl_.range_, other->_impl_.range_);
}

::google::protobuf::Metadata SectionSlice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_getter, &descriptor_table_minecpp_2fproto_2fchunk_2fChunk_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fchunk_2fChunk_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace chunk
}  // namespace proto
}  // namespace minecpp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
