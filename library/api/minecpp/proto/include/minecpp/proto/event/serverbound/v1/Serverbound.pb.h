// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/event/serverbound/v1/Serverbound.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <minecpp/proto/common/v1/Common.pb.h>
#include <minecpp/proto/player/v1/Id.pb.h>
#include <minecpp/proto/entity/v1/Entity.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
namespace minecpp {
namespace proto {
namespace event {
namespace serverbound {
namespace v1 {
class AcceptPlayer;
struct AcceptPlayerDefaultTypeInternal;
extern AcceptPlayerDefaultTypeInternal _AcceptPlayer_default_instance_;
class AnimateHand;
struct AnimateHandDefaultTypeInternal;
extern AnimateHandDefaultTypeInternal _AnimateHand_default_instance_;
class BlockPlacement;
struct BlockPlacementDefaultTypeInternal;
extern BlockPlacementDefaultTypeInternal _BlockPlacement_default_instance_;
class ChangeHeldItem;
struct ChangeHeldItemDefaultTypeInternal;
extern ChangeHeldItemDefaultTypeInternal _ChangeHeldItem_default_instance_;
class ChangeInventoryItem;
struct ChangeInventoryItemDefaultTypeInternal;
extern ChangeInventoryItemDefaultTypeInternal _ChangeInventoryItem_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class IssueCommand;
struct IssueCommandDefaultTypeInternal;
extern IssueCommandDefaultTypeInternal _IssueCommand_default_instance_;
class LoadInitialChunks;
struct LoadInitialChunksDefaultTypeInternal;
extern LoadInitialChunksDefaultTypeInternal _LoadInitialChunks_default_instance_;
class PlayerDigging;
struct PlayerDiggingDefaultTypeInternal;
extern PlayerDiggingDefaultTypeInternal _PlayerDigging_default_instance_;
class RemovePlayer;
struct RemovePlayerDefaultTypeInternal;
extern RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
class SetPlayerPosition;
struct SetPlayerPositionDefaultTypeInternal;
extern SetPlayerPositionDefaultTypeInternal _SetPlayerPosition_default_instance_;
class SetPlayerRotation;
struct SetPlayerRotationDefaultTypeInternal;
extern SetPlayerRotationDefaultTypeInternal _SetPlayerRotation_default_instance_;
class UpdatePing;
struct UpdatePingDefaultTypeInternal;
extern UpdatePingDefaultTypeInternal _UpdatePing_default_instance_;
}  // namespace v1
}  // namespace serverbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::proto::event::serverbound::v1::AcceptPlayer* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::AcceptPlayer>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::AnimateHand* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::AnimateHand>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::BlockPlacement* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::BlockPlacement>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::ChangeHeldItem* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::ChangeHeldItem>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::ChangeInventoryItem* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::ChangeInventoryItem>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::ChatMessage* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::ChatMessage>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::Event* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::Event>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::IssueCommand* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::IssueCommand>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::LoadInitialChunks* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::LoadInitialChunks>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::PlayerDigging* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::PlayerDigging>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::RemovePlayer* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::RemovePlayer>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::SetPlayerPosition* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::SetPlayerPosition>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::SetPlayerRotation* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::SetPlayerRotation>(Arena*);
template<> ::minecpp::proto::event::serverbound::v1::UpdatePing* Arena::CreateMaybeMessage<::minecpp::proto::event::serverbound::v1::UpdatePing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace proto {
namespace event {
namespace serverbound {
namespace v1 {

// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // .google.protobuf.Any payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_payload();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(::PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::PROTOBUF_NAMESPACE_ID::Any* payload);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_payload();

  // .minecpp.proto.player.v1.PlayerId player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::minecpp::proto::player::v1::PlayerId& player_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::v1::PlayerId* release_player_id();
  ::minecpp::proto::player::v1::PlayerId* mutable_player_id();
  void set_allocated_player_id(::minecpp::proto::player::v1::PlayerId* player_id);
  private:
  const ::minecpp::proto::player::v1::PlayerId& _internal_player_id() const;
  ::minecpp::proto::player::v1::PlayerId* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::minecpp::proto::player::v1::PlayerId* player_id);
  ::minecpp::proto::player::v1::PlayerId* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Any* payload_;
    ::minecpp::proto::player::v1::PlayerId* player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class AcceptPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.AcceptPlayer) */ {
 public:
  inline AcceptPlayer() : AcceptPlayer(nullptr) {}
  ~AcceptPlayer() override;
  explicit PROTOBUF_CONSTEXPR AcceptPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptPlayer(const AcceptPlayer& from);
  AcceptPlayer(AcceptPlayer&& from) noexcept
    : AcceptPlayer() {
    *this = ::std::move(from);
  }

  inline AcceptPlayer& operator=(const AcceptPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptPlayer& operator=(AcceptPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptPlayer* internal_default_instance() {
    return reinterpret_cast<const AcceptPlayer*>(
               &_AcceptPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AcceptPlayer& a, AcceptPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcceptPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AcceptPlayer& from) {
    AcceptPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.AcceptPlayer";
  }
  protected:
  explicit AcceptPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChallengeIdFieldNumber = 2,
    kFrontIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 challenge_id = 2;
  void clear_challenge_id();
  uint32_t challenge_id() const;
  void set_challenge_id(uint32_t value);
  private:
  uint32_t _internal_challenge_id() const;
  void _internal_set_challenge_id(uint32_t value);
  public:

  // uint32 front_id = 3;
  void clear_front_id();
  uint32_t front_id() const;
  void set_front_id(uint32_t value);
  private:
  uint32_t _internal_front_id() const;
  void _internal_set_front_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.AcceptPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t challenge_id_;
    uint32_t front_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class SetPlayerPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.SetPlayerPosition) */ {
 public:
  inline SetPlayerPosition() : SetPlayerPosition(nullptr) {}
  ~SetPlayerPosition() override;
  explicit PROTOBUF_CONSTEXPR SetPlayerPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPlayerPosition(const SetPlayerPosition& from);
  SetPlayerPosition(SetPlayerPosition&& from) noexcept
    : SetPlayerPosition() {
    *this = ::std::move(from);
  }

  inline SetPlayerPosition& operator=(const SetPlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlayerPosition& operator=(SetPlayerPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPlayerPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPlayerPosition* internal_default_instance() {
    return reinterpret_cast<const SetPlayerPosition*>(
               &_SetPlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetPlayerPosition& a, SetPlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlayerPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPlayerPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPlayerPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPlayerPosition& from) {
    SetPlayerPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlayerPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.SetPlayerPosition";
  }
  protected:
  explicit SetPlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .minecpp.proto.entity.v1.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::minecpp::proto::entity::v1::Position& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::entity::v1::Position* release_position();
  ::minecpp::proto::entity::v1::Position* mutable_position();
  void set_allocated_position(::minecpp::proto::entity::v1::Position* position);
  private:
  const ::minecpp::proto::entity::v1::Position& _internal_position() const;
  ::minecpp::proto::entity::v1::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::entity::v1::Position* position);
  ::minecpp::proto::entity::v1::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.SetPlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::entity::v1::Position* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class SetPlayerRotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.SetPlayerRotation) */ {
 public:
  inline SetPlayerRotation() : SetPlayerRotation(nullptr) {}
  ~SetPlayerRotation() override;
  explicit PROTOBUF_CONSTEXPR SetPlayerRotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPlayerRotation(const SetPlayerRotation& from);
  SetPlayerRotation(SetPlayerRotation&& from) noexcept
    : SetPlayerRotation() {
    *this = ::std::move(from);
  }

  inline SetPlayerRotation& operator=(const SetPlayerRotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlayerRotation& operator=(SetPlayerRotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPlayerRotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPlayerRotation* internal_default_instance() {
    return reinterpret_cast<const SetPlayerRotation*>(
               &_SetPlayerRotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetPlayerRotation& a, SetPlayerRotation& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlayerRotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPlayerRotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPlayerRotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPlayerRotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPlayerRotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPlayerRotation& from) {
    SetPlayerRotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlayerRotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.SetPlayerRotation";
  }
  protected:
  explicit SetPlayerRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
  };
  // .minecpp.proto.entity.v1.Rotation rotation = 1;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::minecpp::proto::entity::v1::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::minecpp::proto::entity::v1::Rotation* release_rotation();
  ::minecpp::proto::entity::v1::Rotation* mutable_rotation();
  void set_allocated_rotation(::minecpp::proto::entity::v1::Rotation* rotation);
  private:
  const ::minecpp::proto::entity::v1::Rotation& _internal_rotation() const;
  ::minecpp::proto::entity::v1::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minecpp::proto::entity::v1::Rotation* rotation);
  ::minecpp::proto::entity::v1::Rotation* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.SetPlayerRotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::entity::v1::Rotation* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.RemovePlayer) */ {
 public:
  inline RemovePlayer() : RemovePlayer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemovePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemovePlayer(const RemovePlayer& from);
  RemovePlayer(RemovePlayer&& from) noexcept
    : RemovePlayer() {
    *this = ::std::move(from);
  }

  inline RemovePlayer& operator=(const RemovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayer& operator=(RemovePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemovePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemovePlayer* internal_default_instance() {
    return reinterpret_cast<const RemovePlayer*>(
               &_RemovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemovePlayer& a, RemovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemovePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemovePlayer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemovePlayer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.RemovePlayer";
  }
  protected:
  explicit RemovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.RemovePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class PlayerDigging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.PlayerDigging) */ {
 public:
  inline PlayerDigging() : PlayerDigging(nullptr) {}
  ~PlayerDigging() override;
  explicit PROTOBUF_CONSTEXPR PlayerDigging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDigging(const PlayerDigging& from);
  PlayerDigging(PlayerDigging&& from) noexcept
    : PlayerDigging() {
    *this = ::std::move(from);
  }

  inline PlayerDigging& operator=(const PlayerDigging& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDigging& operator=(PlayerDigging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDigging& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDigging* internal_default_instance() {
    return reinterpret_cast<const PlayerDigging*>(
               &_PlayerDigging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerDigging& a, PlayerDigging& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDigging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDigging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDigging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDigging>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDigging& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDigging& from) {
    PlayerDigging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDigging* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.PlayerDigging";
  }
  protected:
  explicit PlayerDigging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockPositionFieldNumber = 2,
    kStateFieldNumber = 1,
    kFaceFieldNumber = 3,
    kSequenceIdFieldNumber = 4,
  };
  // .minecpp.proto.common.v1.BlockPosition block_position = 2;
  bool has_block_position() const;
  private:
  bool _internal_has_block_position() const;
  public:
  void clear_block_position();
  const ::minecpp::proto::common::v1::BlockPosition& block_position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::BlockPosition* release_block_position();
  ::minecpp::proto::common::v1::BlockPosition* mutable_block_position();
  void set_allocated_block_position(::minecpp::proto::common::v1::BlockPosition* block_position);
  private:
  const ::minecpp::proto::common::v1::BlockPosition& _internal_block_position() const;
  ::minecpp::proto::common::v1::BlockPosition* _internal_mutable_block_position();
  public:
  void unsafe_arena_set_allocated_block_position(
      ::minecpp::proto::common::v1::BlockPosition* block_position);
  ::minecpp::proto::common::v1::BlockPosition* unsafe_arena_release_block_position();

  // .minecpp.proto.common.v1.PlayerDiggingState state = 1;
  void clear_state();
  ::minecpp::proto::common::v1::PlayerDiggingState state() const;
  void set_state(::minecpp::proto::common::v1::PlayerDiggingState value);
  private:
  ::minecpp::proto::common::v1::PlayerDiggingState _internal_state() const;
  void _internal_set_state(::minecpp::proto::common::v1::PlayerDiggingState value);
  public:

  // .minecpp.proto.common.v1.Face face = 3;
  void clear_face();
  ::minecpp::proto::common::v1::Face face() const;
  void set_face(::minecpp::proto::common::v1::Face value);
  private:
  ::minecpp::proto::common::v1::Face _internal_face() const;
  void _internal_set_face(::minecpp::proto::common::v1::Face value);
  public:

  // int32 sequence_id = 4;
  void clear_sequence_id();
  int32_t sequence_id() const;
  void set_sequence_id(int32_t value);
  private:
  int32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.PlayerDigging)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::BlockPosition* block_position_;
    int state_;
    int face_;
    int32_t sequence_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class UpdatePing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.UpdatePing) */ {
 public:
  inline UpdatePing() : UpdatePing(nullptr) {}
  ~UpdatePing() override;
  explicit PROTOBUF_CONSTEXPR UpdatePing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePing(const UpdatePing& from);
  UpdatePing(UpdatePing&& from) noexcept
    : UpdatePing() {
    *this = ::std::move(from);
  }

  inline UpdatePing& operator=(const UpdatePing& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePing& operator=(UpdatePing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePing& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePing* internal_default_instance() {
    return reinterpret_cast<const UpdatePing*>(
               &_UpdatePing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdatePing& a, UpdatePing& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePing& from) {
    UpdatePing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.UpdatePing";
  }
  protected:
  explicit UpdatePing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 1,
  };
  // int32 ping = 1;
  void clear_ping();
  int32_t ping() const;
  void set_ping(int32_t value);
  private:
  int32_t _internal_ping() const;
  void _internal_set_ping(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.UpdatePing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t ping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class AnimateHand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.AnimateHand) */ {
 public:
  inline AnimateHand() : AnimateHand(nullptr) {}
  ~AnimateHand() override;
  explicit PROTOBUF_CONSTEXPR AnimateHand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnimateHand(const AnimateHand& from);
  AnimateHand(AnimateHand&& from) noexcept
    : AnimateHand() {
    *this = ::std::move(from);
  }

  inline AnimateHand& operator=(const AnimateHand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimateHand& operator=(AnimateHand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimateHand& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimateHand* internal_default_instance() {
    return reinterpret_cast<const AnimateHand*>(
               &_AnimateHand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnimateHand& a, AnimateHand& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimateHand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimateHand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimateHand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnimateHand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnimateHand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnimateHand& from) {
    AnimateHand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimateHand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.AnimateHand";
  }
  protected:
  explicit AnimateHand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandFieldNumber = 1,
  };
  // int32 hand = 1;
  void clear_hand();
  int32_t hand() const;
  void set_hand(int32_t value);
  private:
  int32_t _internal_hand() const;
  void _internal_set_hand(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.AnimateHand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t hand_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class LoadInitialChunks final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.LoadInitialChunks) */ {
 public:
  inline LoadInitialChunks() : LoadInitialChunks(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LoadInitialChunks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadInitialChunks(const LoadInitialChunks& from);
  LoadInitialChunks(LoadInitialChunks&& from) noexcept
    : LoadInitialChunks() {
    *this = ::std::move(from);
  }

  inline LoadInitialChunks& operator=(const LoadInitialChunks& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadInitialChunks& operator=(LoadInitialChunks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadInitialChunks& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadInitialChunks* internal_default_instance() {
    return reinterpret_cast<const LoadInitialChunks*>(
               &_LoadInitialChunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoadInitialChunks& a, LoadInitialChunks& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadInitialChunks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadInitialChunks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadInitialChunks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadInitialChunks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LoadInitialChunks& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LoadInitialChunks& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.LoadInitialChunks";
  }
  protected:
  explicit LoadInitialChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.LoadInitialChunks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class BlockPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.BlockPlacement) */ {
 public:
  inline BlockPlacement() : BlockPlacement(nullptr) {}
  ~BlockPlacement() override;
  explicit PROTOBUF_CONSTEXPR BlockPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockPlacement(const BlockPlacement& from);
  BlockPlacement(BlockPlacement&& from) noexcept
    : BlockPlacement() {
    *this = ::std::move(from);
  }

  inline BlockPlacement& operator=(const BlockPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPlacement& operator=(BlockPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockPlacement* internal_default_instance() {
    return reinterpret_cast<const BlockPlacement*>(
               &_BlockPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockPlacement& a, BlockPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockPlacement& from) {
    BlockPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.BlockPlacement";
  }
  protected:
  explicit BlockPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kCrosshairFieldNumber = 4,
    kHandFieldNumber = 1,
    kFaceFieldNumber = 3,
    kInsideBlockFieldNumber = 5,
    kSequenceIdFieldNumber = 6,
  };
  // .minecpp.proto.common.v1.BlockPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::minecpp::proto::common::v1::BlockPosition& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::BlockPosition* release_position();
  ::minecpp::proto::common::v1::BlockPosition* mutable_position();
  void set_allocated_position(::minecpp::proto::common::v1::BlockPosition* position);
  private:
  const ::minecpp::proto::common::v1::BlockPosition& _internal_position() const;
  ::minecpp::proto::common::v1::BlockPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::common::v1::BlockPosition* position);
  ::minecpp::proto::common::v1::BlockPosition* unsafe_arena_release_position();

  // .minecpp.proto.common.v1.Vector3f crosshair = 4;
  bool has_crosshair() const;
  private:
  bool _internal_has_crosshair() const;
  public:
  void clear_crosshair();
  const ::minecpp::proto::common::v1::Vector3f& crosshair() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::Vector3f* release_crosshair();
  ::minecpp::proto::common::v1::Vector3f* mutable_crosshair();
  void set_allocated_crosshair(::minecpp::proto::common::v1::Vector3f* crosshair);
  private:
  const ::minecpp::proto::common::v1::Vector3f& _internal_crosshair() const;
  ::minecpp::proto::common::v1::Vector3f* _internal_mutable_crosshair();
  public:
  void unsafe_arena_set_allocated_crosshair(
      ::minecpp::proto::common::v1::Vector3f* crosshair);
  ::minecpp::proto::common::v1::Vector3f* unsafe_arena_release_crosshair();

  // int32 hand = 1;
  void clear_hand();
  int32_t hand() const;
  void set_hand(int32_t value);
  private:
  int32_t _internal_hand() const;
  void _internal_set_hand(int32_t value);
  public:

  // .minecpp.proto.common.v1.Face face = 3;
  void clear_face();
  ::minecpp::proto::common::v1::Face face() const;
  void set_face(::minecpp::proto::common::v1::Face value);
  private:
  ::minecpp::proto::common::v1::Face _internal_face() const;
  void _internal_set_face(::minecpp::proto::common::v1::Face value);
  public:

  // bool inside_block = 5;
  void clear_inside_block();
  bool inside_block() const;
  void set_inside_block(bool value);
  private:
  bool _internal_inside_block() const;
  void _internal_set_inside_block(bool value);
  public:

  // int32 sequence_id = 6;
  void clear_sequence_id();
  int32_t sequence_id() const;
  void set_sequence_id(int32_t value);
  private:
  int32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.BlockPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::BlockPosition* position_;
    ::minecpp::proto::common::v1::Vector3f* crosshair_;
    int32_t hand_;
    int face_;
    bool inside_block_;
    int32_t sequence_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class ChangeInventoryItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.ChangeInventoryItem) */ {
 public:
  inline ChangeInventoryItem() : ChangeInventoryItem(nullptr) {}
  ~ChangeInventoryItem() override;
  explicit PROTOBUF_CONSTEXPR ChangeInventoryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeInventoryItem(const ChangeInventoryItem& from);
  ChangeInventoryItem(ChangeInventoryItem&& from) noexcept
    : ChangeInventoryItem() {
    *this = ::std::move(from);
  }

  inline ChangeInventoryItem& operator=(const ChangeInventoryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeInventoryItem& operator=(ChangeInventoryItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeInventoryItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeInventoryItem* internal_default_instance() {
    return reinterpret_cast<const ChangeInventoryItem*>(
               &_ChangeInventoryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChangeInventoryItem& a, ChangeInventoryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeInventoryItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeInventoryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeInventoryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeInventoryItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeInventoryItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeInventoryItem& from) {
    ChangeInventoryItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeInventoryItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.ChangeInventoryItem";
  }
  protected:
  explicit ChangeInventoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kSlotIdFieldNumber = 1,
    kItemCountFieldNumber = 3,
  };
  // .minecpp.proto.common.v1.ItemId item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  const ::minecpp::proto::common::v1::ItemId& item_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::ItemId* release_item_id();
  ::minecpp::proto::common::v1::ItemId* mutable_item_id();
  void set_allocated_item_id(::minecpp::proto::common::v1::ItemId* item_id);
  private:
  const ::minecpp::proto::common::v1::ItemId& _internal_item_id() const;
  ::minecpp::proto::common::v1::ItemId* _internal_mutable_item_id();
  public:
  void unsafe_arena_set_allocated_item_id(
      ::minecpp::proto::common::v1::ItemId* item_id);
  ::minecpp::proto::common::v1::ItemId* unsafe_arena_release_item_id();

  // int32 slot_id = 1;
  void clear_slot_id();
  int32_t slot_id() const;
  void set_slot_id(int32_t value);
  private:
  int32_t _internal_slot_id() const;
  void _internal_set_slot_id(int32_t value);
  public:

  // int32 item_count = 3;
  void clear_item_count();
  int32_t item_count() const;
  void set_item_count(int32_t value);
  private:
  int32_t _internal_item_count() const;
  void _internal_set_item_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.ChangeInventoryItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::ItemId* item_id_;
    int32_t slot_id_;
    int32_t item_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class ChangeHeldItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.ChangeHeldItem) */ {
 public:
  inline ChangeHeldItem() : ChangeHeldItem(nullptr) {}
  ~ChangeHeldItem() override;
  explicit PROTOBUF_CONSTEXPR ChangeHeldItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeHeldItem(const ChangeHeldItem& from);
  ChangeHeldItem(ChangeHeldItem&& from) noexcept
    : ChangeHeldItem() {
    *this = ::std::move(from);
  }

  inline ChangeHeldItem& operator=(const ChangeHeldItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeHeldItem& operator=(ChangeHeldItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeHeldItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeHeldItem* internal_default_instance() {
    return reinterpret_cast<const ChangeHeldItem*>(
               &_ChangeHeldItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChangeHeldItem& a, ChangeHeldItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeHeldItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeHeldItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeHeldItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeHeldItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeHeldItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeHeldItem& from) {
    ChangeHeldItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeHeldItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.ChangeHeldItem";
  }
  protected:
  explicit ChangeHeldItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // int32 slot = 1;
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.ChangeHeldItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t slot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// -------------------------------------------------------------------

class IssueCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.event.serverbound.v1.IssueCommand) */ {
 public:
  inline IssueCommand() : IssueCommand(nullptr) {}
  ~IssueCommand() override;
  explicit PROTOBUF_CONSTEXPR IssueCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IssueCommand(const IssueCommand& from);
  IssueCommand(IssueCommand&& from) noexcept
    : IssueCommand() {
    *this = ::std::move(from);
  }

  inline IssueCommand& operator=(const IssueCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline IssueCommand& operator=(IssueCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IssueCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const IssueCommand* internal_default_instance() {
    return reinterpret_cast<const IssueCommand*>(
               &_IssueCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IssueCommand& a, IssueCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(IssueCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IssueCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IssueCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IssueCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IssueCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IssueCommand& from) {
    IssueCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IssueCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.event.serverbound.v1.IssueCommand";
  }
  protected:
  explicit IssueCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.event.serverbound.v1.IssueCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .google.protobuf.Any payload = 1;
inline bool Event::_internal_has_payload() const {
  return this != internal_default_instance() && _impl_.payload_ != nullptr;
}
inline bool Event::has_payload() const {
  return _internal_has_payload();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Event::_internal_payload() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Event::payload() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.Event.payload)
  return _internal_payload();
}
inline void Event::unsafe_arena_set_allocated_payload(
    ::PROTOBUF_NAMESPACE_ID::Any* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.Event.payload)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Event::release_payload() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Event::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.Event.payload)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Event::_internal_mutable_payload() {
  
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Event::mutable_payload() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.Event.payload)
  return _msg;
}
inline void Event::set_allocated_payload(::PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.Event.payload)
}

// .minecpp.proto.player.v1.PlayerId player_id = 2;
inline bool Event::_internal_has_player_id() const {
  return this != internal_default_instance() && _impl_.player_id_ != nullptr;
}
inline bool Event::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::minecpp::proto::player::v1::PlayerId& Event::_internal_player_id() const {
  const ::minecpp::proto::player::v1::PlayerId* p = _impl_.player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::v1::PlayerId&>(
      ::minecpp::proto::player::v1::_PlayerId_default_instance_);
}
inline const ::minecpp::proto::player::v1::PlayerId& Event::player_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.Event.player_id)
  return _internal_player_id();
}
inline void Event::unsafe_arena_set_allocated_player_id(
    ::minecpp::proto::player::v1::PlayerId* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_id_);
  }
  _impl_.player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.Event.player_id)
}
inline ::minecpp::proto::player::v1::PlayerId* Event::release_player_id() {
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.player_id_;
  _impl_.player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Event::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.Event.player_id)
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.player_id_;
  _impl_.player_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Event::_internal_mutable_player_id() {
  
  if (_impl_.player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::v1::PlayerId>(GetArenaForAllocation());
    _impl_.player_id_ = p;
  }
  return _impl_.player_id_;
}
inline ::minecpp::proto::player::v1::PlayerId* Event::mutable_player_id() {
  ::minecpp::proto::player::v1::PlayerId* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.Event.player_id)
  return _msg;
}
inline void Event::set_allocated_player_id(::minecpp::proto::player::v1::PlayerId* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.Event.player_id)
}

// -------------------------------------------------------------------

// AcceptPlayer

// string name = 1;
inline void AcceptPlayer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AcceptPlayer::name() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.AcceptPlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcceptPlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.AcceptPlayer.name)
}
inline std::string* AcceptPlayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.AcceptPlayer.name)
  return _s;
}
inline const std::string& AcceptPlayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AcceptPlayer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AcceptPlayer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AcceptPlayer::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.AcceptPlayer.name)
  return _impl_.name_.Release();
}
inline void AcceptPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.AcceptPlayer.name)
}

// uint32 challenge_id = 2;
inline void AcceptPlayer::clear_challenge_id() {
  _impl_.challenge_id_ = 0u;
}
inline uint32_t AcceptPlayer::_internal_challenge_id() const {
  return _impl_.challenge_id_;
}
inline uint32_t AcceptPlayer::challenge_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.AcceptPlayer.challenge_id)
  return _internal_challenge_id();
}
inline void AcceptPlayer::_internal_set_challenge_id(uint32_t value) {
  
  _impl_.challenge_id_ = value;
}
inline void AcceptPlayer::set_challenge_id(uint32_t value) {
  _internal_set_challenge_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.AcceptPlayer.challenge_id)
}

// uint32 front_id = 3;
inline void AcceptPlayer::clear_front_id() {
  _impl_.front_id_ = 0u;
}
inline uint32_t AcceptPlayer::_internal_front_id() const {
  return _impl_.front_id_;
}
inline uint32_t AcceptPlayer::front_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.AcceptPlayer.front_id)
  return _internal_front_id();
}
inline void AcceptPlayer::_internal_set_front_id(uint32_t value) {
  
  _impl_.front_id_ = value;
}
inline void AcceptPlayer::set_front_id(uint32_t value) {
  _internal_set_front_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.AcceptPlayer.front_id)
}

// -------------------------------------------------------------------

// SetPlayerPosition

// .minecpp.proto.entity.v1.Position position = 1;
inline bool SetPlayerPosition::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool SetPlayerPosition::has_position() const {
  return _internal_has_position();
}
inline const ::minecpp::proto::entity::v1::Position& SetPlayerPosition::_internal_position() const {
  const ::minecpp::proto::entity::v1::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::entity::v1::Position&>(
      ::minecpp::proto::entity::v1::_Position_default_instance_);
}
inline const ::minecpp::proto::entity::v1::Position& SetPlayerPosition::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.SetPlayerPosition.position)
  return _internal_position();
}
inline void SetPlayerPosition::unsafe_arena_set_allocated_position(
    ::minecpp::proto::entity::v1::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.SetPlayerPosition.position)
}
inline ::minecpp::proto::entity::v1::Position* SetPlayerPosition::release_position() {
  
  ::minecpp::proto::entity::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::entity::v1::Position* SetPlayerPosition::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.SetPlayerPosition.position)
  
  ::minecpp::proto::entity::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::entity::v1::Position* SetPlayerPosition::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::entity::v1::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::entity::v1::Position* SetPlayerPosition::mutable_position() {
  ::minecpp::proto::entity::v1::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.SetPlayerPosition.position)
  return _msg;
}
inline void SetPlayerPosition::set_allocated_position(::minecpp::proto::entity::v1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.SetPlayerPosition.position)
}

// -------------------------------------------------------------------

// SetPlayerRotation

// .minecpp.proto.entity.v1.Rotation rotation = 1;
inline bool SetPlayerRotation::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool SetPlayerRotation::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::minecpp::proto::entity::v1::Rotation& SetPlayerRotation::_internal_rotation() const {
  const ::minecpp::proto::entity::v1::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::entity::v1::Rotation&>(
      ::minecpp::proto::entity::v1::_Rotation_default_instance_);
}
inline const ::minecpp::proto::entity::v1::Rotation& SetPlayerRotation::rotation() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.SetPlayerRotation.rotation)
  return _internal_rotation();
}
inline void SetPlayerRotation::unsafe_arena_set_allocated_rotation(
    ::minecpp::proto::entity::v1::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.SetPlayerRotation.rotation)
}
inline ::minecpp::proto::entity::v1::Rotation* SetPlayerRotation::release_rotation() {
  
  ::minecpp::proto::entity::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::entity::v1::Rotation* SetPlayerRotation::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.SetPlayerRotation.rotation)
  
  ::minecpp::proto::entity::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::minecpp::proto::entity::v1::Rotation* SetPlayerRotation::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::entity::v1::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::minecpp::proto::entity::v1::Rotation* SetPlayerRotation::mutable_rotation() {
  ::minecpp::proto::entity::v1::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.SetPlayerRotation.rotation)
  return _msg;
}
inline void SetPlayerRotation::set_allocated_rotation(::minecpp::proto::entity::v1::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.SetPlayerRotation.rotation)
}

// -------------------------------------------------------------------

// ChatMessage

// string message = 1;
inline void ChatMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.ChatMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_message() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.ChatMessage.message)
  return _impl_.message_.Release();
}
inline void ChatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.ChatMessage.message)
}

// -------------------------------------------------------------------

// RemovePlayer

// -------------------------------------------------------------------

// PlayerDigging

// .minecpp.proto.common.v1.PlayerDiggingState state = 1;
inline void PlayerDigging::clear_state() {
  _impl_.state_ = 0;
}
inline ::minecpp::proto::common::v1::PlayerDiggingState PlayerDigging::_internal_state() const {
  return static_cast< ::minecpp::proto::common::v1::PlayerDiggingState >(_impl_.state_);
}
inline ::minecpp::proto::common::v1::PlayerDiggingState PlayerDigging::state() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.PlayerDigging.state)
  return _internal_state();
}
inline void PlayerDigging::_internal_set_state(::minecpp::proto::common::v1::PlayerDiggingState value) {
  
  _impl_.state_ = value;
}
inline void PlayerDigging::set_state(::minecpp::proto::common::v1::PlayerDiggingState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.PlayerDigging.state)
}

// .minecpp.proto.common.v1.BlockPosition block_position = 2;
inline bool PlayerDigging::_internal_has_block_position() const {
  return this != internal_default_instance() && _impl_.block_position_ != nullptr;
}
inline bool PlayerDigging::has_block_position() const {
  return _internal_has_block_position();
}
inline const ::minecpp::proto::common::v1::BlockPosition& PlayerDigging::_internal_block_position() const {
  const ::minecpp::proto::common::v1::BlockPosition* p = _impl_.block_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::BlockPosition&>(
      ::minecpp::proto::common::v1::_BlockPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::BlockPosition& PlayerDigging::block_position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.PlayerDigging.block_position)
  return _internal_block_position();
}
inline void PlayerDigging::unsafe_arena_set_allocated_block_position(
    ::minecpp::proto::common::v1::BlockPosition* block_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_position_);
  }
  _impl_.block_position_ = block_position;
  if (block_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.PlayerDigging.block_position)
}
inline ::minecpp::proto::common::v1::BlockPosition* PlayerDigging::release_block_position() {
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.block_position_;
  _impl_.block_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* PlayerDigging::unsafe_arena_release_block_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.PlayerDigging.block_position)
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.block_position_;
  _impl_.block_position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* PlayerDigging::_internal_mutable_block_position() {
  
  if (_impl_.block_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::BlockPosition>(GetArenaForAllocation());
    _impl_.block_position_ = p;
  }
  return _impl_.block_position_;
}
inline ::minecpp::proto::common::v1::BlockPosition* PlayerDigging::mutable_block_position() {
  ::minecpp::proto::common::v1::BlockPosition* _msg = _internal_mutable_block_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.PlayerDigging.block_position)
  return _msg;
}
inline void PlayerDigging::set_allocated_block_position(::minecpp::proto::common::v1::BlockPosition* block_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_position_);
  }
  if (block_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_position));
    if (message_arena != submessage_arena) {
      block_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.block_position_ = block_position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.PlayerDigging.block_position)
}

// .minecpp.proto.common.v1.Face face = 3;
inline void PlayerDigging::clear_face() {
  _impl_.face_ = 0;
}
inline ::minecpp::proto::common::v1::Face PlayerDigging::_internal_face() const {
  return static_cast< ::minecpp::proto::common::v1::Face >(_impl_.face_);
}
inline ::minecpp::proto::common::v1::Face PlayerDigging::face() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.PlayerDigging.face)
  return _internal_face();
}
inline void PlayerDigging::_internal_set_face(::minecpp::proto::common::v1::Face value) {
  
  _impl_.face_ = value;
}
inline void PlayerDigging::set_face(::minecpp::proto::common::v1::Face value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.PlayerDigging.face)
}

// int32 sequence_id = 4;
inline void PlayerDigging::clear_sequence_id() {
  _impl_.sequence_id_ = 0;
}
inline int32_t PlayerDigging::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline int32_t PlayerDigging::sequence_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.PlayerDigging.sequence_id)
  return _internal_sequence_id();
}
inline void PlayerDigging::_internal_set_sequence_id(int32_t value) {
  
  _impl_.sequence_id_ = value;
}
inline void PlayerDigging::set_sequence_id(int32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.PlayerDigging.sequence_id)
}

// -------------------------------------------------------------------

// UpdatePing

// int32 ping = 1;
inline void UpdatePing::clear_ping() {
  _impl_.ping_ = 0;
}
inline int32_t UpdatePing::_internal_ping() const {
  return _impl_.ping_;
}
inline int32_t UpdatePing::ping() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.UpdatePing.ping)
  return _internal_ping();
}
inline void UpdatePing::_internal_set_ping(int32_t value) {
  
  _impl_.ping_ = value;
}
inline void UpdatePing::set_ping(int32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.UpdatePing.ping)
}

// -------------------------------------------------------------------

// AnimateHand

// int32 hand = 1;
inline void AnimateHand::clear_hand() {
  _impl_.hand_ = 0;
}
inline int32_t AnimateHand::_internal_hand() const {
  return _impl_.hand_;
}
inline int32_t AnimateHand::hand() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.AnimateHand.hand)
  return _internal_hand();
}
inline void AnimateHand::_internal_set_hand(int32_t value) {
  
  _impl_.hand_ = value;
}
inline void AnimateHand::set_hand(int32_t value) {
  _internal_set_hand(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.AnimateHand.hand)
}

// -------------------------------------------------------------------

// LoadInitialChunks

// -------------------------------------------------------------------

// BlockPlacement

// int32 hand = 1;
inline void BlockPlacement::clear_hand() {
  _impl_.hand_ = 0;
}
inline int32_t BlockPlacement::_internal_hand() const {
  return _impl_.hand_;
}
inline int32_t BlockPlacement::hand() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.hand)
  return _internal_hand();
}
inline void BlockPlacement::_internal_set_hand(int32_t value) {
  
  _impl_.hand_ = value;
}
inline void BlockPlacement::set_hand(int32_t value) {
  _internal_set_hand(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.BlockPlacement.hand)
}

// .minecpp.proto.common.v1.BlockPosition position = 2;
inline bool BlockPlacement::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool BlockPlacement::has_position() const {
  return _internal_has_position();
}
inline const ::minecpp::proto::common::v1::BlockPosition& BlockPlacement::_internal_position() const {
  const ::minecpp::proto::common::v1::BlockPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::BlockPosition&>(
      ::minecpp::proto::common::v1::_BlockPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::BlockPosition& BlockPlacement::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.position)
  return _internal_position();
}
inline void BlockPlacement::unsafe_arena_set_allocated_position(
    ::minecpp::proto::common::v1::BlockPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.BlockPlacement.position)
}
inline ::minecpp::proto::common::v1::BlockPosition* BlockPlacement::release_position() {
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* BlockPlacement::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.BlockPlacement.position)
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* BlockPlacement::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::BlockPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::v1::BlockPosition* BlockPlacement::mutable_position() {
  ::minecpp::proto::common::v1::BlockPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.BlockPlacement.position)
  return _msg;
}
inline void BlockPlacement::set_allocated_position(::minecpp::proto::common::v1::BlockPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.BlockPlacement.position)
}

// .minecpp.proto.common.v1.Face face = 3;
inline void BlockPlacement::clear_face() {
  _impl_.face_ = 0;
}
inline ::minecpp::proto::common::v1::Face BlockPlacement::_internal_face() const {
  return static_cast< ::minecpp::proto::common::v1::Face >(_impl_.face_);
}
inline ::minecpp::proto::common::v1::Face BlockPlacement::face() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.face)
  return _internal_face();
}
inline void BlockPlacement::_internal_set_face(::minecpp::proto::common::v1::Face value) {
  
  _impl_.face_ = value;
}
inline void BlockPlacement::set_face(::minecpp::proto::common::v1::Face value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.BlockPlacement.face)
}

// .minecpp.proto.common.v1.Vector3f crosshair = 4;
inline bool BlockPlacement::_internal_has_crosshair() const {
  return this != internal_default_instance() && _impl_.crosshair_ != nullptr;
}
inline bool BlockPlacement::has_crosshair() const {
  return _internal_has_crosshair();
}
inline const ::minecpp::proto::common::v1::Vector3f& BlockPlacement::_internal_crosshair() const {
  const ::minecpp::proto::common::v1::Vector3f* p = _impl_.crosshair_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::Vector3f&>(
      ::minecpp::proto::common::v1::_Vector3f_default_instance_);
}
inline const ::minecpp::proto::common::v1::Vector3f& BlockPlacement::crosshair() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.crosshair)
  return _internal_crosshair();
}
inline void BlockPlacement::unsafe_arena_set_allocated_crosshair(
    ::minecpp::proto::common::v1::Vector3f* crosshair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crosshair_);
  }
  _impl_.crosshair_ = crosshair;
  if (crosshair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.BlockPlacement.crosshair)
}
inline ::minecpp::proto::common::v1::Vector3f* BlockPlacement::release_crosshair() {
  
  ::minecpp::proto::common::v1::Vector3f* temp = _impl_.crosshair_;
  _impl_.crosshair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::Vector3f* BlockPlacement::unsafe_arena_release_crosshair() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.BlockPlacement.crosshair)
  
  ::minecpp::proto::common::v1::Vector3f* temp = _impl_.crosshair_;
  _impl_.crosshair_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::Vector3f* BlockPlacement::_internal_mutable_crosshair() {
  
  if (_impl_.crosshair_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::Vector3f>(GetArenaForAllocation());
    _impl_.crosshair_ = p;
  }
  return _impl_.crosshair_;
}
inline ::minecpp::proto::common::v1::Vector3f* BlockPlacement::mutable_crosshair() {
  ::minecpp::proto::common::v1::Vector3f* _msg = _internal_mutable_crosshair();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.BlockPlacement.crosshair)
  return _msg;
}
inline void BlockPlacement::set_allocated_crosshair(::minecpp::proto::common::v1::Vector3f* crosshair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.crosshair_);
  }
  if (crosshair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crosshair));
    if (message_arena != submessage_arena) {
      crosshair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosshair, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.crosshair_ = crosshair;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.BlockPlacement.crosshair)
}

// bool inside_block = 5;
inline void BlockPlacement::clear_inside_block() {
  _impl_.inside_block_ = false;
}
inline bool BlockPlacement::_internal_inside_block() const {
  return _impl_.inside_block_;
}
inline bool BlockPlacement::inside_block() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.inside_block)
  return _internal_inside_block();
}
inline void BlockPlacement::_internal_set_inside_block(bool value) {
  
  _impl_.inside_block_ = value;
}
inline void BlockPlacement::set_inside_block(bool value) {
  _internal_set_inside_block(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.BlockPlacement.inside_block)
}

// int32 sequence_id = 6;
inline void BlockPlacement::clear_sequence_id() {
  _impl_.sequence_id_ = 0;
}
inline int32_t BlockPlacement::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline int32_t BlockPlacement::sequence_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.BlockPlacement.sequence_id)
  return _internal_sequence_id();
}
inline void BlockPlacement::_internal_set_sequence_id(int32_t value) {
  
  _impl_.sequence_id_ = value;
}
inline void BlockPlacement::set_sequence_id(int32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.BlockPlacement.sequence_id)
}

// -------------------------------------------------------------------

// ChangeInventoryItem

// int32 slot_id = 1;
inline void ChangeInventoryItem::clear_slot_id() {
  _impl_.slot_id_ = 0;
}
inline int32_t ChangeInventoryItem::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline int32_t ChangeInventoryItem::slot_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.slot_id)
  return _internal_slot_id();
}
inline void ChangeInventoryItem::_internal_set_slot_id(int32_t value) {
  
  _impl_.slot_id_ = value;
}
inline void ChangeInventoryItem::set_slot_id(int32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.slot_id)
}

// .minecpp.proto.common.v1.ItemId item_id = 2;
inline bool ChangeInventoryItem::_internal_has_item_id() const {
  return this != internal_default_instance() && _impl_.item_id_ != nullptr;
}
inline bool ChangeInventoryItem::has_item_id() const {
  return _internal_has_item_id();
}
inline const ::minecpp::proto::common::v1::ItemId& ChangeInventoryItem::_internal_item_id() const {
  const ::minecpp::proto::common::v1::ItemId* p = _impl_.item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::ItemId&>(
      ::minecpp::proto::common::v1::_ItemId_default_instance_);
}
inline const ::minecpp::proto::common::v1::ItemId& ChangeInventoryItem::item_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_id)
  return _internal_item_id();
}
inline void ChangeInventoryItem::unsafe_arena_set_allocated_item_id(
    ::minecpp::proto::common::v1::ItemId* item_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_);
  }
  _impl_.item_id_ = item_id;
  if (item_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_id)
}
inline ::minecpp::proto::common::v1::ItemId* ChangeInventoryItem::release_item_id() {
  
  ::minecpp::proto::common::v1::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::ItemId* ChangeInventoryItem::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_id)
  
  ::minecpp::proto::common::v1::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::ItemId* ChangeInventoryItem::_internal_mutable_item_id() {
  
  if (_impl_.item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::ItemId>(GetArenaForAllocation());
    _impl_.item_id_ = p;
  }
  return _impl_.item_id_;
}
inline ::minecpp::proto::common::v1::ItemId* ChangeInventoryItem::mutable_item_id() {
  ::minecpp::proto::common::v1::ItemId* _msg = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_id)
  return _msg;
}
inline void ChangeInventoryItem::set_allocated_item_id(::minecpp::proto::common::v1::ItemId* item_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_);
  }
  if (item_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id));
    if (message_arena != submessage_arena) {
      item_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_id_ = item_id;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_id)
}

// int32 item_count = 3;
inline void ChangeInventoryItem::clear_item_count() {
  _impl_.item_count_ = 0;
}
inline int32_t ChangeInventoryItem::_internal_item_count() const {
  return _impl_.item_count_;
}
inline int32_t ChangeInventoryItem::item_count() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_count)
  return _internal_item_count();
}
inline void ChangeInventoryItem::_internal_set_item_count(int32_t value) {
  
  _impl_.item_count_ = value;
}
inline void ChangeInventoryItem::set_item_count(int32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.ChangeInventoryItem.item_count)
}

// -------------------------------------------------------------------

// ChangeHeldItem

// int32 slot = 1;
inline void ChangeHeldItem::clear_slot() {
  _impl_.slot_ = 0;
}
inline int32_t ChangeHeldItem::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t ChangeHeldItem::slot() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.ChangeHeldItem.slot)
  return _internal_slot();
}
inline void ChangeHeldItem::_internal_set_slot(int32_t value) {
  
  _impl_.slot_ = value;
}
inline void ChangeHeldItem::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.ChangeHeldItem.slot)
}

// -------------------------------------------------------------------

// IssueCommand

// string command = 1;
inline void IssueCommand::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& IssueCommand::command() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.event.serverbound.v1.IssueCommand.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IssueCommand::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.event.serverbound.v1.IssueCommand.command)
}
inline std::string* IssueCommand::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.event.serverbound.v1.IssueCommand.command)
  return _s;
}
inline const std::string& IssueCommand::_internal_command() const {
  return _impl_.command_.Get();
}
inline void IssueCommand::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* IssueCommand::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* IssueCommand::release_command() {
  // @@protoc_insertion_point(field_release:minecpp.proto.event.serverbound.v1.IssueCommand.command)
  return _impl_.command_.Release();
}
inline void IssueCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.serverbound.v1.IssueCommand.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace serverbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fevent_2fserverbound_2fv1_2fServerbound_2eproto
