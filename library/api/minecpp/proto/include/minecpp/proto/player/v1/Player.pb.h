// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/player/v1/Player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <minecpp/proto/common/v1/Common.pb.h>
#include <minecpp/proto/entity/v1/Entity.pb.h>
#include <minecpp/proto/player/v1/Id.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
namespace minecpp {
namespace proto {
namespace player {
namespace v1 {
class Abilities;
struct AbilitiesDefaultTypeInternal;
extern AbilitiesDefaultTypeInternal _Abilities_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class RecipeBook;
struct RecipeBookDefaultTypeInternal;
extern RecipeBookDefaultTypeInternal _RecipeBook_default_instance_;
class Slot;
struct SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace v1
}  // namespace player
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::proto::player::v1::Abilities* Arena::CreateMaybeMessage<::minecpp::proto::player::v1::Abilities>(Arena*);
template<> ::minecpp::proto::player::v1::Player* Arena::CreateMaybeMessage<::minecpp::proto::player::v1::Player>(Arena*);
template<> ::minecpp::proto::player::v1::RecipeBook* Arena::CreateMaybeMessage<::minecpp::proto::player::v1::RecipeBook>(Arena*);
template<> ::minecpp::proto::player::v1::Slot* Arena::CreateMaybeMessage<::minecpp::proto::player::v1::Slot>(Arena*);
template<> ::minecpp::proto::player::v1::Status* Arena::CreateMaybeMessage<::minecpp::proto::player::v1::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace proto {
namespace player {
namespace v1 {

// ===================================================================

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.player.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPingFieldNumber = 3,
    kGameModeFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minecpp.proto.player.v1.PlayerId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::minecpp::proto::player::v1::PlayerId& id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::v1::PlayerId* release_id();
  ::minecpp::proto::player::v1::PlayerId* mutable_id();
  void set_allocated_id(::minecpp::proto::player::v1::PlayerId* id);
  private:
  const ::minecpp::proto::player::v1::PlayerId& _internal_id() const;
  ::minecpp::proto::player::v1::PlayerId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::minecpp::proto::player::v1::PlayerId* id);
  ::minecpp::proto::player::v1::PlayerId* unsafe_arena_release_id();

  // int32 ping = 3;
  void clear_ping();
  int32_t ping() const;
  void set_ping(int32_t value);
  private:
  int32_t _internal_ping() const;
  void _internal_set_ping(int32_t value);
  public:

  // .minecpp.proto.common.v1.GameMode game_mode = 4;
  void clear_game_mode();
  ::minecpp::proto::common::v1::GameMode game_mode() const;
  void set_game_mode(::minecpp::proto::common::v1::GameMode value);
  private:
  ::minecpp::proto::common::v1::GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::minecpp::proto::common::v1::GameMode value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.player.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::minecpp::proto::player::v1::PlayerId* id_;
    int32_t ping_;
    int game_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.v1.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.player.v1.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kAbilitiesFieldNumber = 5,
    kRecipeBookFieldNumber = 6,
    kEntityIdFieldNumber = 2,
    kGameModeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .minecpp.proto.entity.v1.Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::minecpp::proto::entity::v1::Position& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::entity::v1::Position* release_position();
  ::minecpp::proto::entity::v1::Position* mutable_position();
  void set_allocated_position(::minecpp::proto::entity::v1::Position* position);
  private:
  const ::minecpp::proto::entity::v1::Position& _internal_position() const;
  ::minecpp::proto::entity::v1::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::entity::v1::Position* position);
  ::minecpp::proto::entity::v1::Position* unsafe_arena_release_position();

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::minecpp::proto::entity::v1::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::minecpp::proto::entity::v1::Rotation* release_rotation();
  ::minecpp::proto::entity::v1::Rotation* mutable_rotation();
  void set_allocated_rotation(::minecpp::proto::entity::v1::Rotation* rotation);
  private:
  const ::minecpp::proto::entity::v1::Rotation& _internal_rotation() const;
  ::minecpp::proto::entity::v1::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minecpp::proto::entity::v1::Rotation* rotation);
  ::minecpp::proto::entity::v1::Rotation* unsafe_arena_release_rotation();

  // .minecpp.proto.player.v1.Abilities abilities = 5;
  bool has_abilities() const;
  private:
  bool _internal_has_abilities() const;
  public:
  void clear_abilities();
  const ::minecpp::proto::player::v1::Abilities& abilities() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::v1::Abilities* release_abilities();
  ::minecpp::proto::player::v1::Abilities* mutable_abilities();
  void set_allocated_abilities(::minecpp::proto::player::v1::Abilities* abilities);
  private:
  const ::minecpp::proto::player::v1::Abilities& _internal_abilities() const;
  ::minecpp::proto::player::v1::Abilities* _internal_mutable_abilities();
  public:
  void unsafe_arena_set_allocated_abilities(
      ::minecpp::proto::player::v1::Abilities* abilities);
  ::minecpp::proto::player::v1::Abilities* unsafe_arena_release_abilities();

  // .minecpp.proto.player.v1.RecipeBook recipe_book = 6;
  bool has_recipe_book() const;
  private:
  bool _internal_has_recipe_book() const;
  public:
  void clear_recipe_book();
  const ::minecpp::proto::player::v1::RecipeBook& recipe_book() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::v1::RecipeBook* release_recipe_book();
  ::minecpp::proto::player::v1::RecipeBook* mutable_recipe_book();
  void set_allocated_recipe_book(::minecpp::proto::player::v1::RecipeBook* recipe_book);
  private:
  const ::minecpp::proto::player::v1::RecipeBook& _internal_recipe_book() const;
  ::minecpp::proto::player::v1::RecipeBook* _internal_mutable_recipe_book();
  public:
  void unsafe_arena_set_allocated_recipe_book(
      ::minecpp::proto::player::v1::RecipeBook* recipe_book);
  ::minecpp::proto::player::v1::RecipeBook* unsafe_arena_release_recipe_book();

  // uint32 entity_id = 2;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // .minecpp.proto.common.v1.GameMode game_mode = 7;
  void clear_game_mode();
  ::minecpp::proto::common::v1::GameMode game_mode() const;
  void set_game_mode(::minecpp::proto::common::v1::GameMode value);
  private:
  ::minecpp::proto::common::v1::GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::minecpp::proto::common::v1::GameMode value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.player.v1.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::minecpp::proto::entity::v1::Position* position_;
    ::minecpp::proto::entity::v1::Rotation* rotation_;
    ::minecpp::proto::player::v1::Abilities* abilities_;
    ::minecpp::proto::player::v1::RecipeBook* recipe_book_;
    uint32_t entity_id_;
    int game_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
};
// -------------------------------------------------------------------

class Abilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.v1.Abilities) */ {
 public:
  inline Abilities() : Abilities(nullptr) {}
  ~Abilities() override;
  explicit PROTOBUF_CONSTEXPR Abilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Abilities(const Abilities& from);
  Abilities(Abilities&& from) noexcept
    : Abilities() {
    *this = ::std::move(from);
  }

  inline Abilities& operator=(const Abilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Abilities& operator=(Abilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Abilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const Abilities* internal_default_instance() {
    return reinterpret_cast<const Abilities*>(
               &_Abilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Abilities& a, Abilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Abilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Abilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Abilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Abilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Abilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Abilities& from) {
    Abilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Abilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.player.v1.Abilities";
  }
  protected:
  explicit Abilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalkSpeedFieldNumber = 1,
    kFlySpeedFieldNumber = 2,
    kFlyingFieldNumber = 3,
    kInstantBuildFieldNumber = 4,
    kInvulnerableFieldNumber = 5,
    kMayBuildFieldNumber = 6,
    kMayFlyFieldNumber = 7,
  };
  // float walk_speed = 1;
  void clear_walk_speed();
  float walk_speed() const;
  void set_walk_speed(float value);
  private:
  float _internal_walk_speed() const;
  void _internal_set_walk_speed(float value);
  public:

  // float fly_speed = 2;
  void clear_fly_speed();
  float fly_speed() const;
  void set_fly_speed(float value);
  private:
  float _internal_fly_speed() const;
  void _internal_set_fly_speed(float value);
  public:

  // bool flying = 3;
  void clear_flying();
  bool flying() const;
  void set_flying(bool value);
  private:
  bool _internal_flying() const;
  void _internal_set_flying(bool value);
  public:

  // bool instant_build = 4;
  void clear_instant_build();
  bool instant_build() const;
  void set_instant_build(bool value);
  private:
  bool _internal_instant_build() const;
  void _internal_set_instant_build(bool value);
  public:

  // bool invulnerable = 5;
  void clear_invulnerable();
  bool invulnerable() const;
  void set_invulnerable(bool value);
  private:
  bool _internal_invulnerable() const;
  void _internal_set_invulnerable(bool value);
  public:

  // bool may_build = 6;
  void clear_may_build();
  bool may_build() const;
  void set_may_build(bool value);
  private:
  bool _internal_may_build() const;
  void _internal_set_may_build(bool value);
  public:

  // bool may_fly = 7;
  void clear_may_fly();
  bool may_fly() const;
  void set_may_fly(bool value);
  private:
  bool _internal_may_fly() const;
  void _internal_set_may_fly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.player.v1.Abilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float walk_speed_;
    float fly_speed_;
    bool flying_;
    bool instant_build_;
    bool invulnerable_;
    bool may_build_;
    bool may_fly_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
};
// -------------------------------------------------------------------

class RecipeBook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.v1.RecipeBook) */ {
 public:
  inline RecipeBook() : RecipeBook(nullptr) {}
  ~RecipeBook() override;
  explicit PROTOBUF_CONSTEXPR RecipeBook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecipeBook(const RecipeBook& from);
  RecipeBook(RecipeBook&& from) noexcept
    : RecipeBook() {
    *this = ::std::move(from);
  }

  inline RecipeBook& operator=(const RecipeBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecipeBook& operator=(RecipeBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecipeBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecipeBook* internal_default_instance() {
    return reinterpret_cast<const RecipeBook*>(
               &_RecipeBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RecipeBook& a, RecipeBook& b) {
    a.Swap(&b);
  }
  inline void Swap(RecipeBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecipeBook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecipeBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecipeBook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecipeBook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecipeBook& from) {
    RecipeBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecipeBook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.player.v1.RecipeBook";
  }
  protected:
  explicit RecipeBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuiOpenFieldNumber = 1,
    kFilteringCraftableFieldNumber = 2,
    kFurnaceGuiOpenFieldNumber = 3,
    kFurnaceFilteringCraftableFieldNumber = 4,
  };
  // bool gui_open = 1;
  void clear_gui_open();
  bool gui_open() const;
  void set_gui_open(bool value);
  private:
  bool _internal_gui_open() const;
  void _internal_set_gui_open(bool value);
  public:

  // bool filtering_craftable = 2;
  void clear_filtering_craftable();
  bool filtering_craftable() const;
  void set_filtering_craftable(bool value);
  private:
  bool _internal_filtering_craftable() const;
  void _internal_set_filtering_craftable(bool value);
  public:

  // bool furnace_gui_open = 3;
  void clear_furnace_gui_open();
  bool furnace_gui_open() const;
  void set_furnace_gui_open(bool value);
  private:
  bool _internal_furnace_gui_open() const;
  void _internal_set_furnace_gui_open(bool value);
  public:

  // bool furnace_filtering_craftable = 4;
  void clear_furnace_filtering_craftable();
  bool furnace_filtering_craftable() const;
  void set_furnace_filtering_craftable(bool value);
  private:
  bool _internal_furnace_filtering_craftable() const;
  void _internal_set_furnace_filtering_craftable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.player.v1.RecipeBook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool gui_open_;
    bool filtering_craftable_;
    bool furnace_gui_open_;
    bool furnace_filtering_craftable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
};
// -------------------------------------------------------------------

class Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.v1.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {}
  ~Slot() override;
  explicit PROTOBUF_CONSTEXPR Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Slot& from) {
    Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.player.v1.Slot";
  }
  protected:
  explicit Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kSlotIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // .minecpp.proto.common.v1.ItemId item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  const ::minecpp::proto::common::v1::ItemId& item_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::ItemId* release_item_id();
  ::minecpp::proto::common::v1::ItemId* mutable_item_id();
  void set_allocated_item_id(::minecpp::proto::common::v1::ItemId* item_id);
  private:
  const ::minecpp::proto::common::v1::ItemId& _internal_item_id() const;
  ::minecpp::proto::common::v1::ItemId* _internal_mutable_item_id();
  public:
  void unsafe_arena_set_allocated_item_id(
      ::minecpp::proto::common::v1::ItemId* item_id);
  ::minecpp::proto::common::v1::ItemId* unsafe_arena_release_item_id();

  // uint32 slot_id = 1;
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.player.v1.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::ItemId* item_id_;
    uint32_t slot_id_;
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// .minecpp.proto.player.v1.PlayerId id = 1;
inline bool Status::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool Status::has_id() const {
  return _internal_has_id();
}
inline const ::minecpp::proto::player::v1::PlayerId& Status::_internal_id() const {
  const ::minecpp::proto::player::v1::PlayerId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::v1::PlayerId&>(
      ::minecpp::proto::player::v1::_PlayerId_default_instance_);
}
inline const ::minecpp::proto::player::v1::PlayerId& Status::id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Status.id)
  return _internal_id();
}
inline void Status::unsafe_arena_set_allocated_id(
    ::minecpp::proto::player::v1::PlayerId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Status.id)
}
inline ::minecpp::proto::player::v1::PlayerId* Status::release_id() {
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Status::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Status.id)
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Status::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::v1::PlayerId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::minecpp::proto::player::v1::PlayerId* Status::mutable_id() {
  ::minecpp::proto::player::v1::PlayerId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Status.id)
  return _msg;
}
inline void Status::set_allocated_id(::minecpp::proto::player::v1::PlayerId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Status.id)
}

// string name = 2;
inline void Status::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Status::name() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Status.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Status.name)
}
inline std::string* Status::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Status.name)
  return _s;
}
inline const std::string& Status::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Status::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Status.name)
  return _impl_.name_.Release();
}
inline void Status::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Status.name)
}

// int32 ping = 3;
inline void Status::clear_ping() {
  _impl_.ping_ = 0;
}
inline int32_t Status::_internal_ping() const {
  return _impl_.ping_;
}
inline int32_t Status::ping() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Status.ping)
  return _internal_ping();
}
inline void Status::_internal_set_ping(int32_t value) {
  
  _impl_.ping_ = value;
}
inline void Status::set_ping(int32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Status.ping)
}

// .minecpp.proto.common.v1.GameMode game_mode = 4;
inline void Status::clear_game_mode() {
  _impl_.game_mode_ = 0;
}
inline ::minecpp::proto::common::v1::GameMode Status::_internal_game_mode() const {
  return static_cast< ::minecpp::proto::common::v1::GameMode >(_impl_.game_mode_);
}
inline ::minecpp::proto::common::v1::GameMode Status::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Status.game_mode)
  return _internal_game_mode();
}
inline void Status::_internal_set_game_mode(::minecpp::proto::common::v1::GameMode value) {
  
  _impl_.game_mode_ = value;
}
inline void Status::set_game_mode(::minecpp::proto::common::v1::GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Status.game_mode)
}

// -------------------------------------------------------------------

// Player

// string name = 1;
inline void Player::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Player.name)
}

// uint32 entity_id = 2;
inline void Player::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t Player::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t Player::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.entity_id)
  return _internal_entity_id();
}
inline void Player::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void Player::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Player.entity_id)
}

// .minecpp.proto.entity.v1.Position position = 3;
inline bool Player::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline const ::minecpp::proto::entity::v1::Position& Player::_internal_position() const {
  const ::minecpp::proto::entity::v1::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::entity::v1::Position&>(
      ::minecpp::proto::entity::v1::_Position_default_instance_);
}
inline const ::minecpp::proto::entity::v1::Position& Player::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::minecpp::proto::entity::v1::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Player.position)
}
inline ::minecpp::proto::entity::v1::Position* Player::release_position() {
  
  ::minecpp::proto::entity::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::entity::v1::Position* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Player.position)
  
  ::minecpp::proto::entity::v1::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::entity::v1::Position* Player::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::entity::v1::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::entity::v1::Position* Player::mutable_position() {
  ::minecpp::proto::entity::v1::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::minecpp::proto::entity::v1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Player.position)
}

// .minecpp.proto.entity.v1.Rotation rotation = 4;
inline bool Player::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Player::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::minecpp::proto::entity::v1::Rotation& Player::_internal_rotation() const {
  const ::minecpp::proto::entity::v1::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::entity::v1::Rotation&>(
      ::minecpp::proto::entity::v1::_Rotation_default_instance_);
}
inline const ::minecpp::proto::entity::v1::Rotation& Player::rotation() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.rotation)
  return _internal_rotation();
}
inline void Player::unsafe_arena_set_allocated_rotation(
    ::minecpp::proto::entity::v1::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Player.rotation)
}
inline ::minecpp::proto::entity::v1::Rotation* Player::release_rotation() {
  
  ::minecpp::proto::entity::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::entity::v1::Rotation* Player::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Player.rotation)
  
  ::minecpp::proto::entity::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::minecpp::proto::entity::v1::Rotation* Player::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::entity::v1::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::minecpp::proto::entity::v1::Rotation* Player::mutable_rotation() {
  ::minecpp::proto::entity::v1::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Player.rotation)
  return _msg;
}
inline void Player::set_allocated_rotation(::minecpp::proto::entity::v1::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Player.rotation)
}

// .minecpp.proto.player.v1.Abilities abilities = 5;
inline bool Player::_internal_has_abilities() const {
  return this != internal_default_instance() && _impl_.abilities_ != nullptr;
}
inline bool Player::has_abilities() const {
  return _internal_has_abilities();
}
inline void Player::clear_abilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.abilities_ != nullptr) {
    delete _impl_.abilities_;
  }
  _impl_.abilities_ = nullptr;
}
inline const ::minecpp::proto::player::v1::Abilities& Player::_internal_abilities() const {
  const ::minecpp::proto::player::v1::Abilities* p = _impl_.abilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::v1::Abilities&>(
      ::minecpp::proto::player::v1::_Abilities_default_instance_);
}
inline const ::minecpp::proto::player::v1::Abilities& Player::abilities() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.abilities)
  return _internal_abilities();
}
inline void Player::unsafe_arena_set_allocated_abilities(
    ::minecpp::proto::player::v1::Abilities* abilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.abilities_);
  }
  _impl_.abilities_ = abilities;
  if (abilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Player.abilities)
}
inline ::minecpp::proto::player::v1::Abilities* Player::release_abilities() {
  
  ::minecpp::proto::player::v1::Abilities* temp = _impl_.abilities_;
  _impl_.abilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::player::v1::Abilities* Player::unsafe_arena_release_abilities() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Player.abilities)
  
  ::minecpp::proto::player::v1::Abilities* temp = _impl_.abilities_;
  _impl_.abilities_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::v1::Abilities* Player::_internal_mutable_abilities() {
  
  if (_impl_.abilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::v1::Abilities>(GetArenaForAllocation());
    _impl_.abilities_ = p;
  }
  return _impl_.abilities_;
}
inline ::minecpp::proto::player::v1::Abilities* Player::mutable_abilities() {
  ::minecpp::proto::player::v1::Abilities* _msg = _internal_mutable_abilities();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Player.abilities)
  return _msg;
}
inline void Player::set_allocated_abilities(::minecpp::proto::player::v1::Abilities* abilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.abilities_;
  }
  if (abilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(abilities);
    if (message_arena != submessage_arena) {
      abilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abilities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.abilities_ = abilities;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Player.abilities)
}

// .minecpp.proto.player.v1.RecipeBook recipe_book = 6;
inline bool Player::_internal_has_recipe_book() const {
  return this != internal_default_instance() && _impl_.recipe_book_ != nullptr;
}
inline bool Player::has_recipe_book() const {
  return _internal_has_recipe_book();
}
inline void Player::clear_recipe_book() {
  if (GetArenaForAllocation() == nullptr && _impl_.recipe_book_ != nullptr) {
    delete _impl_.recipe_book_;
  }
  _impl_.recipe_book_ = nullptr;
}
inline const ::minecpp::proto::player::v1::RecipeBook& Player::_internal_recipe_book() const {
  const ::minecpp::proto::player::v1::RecipeBook* p = _impl_.recipe_book_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::v1::RecipeBook&>(
      ::minecpp::proto::player::v1::_RecipeBook_default_instance_);
}
inline const ::minecpp::proto::player::v1::RecipeBook& Player::recipe_book() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.recipe_book)
  return _internal_recipe_book();
}
inline void Player::unsafe_arena_set_allocated_recipe_book(
    ::minecpp::proto::player::v1::RecipeBook* recipe_book) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipe_book_);
  }
  _impl_.recipe_book_ = recipe_book;
  if (recipe_book) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Player.recipe_book)
}
inline ::minecpp::proto::player::v1::RecipeBook* Player::release_recipe_book() {
  
  ::minecpp::proto::player::v1::RecipeBook* temp = _impl_.recipe_book_;
  _impl_.recipe_book_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::player::v1::RecipeBook* Player::unsafe_arena_release_recipe_book() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Player.recipe_book)
  
  ::minecpp::proto::player::v1::RecipeBook* temp = _impl_.recipe_book_;
  _impl_.recipe_book_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::v1::RecipeBook* Player::_internal_mutable_recipe_book() {
  
  if (_impl_.recipe_book_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::v1::RecipeBook>(GetArenaForAllocation());
    _impl_.recipe_book_ = p;
  }
  return _impl_.recipe_book_;
}
inline ::minecpp::proto::player::v1::RecipeBook* Player::mutable_recipe_book() {
  ::minecpp::proto::player::v1::RecipeBook* _msg = _internal_mutable_recipe_book();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Player.recipe_book)
  return _msg;
}
inline void Player::set_allocated_recipe_book(::minecpp::proto::player::v1::RecipeBook* recipe_book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recipe_book_;
  }
  if (recipe_book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recipe_book);
    if (message_arena != submessage_arena) {
      recipe_book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipe_book, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recipe_book_ = recipe_book;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Player.recipe_book)
}

// .minecpp.proto.common.v1.GameMode game_mode = 7;
inline void Player::clear_game_mode() {
  _impl_.game_mode_ = 0;
}
inline ::minecpp::proto::common::v1::GameMode Player::_internal_game_mode() const {
  return static_cast< ::minecpp::proto::common::v1::GameMode >(_impl_.game_mode_);
}
inline ::minecpp::proto::common::v1::GameMode Player::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Player.game_mode)
  return _internal_game_mode();
}
inline void Player::_internal_set_game_mode(::minecpp::proto::common::v1::GameMode value) {
  
  _impl_.game_mode_ = value;
}
inline void Player::set_game_mode(::minecpp::proto::common::v1::GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Player.game_mode)
}

// -------------------------------------------------------------------

// Abilities

// float walk_speed = 1;
inline void Abilities::clear_walk_speed() {
  _impl_.walk_speed_ = 0;
}
inline float Abilities::_internal_walk_speed() const {
  return _impl_.walk_speed_;
}
inline float Abilities::walk_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.walk_speed)
  return _internal_walk_speed();
}
inline void Abilities::_internal_set_walk_speed(float value) {
  
  _impl_.walk_speed_ = value;
}
inline void Abilities::set_walk_speed(float value) {
  _internal_set_walk_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.walk_speed)
}

// float fly_speed = 2;
inline void Abilities::clear_fly_speed() {
  _impl_.fly_speed_ = 0;
}
inline float Abilities::_internal_fly_speed() const {
  return _impl_.fly_speed_;
}
inline float Abilities::fly_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.fly_speed)
  return _internal_fly_speed();
}
inline void Abilities::_internal_set_fly_speed(float value) {
  
  _impl_.fly_speed_ = value;
}
inline void Abilities::set_fly_speed(float value) {
  _internal_set_fly_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.fly_speed)
}

// bool flying = 3;
inline void Abilities::clear_flying() {
  _impl_.flying_ = false;
}
inline bool Abilities::_internal_flying() const {
  return _impl_.flying_;
}
inline bool Abilities::flying() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.flying)
  return _internal_flying();
}
inline void Abilities::_internal_set_flying(bool value) {
  
  _impl_.flying_ = value;
}
inline void Abilities::set_flying(bool value) {
  _internal_set_flying(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.flying)
}

// bool instant_build = 4;
inline void Abilities::clear_instant_build() {
  _impl_.instant_build_ = false;
}
inline bool Abilities::_internal_instant_build() const {
  return _impl_.instant_build_;
}
inline bool Abilities::instant_build() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.instant_build)
  return _internal_instant_build();
}
inline void Abilities::_internal_set_instant_build(bool value) {
  
  _impl_.instant_build_ = value;
}
inline void Abilities::set_instant_build(bool value) {
  _internal_set_instant_build(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.instant_build)
}

// bool invulnerable = 5;
inline void Abilities::clear_invulnerable() {
  _impl_.invulnerable_ = false;
}
inline bool Abilities::_internal_invulnerable() const {
  return _impl_.invulnerable_;
}
inline bool Abilities::invulnerable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.invulnerable)
  return _internal_invulnerable();
}
inline void Abilities::_internal_set_invulnerable(bool value) {
  
  _impl_.invulnerable_ = value;
}
inline void Abilities::set_invulnerable(bool value) {
  _internal_set_invulnerable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.invulnerable)
}

// bool may_build = 6;
inline void Abilities::clear_may_build() {
  _impl_.may_build_ = false;
}
inline bool Abilities::_internal_may_build() const {
  return _impl_.may_build_;
}
inline bool Abilities::may_build() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.may_build)
  return _internal_may_build();
}
inline void Abilities::_internal_set_may_build(bool value) {
  
  _impl_.may_build_ = value;
}
inline void Abilities::set_may_build(bool value) {
  _internal_set_may_build(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.may_build)
}

// bool may_fly = 7;
inline void Abilities::clear_may_fly() {
  _impl_.may_fly_ = false;
}
inline bool Abilities::_internal_may_fly() const {
  return _impl_.may_fly_;
}
inline bool Abilities::may_fly() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Abilities.may_fly)
  return _internal_may_fly();
}
inline void Abilities::_internal_set_may_fly(bool value) {
  
  _impl_.may_fly_ = value;
}
inline void Abilities::set_may_fly(bool value) {
  _internal_set_may_fly(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Abilities.may_fly)
}

// -------------------------------------------------------------------

// RecipeBook

// bool gui_open = 1;
inline void RecipeBook::clear_gui_open() {
  _impl_.gui_open_ = false;
}
inline bool RecipeBook::_internal_gui_open() const {
  return _impl_.gui_open_;
}
inline bool RecipeBook::gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.RecipeBook.gui_open)
  return _internal_gui_open();
}
inline void RecipeBook::_internal_set_gui_open(bool value) {
  
  _impl_.gui_open_ = value;
}
inline void RecipeBook::set_gui_open(bool value) {
  _internal_set_gui_open(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.RecipeBook.gui_open)
}

// bool filtering_craftable = 2;
inline void RecipeBook::clear_filtering_craftable() {
  _impl_.filtering_craftable_ = false;
}
inline bool RecipeBook::_internal_filtering_craftable() const {
  return _impl_.filtering_craftable_;
}
inline bool RecipeBook::filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.RecipeBook.filtering_craftable)
  return _internal_filtering_craftable();
}
inline void RecipeBook::_internal_set_filtering_craftable(bool value) {
  
  _impl_.filtering_craftable_ = value;
}
inline void RecipeBook::set_filtering_craftable(bool value) {
  _internal_set_filtering_craftable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.RecipeBook.filtering_craftable)
}

// bool furnace_gui_open = 3;
inline void RecipeBook::clear_furnace_gui_open() {
  _impl_.furnace_gui_open_ = false;
}
inline bool RecipeBook::_internal_furnace_gui_open() const {
  return _impl_.furnace_gui_open_;
}
inline bool RecipeBook::furnace_gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.RecipeBook.furnace_gui_open)
  return _internal_furnace_gui_open();
}
inline void RecipeBook::_internal_set_furnace_gui_open(bool value) {
  
  _impl_.furnace_gui_open_ = value;
}
inline void RecipeBook::set_furnace_gui_open(bool value) {
  _internal_set_furnace_gui_open(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.RecipeBook.furnace_gui_open)
}

// bool furnace_filtering_craftable = 4;
inline void RecipeBook::clear_furnace_filtering_craftable() {
  _impl_.furnace_filtering_craftable_ = false;
}
inline bool RecipeBook::_internal_furnace_filtering_craftable() const {
  return _impl_.furnace_filtering_craftable_;
}
inline bool RecipeBook::furnace_filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.RecipeBook.furnace_filtering_craftable)
  return _internal_furnace_filtering_craftable();
}
inline void RecipeBook::_internal_set_furnace_filtering_craftable(bool value) {
  
  _impl_.furnace_filtering_craftable_ = value;
}
inline void RecipeBook::set_furnace_filtering_craftable(bool value) {
  _internal_set_furnace_filtering_craftable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.RecipeBook.furnace_filtering_craftable)
}

// -------------------------------------------------------------------

// Slot

// uint32 slot_id = 1;
inline void Slot::clear_slot_id() {
  _impl_.slot_id_ = 0u;
}
inline uint32_t Slot::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Slot.slot_id)
  return _internal_slot_id();
}
inline void Slot::_internal_set_slot_id(uint32_t value) {
  
  _impl_.slot_id_ = value;
}
inline void Slot::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Slot.slot_id)
}

// .minecpp.proto.common.v1.ItemId item_id = 2;
inline bool Slot::_internal_has_item_id() const {
  return this != internal_default_instance() && _impl_.item_id_ != nullptr;
}
inline bool Slot::has_item_id() const {
  return _internal_has_item_id();
}
inline const ::minecpp::proto::common::v1::ItemId& Slot::_internal_item_id() const {
  const ::minecpp::proto::common::v1::ItemId* p = _impl_.item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::ItemId&>(
      ::minecpp::proto::common::v1::_ItemId_default_instance_);
}
inline const ::minecpp::proto::common::v1::ItemId& Slot::item_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Slot.item_id)
  return _internal_item_id();
}
inline void Slot::unsafe_arena_set_allocated_item_id(
    ::minecpp::proto::common::v1::ItemId* item_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_);
  }
  _impl_.item_id_ = item_id;
  if (item_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.v1.Slot.item_id)
}
inline ::minecpp::proto::common::v1::ItemId* Slot::release_item_id() {
  
  ::minecpp::proto::common::v1::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::ItemId* Slot::unsafe_arena_release_item_id() {
  // @@protoc_insertion_point(field_release:minecpp.proto.player.v1.Slot.item_id)
  
  ::minecpp::proto::common::v1::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::ItemId* Slot::_internal_mutable_item_id() {
  
  if (_impl_.item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::ItemId>(GetArenaForAllocation());
    _impl_.item_id_ = p;
  }
  return _impl_.item_id_;
}
inline ::minecpp::proto::common::v1::ItemId* Slot::mutable_item_id() {
  ::minecpp::proto::common::v1::ItemId* _msg = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.v1.Slot.item_id)
  return _msg;
}
inline void Slot::set_allocated_item_id(::minecpp::proto::common::v1::ItemId* item_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_);
  }
  if (item_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id));
    if (message_arena != submessage_arena) {
      item_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_id_ = item_id;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.v1.Slot.item_id)
}

// uint32 count = 3;
inline void Slot::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t Slot::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t Slot::count() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.v1.Slot.count)
  return _internal_count();
}
inline void Slot::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void Slot::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.v1.Slot.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace player
}  // namespace proto
}  // namespace minecpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fv1_2fPlayer_2eproto
