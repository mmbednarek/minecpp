// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/player/Player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fPlayer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fPlayer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include <minecpp/proto/common/Common.pb.h>
#include <minecpp/proto/player/Id.pb.h>
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fplayer_2fPlayer_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fplayer_2fPlayer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_minecpp_2fproto_2fplayer_2fPlayer_2eproto;
namespace minecpp {
namespace proto {
namespace player {
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class RecipeBook;
struct RecipeBookDefaultTypeInternal;
extern RecipeBookDefaultTypeInternal _RecipeBook_default_instance_;
class Slot;
struct SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace player
}  // namespace proto
}  // namespace minecpp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace minecpp {
namespace proto {
namespace player {

// ===================================================================


// -------------------------------------------------------------------

class Status final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Status(::google::protobuf::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.player.Status";
  }
  protected:
  explicit Status(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPingFieldNumber = 3,
    kGameModeFieldNumber = 4,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .minecpp.proto.player.PlayerId id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::minecpp::proto::player::PlayerId& id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::PlayerId* release_id();
  ::minecpp::proto::player::PlayerId* mutable_id();
  void set_allocated_id(::minecpp::proto::player::PlayerId* value);
  void unsafe_arena_set_allocated_id(::minecpp::proto::player::PlayerId* value);
  ::minecpp::proto::player::PlayerId* unsafe_arena_release_id();

  private:
  const ::minecpp::proto::player::PlayerId& _internal_id() const;
  ::minecpp::proto::player::PlayerId* _internal_mutable_id();

  public:
  // int32 ping = 3;
  void clear_ping() ;
  ::int32_t ping() const;
  void set_ping(::int32_t value);

  private:
  ::int32_t _internal_ping() const;
  void _internal_set_ping(::int32_t value);

  public:
  // .minecpp.proto.common.GameMode game_mode = 4;
  void clear_game_mode() ;
  ::minecpp::proto::common::GameMode game_mode() const;
  void set_game_mode(::minecpp::proto::common::GameMode value);

  private:
  ::minecpp::proto::common::GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::minecpp::proto::common::GameMode value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.player.Status)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::minecpp::proto::player::PlayerId* id_;
    ::int32_t ping_;
    int game_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fPlayer_2eproto;
};// -------------------------------------------------------------------

class RecipeBook final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.RecipeBook) */ {
 public:
  inline RecipeBook() : RecipeBook(nullptr) {}
  ~RecipeBook() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RecipeBook(::google::protobuf::internal::ConstantInitialized);

  RecipeBook(const RecipeBook& from);
  RecipeBook(RecipeBook&& from) noexcept
    : RecipeBook() {
    *this = ::std::move(from);
  }

  inline RecipeBook& operator=(const RecipeBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecipeBook& operator=(RecipeBook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecipeBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecipeBook* internal_default_instance() {
    return reinterpret_cast<const RecipeBook*>(
               &_RecipeBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecipeBook& a, RecipeBook& b) {
    a.Swap(&b);
  }
  inline void Swap(RecipeBook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecipeBook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecipeBook* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecipeBook>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecipeBook& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RecipeBook& from) {
    RecipeBook::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecipeBook* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.player.RecipeBook";
  }
  protected:
  explicit RecipeBook(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuiOpenFieldNumber = 1,
    kFilteringCraftableFieldNumber = 2,
    kFurnaceGuiOpenFieldNumber = 3,
    kFurnaceFilteringCraftableFieldNumber = 4,
  };
  // bool gui_open = 1;
  void clear_gui_open() ;
  bool gui_open() const;
  void set_gui_open(bool value);

  private:
  bool _internal_gui_open() const;
  void _internal_set_gui_open(bool value);

  public:
  // bool filtering_craftable = 2;
  void clear_filtering_craftable() ;
  bool filtering_craftable() const;
  void set_filtering_craftable(bool value);

  private:
  bool _internal_filtering_craftable() const;
  void _internal_set_filtering_craftable(bool value);

  public:
  // bool furnace_gui_open = 3;
  void clear_furnace_gui_open() ;
  bool furnace_gui_open() const;
  void set_furnace_gui_open(bool value);

  private:
  bool _internal_furnace_gui_open() const;
  void _internal_set_furnace_gui_open(bool value);

  public:
  // bool furnace_filtering_craftable = 4;
  void clear_furnace_filtering_craftable() ;
  bool furnace_filtering_craftable() const;
  void set_furnace_filtering_craftable(bool value);

  private:
  bool _internal_furnace_filtering_craftable() const;
  void _internal_set_furnace_filtering_craftable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.player.RecipeBook)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool gui_open_;
    bool filtering_craftable_;
    bool furnace_gui_open_;
    bool furnace_filtering_craftable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fPlayer_2eproto;
};// -------------------------------------------------------------------

class Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Player(::google::protobuf::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.player.Player";
  }
  protected:
  explicit Player(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRecipeBookFieldNumber = 4,
    kEntityIdFieldNumber = 3,
    kGameModeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .minecpp.proto.player.PlayerId id = 1;
  bool has_id() const;
  void clear_id() ;
  const ::minecpp::proto::player::PlayerId& id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::PlayerId* release_id();
  ::minecpp::proto::player::PlayerId* mutable_id();
  void set_allocated_id(::minecpp::proto::player::PlayerId* value);
  void unsafe_arena_set_allocated_id(::minecpp::proto::player::PlayerId* value);
  ::minecpp::proto::player::PlayerId* unsafe_arena_release_id();

  private:
  const ::minecpp::proto::player::PlayerId& _internal_id() const;
  ::minecpp::proto::player::PlayerId* _internal_mutable_id();

  public:
  // .minecpp.proto.player.RecipeBook recipe_book = 4;
  bool has_recipe_book() const;
  void clear_recipe_book() ;
  const ::minecpp::proto::player::RecipeBook& recipe_book() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::RecipeBook* release_recipe_book();
  ::minecpp::proto::player::RecipeBook* mutable_recipe_book();
  void set_allocated_recipe_book(::minecpp::proto::player::RecipeBook* value);
  void unsafe_arena_set_allocated_recipe_book(::minecpp::proto::player::RecipeBook* value);
  ::minecpp::proto::player::RecipeBook* unsafe_arena_release_recipe_book();

  private:
  const ::minecpp::proto::player::RecipeBook& _internal_recipe_book() const;
  ::minecpp::proto::player::RecipeBook* _internal_mutable_recipe_book();

  public:
  // uint32 entity_id = 3;
  void clear_entity_id() ;
  ::uint32_t entity_id() const;
  void set_entity_id(::uint32_t value);

  private:
  ::uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(::uint32_t value);

  public:
  // .minecpp.proto.common.GameMode game_mode = 5;
  void clear_game_mode() ;
  ::minecpp::proto::common::GameMode game_mode() const;
  void set_game_mode(::minecpp::proto::common::GameMode value);

  private:
  ::minecpp::proto::common::GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::minecpp::proto::common::GameMode value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.player.Player)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::minecpp::proto::player::PlayerId* id_;
    ::minecpp::proto::player::RecipeBook* recipe_book_;
    ::uint32_t entity_id_;
    int game_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fPlayer_2eproto;
};// -------------------------------------------------------------------

class Slot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.player.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {}
  ~Slot() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Slot(::google::protobuf::internal::ConstantInitialized);

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slot* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Slot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Slot& from) {
    Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.player.Slot";
  }
  protected:
  explicit Slot(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kSlotIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // .minecpp.proto.common.ItemId item_id = 2;
  bool has_item_id() const;
  void clear_item_id() ;
  const ::minecpp::proto::common::ItemId& item_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::ItemId* release_item_id();
  ::minecpp::proto::common::ItemId* mutable_item_id();
  void set_allocated_item_id(::minecpp::proto::common::ItemId* value);
  void unsafe_arena_set_allocated_item_id(::minecpp::proto::common::ItemId* value);
  ::minecpp::proto::common::ItemId* unsafe_arena_release_item_id();

  private:
  const ::minecpp::proto::common::ItemId& _internal_item_id() const;
  ::minecpp::proto::common::ItemId* _internal_mutable_item_id();

  public:
  // uint32 slot_id = 1;
  void clear_slot_id() ;
  ::uint32_t slot_id() const;
  void set_slot_id(::uint32_t value);

  private:
  ::uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(::uint32_t value);

  public:
  // uint32 count = 3;
  void clear_count() ;
  ::uint32_t count() const;
  void set_count(::uint32_t value);

  private:
  ::uint32_t _internal_count() const;
  void _internal_set_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.player.Slot)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::minecpp::proto::common::ItemId* item_id_;
    ::uint32_t slot_id_;
    ::uint32_t count_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fplayer_2fPlayer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Status

// .minecpp.proto.player.PlayerId id = 1;
inline bool Status::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline const ::minecpp::proto::player::PlayerId& Status::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::player::PlayerId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::PlayerId&>(::minecpp::proto::player::_PlayerId_default_instance_);
}
inline const ::minecpp::proto::player::PlayerId& Status::id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Status.id)
  return _internal_id();
}
inline void Status::unsafe_arena_set_allocated_id(::minecpp::proto::player::PlayerId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.Status.id)
}
inline ::minecpp::proto::player::PlayerId* Status::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::player::PlayerId* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::player::PlayerId* Status::unsafe_arena_release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Status.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::player::PlayerId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::PlayerId* Status::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::PlayerId>(GetArenaForAllocation());
    _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(p);
  }
  return _impl_.id_;
}
inline ::minecpp::proto::player::PlayerId* Status::mutable_id() {
  ::minecpp::proto::player::PlayerId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Status.id)
  return _msg;
}
inline void Status::set_allocated_id(::minecpp::proto::player::PlayerId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Status.id)
}

// string name = 2;
inline void Status::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Status::name() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Status.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Status.name)
}
inline std::string* Status::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Status.name)
  return _s;
}
inline const std::string& Status::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Status::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Status::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Status.name)
  return _impl_.name_.Release();
}
inline void Status::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Status.name)
}

// int32 ping = 3;
inline void Status::clear_ping() {
  _impl_.ping_ = 0;
}
inline ::int32_t Status::ping() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Status.ping)
  return _internal_ping();
}
inline void Status::set_ping(::int32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Status.ping)
}
inline ::int32_t Status::_internal_ping() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ping_;
}
inline void Status::_internal_set_ping(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ping_ = value;
}

// .minecpp.proto.common.GameMode game_mode = 4;
inline void Status::clear_game_mode() {
  _impl_.game_mode_ = 0;
}
inline ::minecpp::proto::common::GameMode Status::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Status.game_mode)
  return _internal_game_mode();
}
inline void Status::set_game_mode(::minecpp::proto::common::GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Status.game_mode)
}
inline ::minecpp::proto::common::GameMode Status::_internal_game_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::GameMode>(_impl_.game_mode_);
}
inline void Status::_internal_set_game_mode(::minecpp::proto::common::GameMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_mode_ = value;
}

// -------------------------------------------------------------------

// RecipeBook

// bool gui_open = 1;
inline void RecipeBook::clear_gui_open() {
  _impl_.gui_open_ = false;
}
inline bool RecipeBook::gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.RecipeBook.gui_open)
  return _internal_gui_open();
}
inline void RecipeBook::set_gui_open(bool value) {
  _internal_set_gui_open(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.RecipeBook.gui_open)
}
inline bool RecipeBook::_internal_gui_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gui_open_;
}
inline void RecipeBook::_internal_set_gui_open(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gui_open_ = value;
}

// bool filtering_craftable = 2;
inline void RecipeBook::clear_filtering_craftable() {
  _impl_.filtering_craftable_ = false;
}
inline bool RecipeBook::filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.RecipeBook.filtering_craftable)
  return _internal_filtering_craftable();
}
inline void RecipeBook::set_filtering_craftable(bool value) {
  _internal_set_filtering_craftable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.RecipeBook.filtering_craftable)
}
inline bool RecipeBook::_internal_filtering_craftable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filtering_craftable_;
}
inline void RecipeBook::_internal_set_filtering_craftable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filtering_craftable_ = value;
}

// bool furnace_gui_open = 3;
inline void RecipeBook::clear_furnace_gui_open() {
  _impl_.furnace_gui_open_ = false;
}
inline bool RecipeBook::furnace_gui_open() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.RecipeBook.furnace_gui_open)
  return _internal_furnace_gui_open();
}
inline void RecipeBook::set_furnace_gui_open(bool value) {
  _internal_set_furnace_gui_open(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.RecipeBook.furnace_gui_open)
}
inline bool RecipeBook::_internal_furnace_gui_open() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.furnace_gui_open_;
}
inline void RecipeBook::_internal_set_furnace_gui_open(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.furnace_gui_open_ = value;
}

// bool furnace_filtering_craftable = 4;
inline void RecipeBook::clear_furnace_filtering_craftable() {
  _impl_.furnace_filtering_craftable_ = false;
}
inline bool RecipeBook::furnace_filtering_craftable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.RecipeBook.furnace_filtering_craftable)
  return _internal_furnace_filtering_craftable();
}
inline void RecipeBook::set_furnace_filtering_craftable(bool value) {
  _internal_set_furnace_filtering_craftable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.RecipeBook.furnace_filtering_craftable)
}
inline bool RecipeBook::_internal_furnace_filtering_craftable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.furnace_filtering_craftable_;
}
inline void RecipeBook::_internal_set_furnace_filtering_craftable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.furnace_filtering_craftable_ = value;
}

// -------------------------------------------------------------------

// Player

// .minecpp.proto.player.PlayerId id = 1;
inline bool Player::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline const ::minecpp::proto::player::PlayerId& Player::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::player::PlayerId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::PlayerId&>(::minecpp::proto::player::_PlayerId_default_instance_);
}
inline const ::minecpp::proto::player::PlayerId& Player::id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Player.id)
  return _internal_id();
}
inline void Player::unsafe_arena_set_allocated_id(::minecpp::proto::player::PlayerId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.Player.id)
}
inline ::minecpp::proto::player::PlayerId* Player::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::player::PlayerId* released = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::player::PlayerId* Player::unsafe_arena_release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Player.id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::player::PlayerId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::PlayerId* Player::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::PlayerId>(GetArenaForAllocation());
    _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(p);
  }
  return _impl_.id_;
}
inline ::minecpp::proto::player::PlayerId* Player::mutable_id() {
  ::minecpp::proto::player::PlayerId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Player.id)
  return _msg;
}
inline void Player::set_allocated_id(::minecpp::proto::player::PlayerId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_ = reinterpret_cast<::minecpp::proto::player::PlayerId*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Player.id)
}

// string name = 2;
inline void Player::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Player.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Player::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Player.name)
}

// uint32 entity_id = 3;
inline void Player::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline ::uint32_t Player::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Player.entity_id)
  return _internal_entity_id();
}
inline void Player::set_entity_id(::uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Player.entity_id)
}
inline ::uint32_t Player::_internal_entity_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entity_id_;
}
inline void Player::_internal_set_entity_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.entity_id_ = value;
}

// .minecpp.proto.player.RecipeBook recipe_book = 4;
inline bool Player::has_recipe_book() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recipe_book_ != nullptr);
  return value;
}
inline void Player::clear_recipe_book() {
  if (_impl_.recipe_book_ != nullptr) _impl_.recipe_book_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::minecpp::proto::player::RecipeBook& Player::_internal_recipe_book() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::player::RecipeBook* p = _impl_.recipe_book_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::RecipeBook&>(::minecpp::proto::player::_RecipeBook_default_instance_);
}
inline const ::minecpp::proto::player::RecipeBook& Player::recipe_book() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Player.recipe_book)
  return _internal_recipe_book();
}
inline void Player::unsafe_arena_set_allocated_recipe_book(::minecpp::proto::player::RecipeBook* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.recipe_book_);
  }
  _impl_.recipe_book_ = reinterpret_cast<::minecpp::proto::player::RecipeBook*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.Player.recipe_book)
}
inline ::minecpp::proto::player::RecipeBook* Player::release_recipe_book() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::player::RecipeBook* released = _impl_.recipe_book_;
  _impl_.recipe_book_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::player::RecipeBook* Player::unsafe_arena_release_recipe_book() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Player.recipe_book)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::player::RecipeBook* temp = _impl_.recipe_book_;
  _impl_.recipe_book_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::RecipeBook* Player::_internal_mutable_recipe_book() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.recipe_book_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::RecipeBook>(GetArenaForAllocation());
    _impl_.recipe_book_ = reinterpret_cast<::minecpp::proto::player::RecipeBook*>(p);
  }
  return _impl_.recipe_book_;
}
inline ::minecpp::proto::player::RecipeBook* Player::mutable_recipe_book() {
  ::minecpp::proto::player::RecipeBook* _msg = _internal_mutable_recipe_book();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Player.recipe_book)
  return _msg;
}
inline void Player::set_allocated_recipe_book(::minecpp::proto::player::RecipeBook* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::player::RecipeBook*>(_impl_.recipe_book_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::player::RecipeBook*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.recipe_book_ = reinterpret_cast<::minecpp::proto::player::RecipeBook*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Player.recipe_book)
}

// .minecpp.proto.common.GameMode game_mode = 5;
inline void Player::clear_game_mode() {
  _impl_.game_mode_ = 0;
}
inline ::minecpp::proto::common::GameMode Player::game_mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Player.game_mode)
  return _internal_game_mode();
}
inline void Player::set_game_mode(::minecpp::proto::common::GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Player.game_mode)
}
inline ::minecpp::proto::common::GameMode Player::_internal_game_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::GameMode>(_impl_.game_mode_);
}
inline void Player::_internal_set_game_mode(::minecpp::proto::common::GameMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.game_mode_ = value;
}

// -------------------------------------------------------------------

// Slot

// uint32 slot_id = 1;
inline void Slot::clear_slot_id() {
  _impl_.slot_id_ = 0u;
}
inline ::uint32_t Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Slot.slot_id)
  return _internal_slot_id();
}
inline void Slot::set_slot_id(::uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Slot.slot_id)
}
inline ::uint32_t Slot::_internal_slot_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slot_id_;
}
inline void Slot::_internal_set_slot_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slot_id_ = value;
}

// .minecpp.proto.common.ItemId item_id = 2;
inline bool Slot::has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_id_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::ItemId& Slot::_internal_item_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::ItemId* p = _impl_.item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::ItemId&>(::minecpp::proto::common::_ItemId_default_instance_);
}
inline const ::minecpp::proto::common::ItemId& Slot::item_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Slot.item_id)
  return _internal_item_id();
}
inline void Slot::unsafe_arena_set_allocated_item_id(::minecpp::proto::common::ItemId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.item_id_);
  }
  _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.player.Slot.item_id)
}
inline ::minecpp::proto::common::ItemId* Slot::release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ItemId* released = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::ItemId* Slot::unsafe_arena_release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.player.Slot.item_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::ItemId* Slot::_internal_mutable_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::ItemId>(GetArenaForAllocation());
    _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(p);
  }
  return _impl_.item_id_;
}
inline ::minecpp::proto::common::ItemId* Slot::mutable_item_id() {
  ::minecpp::proto::common::ItemId* _msg = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.player.Slot.item_id)
  return _msg;
}
inline void Slot::set_allocated_item_id(::minecpp::proto::common::ItemId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.item_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.player.Slot.item_id)
}

// uint32 count = 3;
inline void Slot::clear_count() {
  _impl_.count_ = 0u;
}
inline ::uint32_t Slot::count() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.player.Slot.count)
  return _internal_count();
}
inline void Slot::set_count(::uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.player.Slot.count)
}
inline ::uint32_t Slot::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void Slot::_internal_set_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace player
}  // namespace proto
}  // namespace minecpp


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fplayer_2fPlayer_2eproto_2epb_2eh
