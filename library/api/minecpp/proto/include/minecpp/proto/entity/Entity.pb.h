// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/entity/Entity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fEntity_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fEntity_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include <minecpp/proto/common/Common.pb.h>
#include <minecpp/proto/common/Vector.pb.h>
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fentity_2fEntity_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_minecpp_2fproto_2fentity_2fEntity_2eproto;
namespace minecpp {
namespace proto {
namespace entity {
class Abilities;
struct AbilitiesDefaultTypeInternal;
extern AbilitiesDefaultTypeInternal _Abilities_default_instance_;
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class EntityEquipment;
struct EntityEquipmentDefaultTypeInternal;
extern EntityEquipmentDefaultTypeInternal _EntityEquipment_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class PlayerEntity;
struct PlayerEntityDefaultTypeInternal;
extern PlayerEntityDefaultTypeInternal _PlayerEntity_default_instance_;
}  // namespace entity
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template <>
::minecpp::proto::entity::Abilities* Arena::CreateMaybeMessage<::minecpp::proto::entity::Abilities>(Arena*);
template <>
::minecpp::proto::entity::Entity* Arena::CreateMaybeMessage<::minecpp::proto::entity::Entity>(Arena*);
template <>
::minecpp::proto::entity::EntityEquipment* Arena::CreateMaybeMessage<::minecpp::proto::entity::EntityEquipment>(Arena*);
template <>
::minecpp::proto::entity::Metadata* Arena::CreateMaybeMessage<::minecpp::proto::entity::Metadata>(Arena*);
template <>
::minecpp::proto::entity::PlayerEntity* Arena::CreateMaybeMessage<::minecpp::proto::entity::PlayerEntity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace minecpp {
namespace proto {
namespace entity {
enum EquipmentSlot : int {
  MAIN_HAND = 0,
  OFF_HAND = 1,
  BOOTS = 2,
  LEGGINGS = 3,
  CHESTPLATE = 4,
  HELMET = 5,
  EquipmentSlot_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EquipmentSlot_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EquipmentSlot_IsValid(int value);
constexpr EquipmentSlot EquipmentSlot_MIN = static_cast<EquipmentSlot>(0);
constexpr EquipmentSlot EquipmentSlot_MAX = static_cast<EquipmentSlot>(5);
constexpr int EquipmentSlot_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
EquipmentSlot_descriptor();
template <typename T>
const std::string& EquipmentSlot_Name(T value) {
  static_assert(std::is_same<T, EquipmentSlot>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EquipmentSlot_Name().");
  return EquipmentSlot_Name(static_cast<EquipmentSlot>(value));
}
template <>
inline const std::string& EquipmentSlot_Name(EquipmentSlot value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<EquipmentSlot_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EquipmentSlot_Parse(absl::string_view name, EquipmentSlot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EquipmentSlot>(
      EquipmentSlot_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Abilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.Abilities) */ {
 public:
  inline Abilities() : Abilities(nullptr) {}
  ~Abilities() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Abilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Abilities(const Abilities& from);
  Abilities(Abilities&& from) noexcept
    : Abilities() {
    *this = ::std::move(from);
  }

  inline Abilities& operator=(const Abilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Abilities& operator=(Abilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Abilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const Abilities* internal_default_instance() {
    return reinterpret_cast<const Abilities*>(
               &_Abilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Abilities& a, Abilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Abilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Abilities* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Abilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Abilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Abilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Abilities& from) {
    Abilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Abilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.entity.Abilities";
  }
  protected:
  explicit Abilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalkSpeedFieldNumber = 1,
    kFlySpeedFieldNumber = 2,
    kFlyingFieldNumber = 3,
    kInstantBuildFieldNumber = 4,
    kInvulnerableFieldNumber = 5,
    kMayBuildFieldNumber = 6,
    kMayFlyFieldNumber = 7,
  };
  // float walk_speed = 1;
  void clear_walk_speed() ;
  float walk_speed() const;
  void set_walk_speed(float value);

  private:
  float _internal_walk_speed() const;
  void _internal_set_walk_speed(float value);

  public:
  // float fly_speed = 2;
  void clear_fly_speed() ;
  float fly_speed() const;
  void set_fly_speed(float value);

  private:
  float _internal_fly_speed() const;
  void _internal_set_fly_speed(float value);

  public:
  // bool flying = 3;
  void clear_flying() ;
  bool flying() const;
  void set_flying(bool value);

  private:
  bool _internal_flying() const;
  void _internal_set_flying(bool value);

  public:
  // bool instant_build = 4;
  void clear_instant_build() ;
  bool instant_build() const;
  void set_instant_build(bool value);

  private:
  bool _internal_instant_build() const;
  void _internal_set_instant_build(bool value);

  public:
  // bool invulnerable = 5;
  void clear_invulnerable() ;
  bool invulnerable() const;
  void set_invulnerable(bool value);

  private:
  bool _internal_invulnerable() const;
  void _internal_set_invulnerable(bool value);

  public:
  // bool may_build = 6;
  void clear_may_build() ;
  bool may_build() const;
  void set_may_build(bool value);

  private:
  bool _internal_may_build() const;
  void _internal_set_may_build(bool value);

  public:
  // bool may_fly = 7;
  void clear_may_fly() ;
  bool may_fly() const;
  void set_may_fly(bool value);

  private:
  bool _internal_may_fly() const;
  void _internal_set_may_fly(bool value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.Abilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float walk_speed_;
    float fly_speed_;
    bool flying_;
    bool instant_build_;
    bool invulnerable_;
    bool may_build_;
    bool may_fly_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto;
};// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kSlot = 2,
    kByte = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.entity.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kSlotFieldNumber = 2,
    kByteFieldNumber = 3,
  };
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // .minecpp.proto.common.Slot slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;

  public:
  void clear_slot() ;
  const ::minecpp::proto::common::Slot& slot() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Slot* release_slot();
  ::minecpp::proto::common::Slot* mutable_slot();
  void set_allocated_slot(::minecpp::proto::common::Slot* slot);
  private:
  const ::minecpp::proto::common::Slot& _internal_slot() const;
  ::minecpp::proto::common::Slot* _internal_mutable_slot();
  public:
  void unsafe_arena_set_allocated_slot(
      ::minecpp::proto::common::Slot* slot);
  ::minecpp::proto::common::Slot* unsafe_arena_release_slot();
  // uint32 byte = 3;
  bool has_byte() const;
  void clear_byte() ;
  ::uint32_t byte() const;
  void set_byte(::uint32_t value);

  private:
  ::uint32_t _internal_byte() const;
  void _internal_set_byte(::uint32_t value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.Metadata)
 private:
  class _Internal;
  void set_has_slot();
  void set_has_byte();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t index_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::minecpp::proto::common::Slot* slot_;
      ::uint32_t byte_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto;
};// -------------------------------------------------------------------

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entity& from) {
    Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.entity.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 9,
    kUuidFieldNumber = 2,
    kPositionFieldNumber = 4,
    kRotationFieldNumber = 5,
    kVelocityFieldNumber = 8,
    kEntityIdFieldNumber = 1,
    kEntityTypeFieldNumber = 3,
    kHeadYawFieldNumber = 6,
    kDataFieldNumber = 7,
  };
  // repeated .minecpp.proto.entity.Metadata metadata = 9;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::minecpp::proto::entity::Metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::Metadata >*
      mutable_metadata();
  private:
  const ::minecpp::proto::entity::Metadata& _internal_metadata(int index) const;
  ::minecpp::proto::entity::Metadata* _internal_add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::Metadata>& _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::Metadata>* _internal_mutable_metadata();
  public:
  const ::minecpp::proto::entity::Metadata& metadata(int index) const;
  ::minecpp::proto::entity::Metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::Metadata >&
      metadata() const;
  // .minecpp.proto.common.UUID uuid = 2;
  bool has_uuid() const;
  void clear_uuid() ;
  const ::minecpp::proto::common::UUID& uuid() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::UUID* release_uuid();
  ::minecpp::proto::common::UUID* mutable_uuid();
  void set_allocated_uuid(::minecpp::proto::common::UUID* uuid);
  private:
  const ::minecpp::proto::common::UUID& _internal_uuid() const;
  ::minecpp::proto::common::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::minecpp::proto::common::UUID* uuid);
  ::minecpp::proto::common::UUID* unsafe_arena_release_uuid();
  // .minecpp.proto.common.Vector3 position = 4;
  bool has_position() const;
  void clear_position() ;
  const ::minecpp::proto::common::Vector3& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Vector3* release_position();
  ::minecpp::proto::common::Vector3* mutable_position();
  void set_allocated_position(::minecpp::proto::common::Vector3* position);
  private:
  const ::minecpp::proto::common::Vector3& _internal_position() const;
  ::minecpp::proto::common::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::common::Vector3* position);
  ::minecpp::proto::common::Vector3* unsafe_arena_release_position();
  // .minecpp.proto.common.Rotation rotation = 5;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::minecpp::proto::common::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Rotation* release_rotation();
  ::minecpp::proto::common::Rotation* mutable_rotation();
  void set_allocated_rotation(::minecpp::proto::common::Rotation* rotation);
  private:
  const ::minecpp::proto::common::Rotation& _internal_rotation() const;
  ::minecpp::proto::common::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minecpp::proto::common::Rotation* rotation);
  ::minecpp::proto::common::Rotation* unsafe_arena_release_rotation();
  // .minecpp.proto.common.Vector3i velocity = 8;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::minecpp::proto::common::Vector3i& velocity() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Vector3i* release_velocity();
  ::minecpp::proto::common::Vector3i* mutable_velocity();
  void set_allocated_velocity(::minecpp::proto::common::Vector3i* velocity);
  private:
  const ::minecpp::proto::common::Vector3i& _internal_velocity() const;
  ::minecpp::proto::common::Vector3i* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::minecpp::proto::common::Vector3i* velocity);
  ::minecpp::proto::common::Vector3i* unsafe_arena_release_velocity();
  // uint32 entity_id = 1;
  void clear_entity_id() ;
  ::uint32_t entity_id() const;
  void set_entity_id(::uint32_t value);

  private:
  ::uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(::uint32_t value);

  public:
  // uint32 entity_type = 3;
  void clear_entity_type() ;
  ::uint32_t entity_type() const;
  void set_entity_type(::uint32_t value);

  private:
  ::uint32_t _internal_entity_type() const;
  void _internal_set_entity_type(::uint32_t value);

  public:
  // float head_yaw = 6;
  void clear_head_yaw() ;
  float head_yaw() const;
  void set_head_yaw(float value);

  private:
  float _internal_head_yaw() const;
  void _internal_set_head_yaw(float value);

  public:
  // uint32 data = 7;
  void clear_data() ;
  ::uint32_t data() const;
  void set_data(::uint32_t value);

  private:
  ::uint32_t _internal_data() const;
  void _internal_set_data(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::Metadata > metadata_;
    ::minecpp::proto::common::UUID* uuid_;
    ::minecpp::proto::common::Vector3* position_;
    ::minecpp::proto::common::Rotation* rotation_;
    ::minecpp::proto::common::Vector3i* velocity_;
    ::uint32_t entity_id_;
    ::uint32_t entity_type_;
    float head_yaw_;
    ::uint32_t data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto;
};// -------------------------------------------------------------------

class EntityEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.EntityEquipment) */ {
 public:
  inline EntityEquipment() : EntityEquipment(nullptr) {}
  ~EntityEquipment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EntityEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityEquipment(const EntityEquipment& from);
  EntityEquipment(EntityEquipment&& from) noexcept
    : EntityEquipment() {
    *this = ::std::move(from);
  }

  inline EntityEquipment& operator=(const EntityEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityEquipment& operator=(EntityEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityEquipment* internal_default_instance() {
    return reinterpret_cast<const EntityEquipment*>(
               &_EntityEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EntityEquipment& a, EntityEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityEquipment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityEquipment& from) {
    EntityEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.entity.EntityEquipment";
  }
  protected:
  explicit EntityEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kSlotFieldNumber = 1,
  };
  // .minecpp.proto.common.Slot item = 2;
  bool has_item() const;
  void clear_item() ;
  const ::minecpp::proto::common::Slot& item() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Slot* release_item();
  ::minecpp::proto::common::Slot* mutable_item();
  void set_allocated_item(::minecpp::proto::common::Slot* item);
  private:
  const ::minecpp::proto::common::Slot& _internal_item() const;
  ::minecpp::proto::common::Slot* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::minecpp::proto::common::Slot* item);
  ::minecpp::proto::common::Slot* unsafe_arena_release_item();
  // .minecpp.proto.entity.EquipmentSlot slot = 1;
  void clear_slot() ;
  ::minecpp::proto::entity::EquipmentSlot slot() const;
  void set_slot(::minecpp::proto::entity::EquipmentSlot value);

  private:
  ::minecpp::proto::entity::EquipmentSlot _internal_slot() const;
  void _internal_set_slot(::minecpp::proto::entity::EquipmentSlot value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.EntityEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::minecpp::proto::common::Slot* item_;
    int slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto;
};// -------------------------------------------------------------------

class PlayerEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.PlayerEntity) */ {
 public:
  inline PlayerEntity() : PlayerEntity(nullptr) {}
  ~PlayerEntity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerEntity(const PlayerEntity& from);
  PlayerEntity(PlayerEntity&& from) noexcept
    : PlayerEntity() {
    *this = ::std::move(from);
  }

  inline PlayerEntity& operator=(const PlayerEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerEntity& operator=(PlayerEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerEntity* internal_default_instance() {
    return reinterpret_cast<const PlayerEntity*>(
               &_PlayerEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerEntity& a, PlayerEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerEntity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerEntity& from) {
    PlayerEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.entity.PlayerEntity";
  }
  protected:
  explicit PlayerEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentFieldNumber = 6,
    kUuidFieldNumber = 2,
    kPositionFieldNumber = 4,
    kRotationFieldNumber = 5,
    kEntityIdFieldNumber = 1,
  };
  // repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
  int equipment_size() const;
  private:
  int _internal_equipment_size() const;

  public:
  void clear_equipment() ;
  ::minecpp::proto::entity::EntityEquipment* mutable_equipment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::EntityEquipment >*
      mutable_equipment();
  private:
  const ::minecpp::proto::entity::EntityEquipment& _internal_equipment(int index) const;
  ::minecpp::proto::entity::EntityEquipment* _internal_add_equipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::EntityEquipment>& _internal_equipment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::EntityEquipment>* _internal_mutable_equipment();
  public:
  const ::minecpp::proto::entity::EntityEquipment& equipment(int index) const;
  ::minecpp::proto::entity::EntityEquipment* add_equipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::EntityEquipment >&
      equipment() const;
  // .minecpp.proto.common.UUID uuid = 2;
  bool has_uuid() const;
  void clear_uuid() ;
  const ::minecpp::proto::common::UUID& uuid() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::UUID* release_uuid();
  ::minecpp::proto::common::UUID* mutable_uuid();
  void set_allocated_uuid(::minecpp::proto::common::UUID* uuid);
  private:
  const ::minecpp::proto::common::UUID& _internal_uuid() const;
  ::minecpp::proto::common::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::minecpp::proto::common::UUID* uuid);
  ::minecpp::proto::common::UUID* unsafe_arena_release_uuid();
  // .minecpp.proto.common.Vector3 position = 4;
  bool has_position() const;
  void clear_position() ;
  const ::minecpp::proto::common::Vector3& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Vector3* release_position();
  ::minecpp::proto::common::Vector3* mutable_position();
  void set_allocated_position(::minecpp::proto::common::Vector3* position);
  private:
  const ::minecpp::proto::common::Vector3& _internal_position() const;
  ::minecpp::proto::common::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::common::Vector3* position);
  ::minecpp::proto::common::Vector3* unsafe_arena_release_position();
  // .minecpp.proto.common.Rotation rotation = 5;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::minecpp::proto::common::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::Rotation* release_rotation();
  ::minecpp::proto::common::Rotation* mutable_rotation();
  void set_allocated_rotation(::minecpp::proto::common::Rotation* rotation);
  private:
  const ::minecpp::proto::common::Rotation& _internal_rotation() const;
  ::minecpp::proto::common::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minecpp::proto::common::Rotation* rotation);
  ::minecpp::proto::common::Rotation* unsafe_arena_release_rotation();
  // uint32 entity_id = 1;
  void clear_entity_id() ;
  ::uint32_t entity_id() const;
  void set_entity_id(::uint32_t value);

  private:
  ::uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.PlayerEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::EntityEquipment > equipment_;
    ::minecpp::proto::common::UUID* uuid_;
    ::minecpp::proto::common::Vector3* position_;
    ::minecpp::proto::common::Rotation* rotation_;
    ::uint32_t entity_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fEntity_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Abilities

// float walk_speed = 1;
inline void Abilities::clear_walk_speed() {
  _impl_.walk_speed_ = 0;
}
inline float Abilities::walk_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.walk_speed)
  return _internal_walk_speed();
}
inline void Abilities::set_walk_speed(float value) {
  _internal_set_walk_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.walk_speed)
}
inline float Abilities::_internal_walk_speed() const {
  return _impl_.walk_speed_;
}
inline void Abilities::_internal_set_walk_speed(float value) {
  ;
  _impl_.walk_speed_ = value;
}

// float fly_speed = 2;
inline void Abilities::clear_fly_speed() {
  _impl_.fly_speed_ = 0;
}
inline float Abilities::fly_speed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.fly_speed)
  return _internal_fly_speed();
}
inline void Abilities::set_fly_speed(float value) {
  _internal_set_fly_speed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.fly_speed)
}
inline float Abilities::_internal_fly_speed() const {
  return _impl_.fly_speed_;
}
inline void Abilities::_internal_set_fly_speed(float value) {
  ;
  _impl_.fly_speed_ = value;
}

// bool flying = 3;
inline void Abilities::clear_flying() {
  _impl_.flying_ = false;
}
inline bool Abilities::flying() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.flying)
  return _internal_flying();
}
inline void Abilities::set_flying(bool value) {
  _internal_set_flying(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.flying)
}
inline bool Abilities::_internal_flying() const {
  return _impl_.flying_;
}
inline void Abilities::_internal_set_flying(bool value) {
  ;
  _impl_.flying_ = value;
}

// bool instant_build = 4;
inline void Abilities::clear_instant_build() {
  _impl_.instant_build_ = false;
}
inline bool Abilities::instant_build() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.instant_build)
  return _internal_instant_build();
}
inline void Abilities::set_instant_build(bool value) {
  _internal_set_instant_build(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.instant_build)
}
inline bool Abilities::_internal_instant_build() const {
  return _impl_.instant_build_;
}
inline void Abilities::_internal_set_instant_build(bool value) {
  ;
  _impl_.instant_build_ = value;
}

// bool invulnerable = 5;
inline void Abilities::clear_invulnerable() {
  _impl_.invulnerable_ = false;
}
inline bool Abilities::invulnerable() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.invulnerable)
  return _internal_invulnerable();
}
inline void Abilities::set_invulnerable(bool value) {
  _internal_set_invulnerable(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.invulnerable)
}
inline bool Abilities::_internal_invulnerable() const {
  return _impl_.invulnerable_;
}
inline void Abilities::_internal_set_invulnerable(bool value) {
  ;
  _impl_.invulnerable_ = value;
}

// bool may_build = 6;
inline void Abilities::clear_may_build() {
  _impl_.may_build_ = false;
}
inline bool Abilities::may_build() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.may_build)
  return _internal_may_build();
}
inline void Abilities::set_may_build(bool value) {
  _internal_set_may_build(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.may_build)
}
inline bool Abilities::_internal_may_build() const {
  return _impl_.may_build_;
}
inline void Abilities::_internal_set_may_build(bool value) {
  ;
  _impl_.may_build_ = value;
}

// bool may_fly = 7;
inline void Abilities::clear_may_fly() {
  _impl_.may_fly_ = false;
}
inline bool Abilities::may_fly() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Abilities.may_fly)
  return _internal_may_fly();
}
inline void Abilities::set_may_fly(bool value) {
  _internal_set_may_fly(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Abilities.may_fly)
}
inline bool Abilities::_internal_may_fly() const {
  return _impl_.may_fly_;
}
inline void Abilities::_internal_set_may_fly(bool value) {
  ;
  _impl_.may_fly_ = value;
}

// -------------------------------------------------------------------

// Metadata

// uint32 index = 1;
inline void Metadata::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t Metadata::index() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Metadata.index)
  return _internal_index();
}
inline void Metadata::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Metadata.index)
}
inline ::uint32_t Metadata::_internal_index() const {
  return _impl_.index_;
}
inline void Metadata::_internal_set_index(::uint32_t value) {
  ;
  _impl_.index_ = value;
}

// .minecpp.proto.common.Slot slot = 2;
inline bool Metadata::has_slot() const {
  return value_case() == kSlot;
}
inline bool Metadata::_internal_has_slot() const {
  return value_case() == kSlot;
}
inline void Metadata::set_has_slot() {
  _impl_._oneof_case_[0] = kSlot;
}
inline ::minecpp::proto::common::Slot* Metadata::release_slot() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.Metadata.slot)
  if (value_case() == kSlot) {
    clear_has_value();
    ::minecpp::proto::common::Slot* temp = _impl_.value_.slot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.slot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::minecpp::proto::common::Slot& Metadata::_internal_slot() const {
  return value_case() == kSlot
      ? *_impl_.value_.slot_
      : reinterpret_cast<::minecpp::proto::common::Slot&>(::minecpp::proto::common::_Slot_default_instance_);
}
inline const ::minecpp::proto::common::Slot& Metadata::slot() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Metadata.slot)
  return _internal_slot();
}
inline ::minecpp::proto::common::Slot* Metadata::unsafe_arena_release_slot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:minecpp.proto.entity.Metadata.slot)
  if (value_case() == kSlot) {
    clear_has_value();
    ::minecpp::proto::common::Slot* temp = _impl_.value_.slot_;
    _impl_.value_.slot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metadata::unsafe_arena_set_allocated_slot(::minecpp::proto::common::Slot* slot) {
  clear_value();
  if (slot) {
    set_has_slot();
    _impl_.value_.slot_ = slot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.Metadata.slot)
}
inline ::minecpp::proto::common::Slot* Metadata::_internal_mutable_slot() {
  if (value_case() != kSlot) {
    clear_value();
    set_has_slot();
    _impl_.value_.slot_ = CreateMaybeMessage< ::minecpp::proto::common::Slot >(GetArenaForAllocation());
  }
  return _impl_.value_.slot_;
}
inline ::minecpp::proto::common::Slot* Metadata::mutable_slot() {
  ::minecpp::proto::common::Slot* _msg = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Metadata.slot)
  return _msg;
}

// uint32 byte = 3;
inline bool Metadata::has_byte() const {
  return value_case() == kByte;
}
inline void Metadata::set_has_byte() {
  _impl_._oneof_case_[0] = kByte;
}
inline void Metadata::clear_byte() {
  if (value_case() == kByte) {
    _impl_.value_.byte_ = 0u;
    clear_has_value();
  }
}
inline ::uint32_t Metadata::byte() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Metadata.byte)
  return _internal_byte();
}
inline void Metadata::set_byte(::uint32_t value) {
  _internal_set_byte(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Metadata.byte)
}
inline ::uint32_t Metadata::_internal_byte() const {
  if (value_case() == kByte) {
    return _impl_.value_.byte_;
  }
  return 0u;
}
inline void Metadata::_internal_set_byte(::uint32_t value) {
  if (value_case() != kByte) {
    clear_value();
    set_has_byte();
  }
  _impl_.value_.byte_ = value;
}

inline bool Metadata::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Metadata::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Metadata::ValueCase Metadata::value_case() const {
  return Metadata::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Entity

// uint32 entity_id = 1;
inline void Entity::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline ::uint32_t Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.entity_id)
  return _internal_entity_id();
}
inline void Entity::set_entity_id(::uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Entity.entity_id)
}
inline ::uint32_t Entity::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline void Entity::_internal_set_entity_id(::uint32_t value) {
  ;
  _impl_.entity_id_ = value;
}

// .minecpp.proto.common.UUID uuid = 2;
inline bool Entity::has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uuid_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::UUID& Entity::_internal_uuid() const {
  const ::minecpp::proto::common::UUID* p = _impl_.uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::UUID&>(
      ::minecpp::proto::common::_UUID_default_instance_);
}
inline const ::minecpp::proto::common::UUID& Entity::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.uuid)
  return _internal_uuid();
}
inline void Entity::unsafe_arena_set_allocated_uuid(
    ::minecpp::proto::common::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  _impl_.uuid_ = uuid;
  if (uuid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.Entity.uuid)
}
inline ::minecpp::proto::common::UUID* Entity::release_uuid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::UUID* Entity::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.Entity.uuid)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::UUID* Entity::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::UUID>(GetArenaForAllocation());
    _impl_.uuid_ = p;
  }
  return _impl_.uuid_;
}
inline ::minecpp::proto::common::UUID* Entity::mutable_uuid() {
  ::minecpp::proto::common::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Entity.uuid)
  return _msg;
}
inline void Entity::set_allocated_uuid(::minecpp::proto::common::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.Entity.uuid)
}

// uint32 entity_type = 3;
inline void Entity::clear_entity_type() {
  _impl_.entity_type_ = 0u;
}
inline ::uint32_t Entity::entity_type() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.entity_type)
  return _internal_entity_type();
}
inline void Entity::set_entity_type(::uint32_t value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Entity.entity_type)
}
inline ::uint32_t Entity::_internal_entity_type() const {
  return _impl_.entity_type_;
}
inline void Entity::_internal_set_entity_type(::uint32_t value) {
  ;
  _impl_.entity_type_ = value;
}

// .minecpp.proto.common.Vector3 position = 4;
inline bool Entity::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Vector3& Entity::_internal_position() const {
  const ::minecpp::proto::common::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Vector3&>(
      ::minecpp::proto::common::_Vector3_default_instance_);
}
inline const ::minecpp::proto::common::Vector3& Entity::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.position)
  return _internal_position();
}
inline void Entity::unsafe_arena_set_allocated_position(
    ::minecpp::proto::common::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.Entity.position)
}
inline ::minecpp::proto::common::Vector3* Entity::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Vector3* Entity::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.Entity.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Vector3* Entity::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::Vector3* Entity::mutable_position() {
  ::minecpp::proto::common::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Entity.position)
  return _msg;
}
inline void Entity::set_allocated_position(::minecpp::proto::common::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.Entity.position)
}

// .minecpp.proto.common.Rotation rotation = 5;
inline bool Entity::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Rotation& Entity::_internal_rotation() const {
  const ::minecpp::proto::common::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Rotation&>(
      ::minecpp::proto::common::_Rotation_default_instance_);
}
inline const ::minecpp::proto::common::Rotation& Entity::rotation() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.rotation)
  return _internal_rotation();
}
inline void Entity::unsafe_arena_set_allocated_rotation(
    ::minecpp::proto::common::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.Entity.rotation)
}
inline ::minecpp::proto::common::Rotation* Entity::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::minecpp::proto::common::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Rotation* Entity::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.Entity.rotation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::minecpp::proto::common::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Rotation* Entity::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::minecpp::proto::common::Rotation* Entity::mutable_rotation() {
  ::minecpp::proto::common::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Entity.rotation)
  return _msg;
}
inline void Entity::set_allocated_rotation(::minecpp::proto::common::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.Entity.rotation)
}

// float head_yaw = 6;
inline void Entity::clear_head_yaw() {
  _impl_.head_yaw_ = 0;
}
inline float Entity::head_yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.head_yaw)
  return _internal_head_yaw();
}
inline void Entity::set_head_yaw(float value) {
  _internal_set_head_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Entity.head_yaw)
}
inline float Entity::_internal_head_yaw() const {
  return _impl_.head_yaw_;
}
inline void Entity::_internal_set_head_yaw(float value) {
  ;
  _impl_.head_yaw_ = value;
}

// uint32 data = 7;
inline void Entity::clear_data() {
  _impl_.data_ = 0u;
}
inline ::uint32_t Entity::data() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.data)
  return _internal_data();
}
inline void Entity::set_data(::uint32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.Entity.data)
}
inline ::uint32_t Entity::_internal_data() const {
  return _impl_.data_;
}
inline void Entity::_internal_set_data(::uint32_t value) {
  ;
  _impl_.data_ = value;
}

// .minecpp.proto.common.Vector3i velocity = 8;
inline bool Entity::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Vector3i& Entity::_internal_velocity() const {
  const ::minecpp::proto::common::Vector3i* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Vector3i&>(
      ::minecpp::proto::common::_Vector3i_default_instance_);
}
inline const ::minecpp::proto::common::Vector3i& Entity::velocity() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.velocity)
  return _internal_velocity();
}
inline void Entity::unsafe_arena_set_allocated_velocity(
    ::minecpp::proto::common::Vector3i* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.Entity.velocity)
}
inline ::minecpp::proto::common::Vector3i* Entity::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::minecpp::proto::common::Vector3i* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Vector3i* Entity::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.Entity.velocity)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::minecpp::proto::common::Vector3i* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Vector3i* Entity::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Vector3i>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::minecpp::proto::common::Vector3i* Entity::mutable_velocity() {
  ::minecpp::proto::common::Vector3i* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Entity.velocity)
  return _msg;
}
inline void Entity::set_allocated_velocity(::minecpp::proto::common::Vector3i* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.Entity.velocity)
}

// repeated .minecpp.proto.entity.Metadata metadata = 9;
inline int Entity::_internal_metadata_size() const {
  return _impl_.metadata_.size();
}
inline int Entity::metadata_size() const {
  return _internal_metadata_size();
}
inline void Entity::clear_metadata() {
  _internal_mutable_metadata()->Clear();
}
inline ::minecpp::proto::entity::Metadata* Entity::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.Entity.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::Metadata >*
Entity::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:minecpp.proto.entity.Entity.metadata)
  return _internal_mutable_metadata();
}
inline const ::minecpp::proto::entity::Metadata& Entity::_internal_metadata(int index) const {
  return _internal_metadata().Get(index);
}
inline const ::minecpp::proto::entity::Metadata& Entity::metadata(int index) const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.Entity.metadata)
  return _internal_metadata(index);
}
inline ::minecpp::proto::entity::Metadata* Entity::_internal_add_metadata() {
  return _internal_mutable_metadata()->Add();
}
inline ::minecpp::proto::entity::Metadata* Entity::add_metadata() {
  ::minecpp::proto::entity::Metadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:minecpp.proto.entity.Entity.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::Metadata >&
Entity::metadata() const {
  // @@protoc_insertion_point(field_list:minecpp.proto.entity.Entity.metadata)
  return _internal_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::Metadata>&
Entity::_internal_metadata() const {
  return _impl_.metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::Metadata>*
Entity::_internal_mutable_metadata() {
  return &_impl_.metadata_;
}

// -------------------------------------------------------------------

// EntityEquipment

// .minecpp.proto.entity.EquipmentSlot slot = 1;
inline void EntityEquipment::clear_slot() {
  _impl_.slot_ = 0;
}
inline ::minecpp::proto::entity::EquipmentSlot EntityEquipment::slot() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.EntityEquipment.slot)
  return _internal_slot();
}
inline void EntityEquipment::set_slot(::minecpp::proto::entity::EquipmentSlot value) {
   _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.EntityEquipment.slot)
}
inline ::minecpp::proto::entity::EquipmentSlot EntityEquipment::_internal_slot() const {
  return static_cast<::minecpp::proto::entity::EquipmentSlot>(_impl_.slot_);
}
inline void EntityEquipment::_internal_set_slot(::minecpp::proto::entity::EquipmentSlot value) {
  ;
  _impl_.slot_ = value;
}

// .minecpp.proto.common.Slot item = 2;
inline bool EntityEquipment::has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Slot& EntityEquipment::_internal_item() const {
  const ::minecpp::proto::common::Slot* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Slot&>(
      ::minecpp::proto::common::_Slot_default_instance_);
}
inline const ::minecpp::proto::common::Slot& EntityEquipment::item() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.EntityEquipment.item)
  return _internal_item();
}
inline void EntityEquipment::unsafe_arena_set_allocated_item(
    ::minecpp::proto::common::Slot* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.EntityEquipment.item)
}
inline ::minecpp::proto::common::Slot* EntityEquipment::release_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::Slot* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Slot* EntityEquipment::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.EntityEquipment.item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::Slot* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Slot* EntityEquipment::_internal_mutable_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Slot>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::minecpp::proto::common::Slot* EntityEquipment::mutable_item() {
  ::minecpp::proto::common::Slot* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.EntityEquipment.item)
  return _msg;
}
inline void EntityEquipment::set_allocated_item(::minecpp::proto::common::Slot* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.EntityEquipment.item)
}

// -------------------------------------------------------------------

// PlayerEntity

// uint32 entity_id = 1;
inline void PlayerEntity::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline ::uint32_t PlayerEntity::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.PlayerEntity.entity_id)
  return _internal_entity_id();
}
inline void PlayerEntity::set_entity_id(::uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.PlayerEntity.entity_id)
}
inline ::uint32_t PlayerEntity::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline void PlayerEntity::_internal_set_entity_id(::uint32_t value) {
  ;
  _impl_.entity_id_ = value;
}

// .minecpp.proto.common.UUID uuid = 2;
inline bool PlayerEntity::has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uuid_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::UUID& PlayerEntity::_internal_uuid() const {
  const ::minecpp::proto::common::UUID* p = _impl_.uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::UUID&>(
      ::minecpp::proto::common::_UUID_default_instance_);
}
inline const ::minecpp::proto::common::UUID& PlayerEntity::uuid() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.PlayerEntity.uuid)
  return _internal_uuid();
}
inline void PlayerEntity::unsafe_arena_set_allocated_uuid(
    ::minecpp::proto::common::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  _impl_.uuid_ = uuid;
  if (uuid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.PlayerEntity.uuid)
}
inline ::minecpp::proto::common::UUID* PlayerEntity::release_uuid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::UUID* PlayerEntity::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.PlayerEntity.uuid)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::UUID* PlayerEntity::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::UUID>(GetArenaForAllocation());
    _impl_.uuid_ = p;
  }
  return _impl_.uuid_;
}
inline ::minecpp::proto::common::UUID* PlayerEntity::mutable_uuid() {
  ::minecpp::proto::common::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.PlayerEntity.uuid)
  return _msg;
}
inline void PlayerEntity::set_allocated_uuid(::minecpp::proto::common::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.PlayerEntity.uuid)
}

// .minecpp.proto.common.Vector3 position = 4;
inline bool PlayerEntity::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Vector3& PlayerEntity::_internal_position() const {
  const ::minecpp::proto::common::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Vector3&>(
      ::minecpp::proto::common::_Vector3_default_instance_);
}
inline const ::minecpp::proto::common::Vector3& PlayerEntity::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.PlayerEntity.position)
  return _internal_position();
}
inline void PlayerEntity::unsafe_arena_set_allocated_position(
    ::minecpp::proto::common::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.PlayerEntity.position)
}
inline ::minecpp::proto::common::Vector3* PlayerEntity::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Vector3* PlayerEntity::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.PlayerEntity.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Vector3* PlayerEntity::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::Vector3* PlayerEntity::mutable_position() {
  ::minecpp::proto::common::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.PlayerEntity.position)
  return _msg;
}
inline void PlayerEntity::set_allocated_position(::minecpp::proto::common::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.PlayerEntity.position)
}

// .minecpp.proto.common.Rotation rotation = 5;
inline bool PlayerEntity::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline const ::minecpp::proto::common::Rotation& PlayerEntity::_internal_rotation() const {
  const ::minecpp::proto::common::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::Rotation&>(
      ::minecpp::proto::common::_Rotation_default_instance_);
}
inline const ::minecpp::proto::common::Rotation& PlayerEntity::rotation() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.PlayerEntity.rotation)
  return _internal_rotation();
}
inline void PlayerEntity::unsafe_arena_set_allocated_rotation(
    ::minecpp::proto::common::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.PlayerEntity.rotation)
}
inline ::minecpp::proto::common::Rotation* PlayerEntity::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::minecpp::proto::common::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::Rotation* PlayerEntity::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.PlayerEntity.rotation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::minecpp::proto::common::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::Rotation* PlayerEntity::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::minecpp::proto::common::Rotation* PlayerEntity::mutable_rotation() {
  ::minecpp::proto::common::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.PlayerEntity.rotation)
  return _msg;
}
inline void PlayerEntity::set_allocated_rotation(::minecpp::proto::common::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.PlayerEntity.rotation)
}

// repeated .minecpp.proto.entity.EntityEquipment equipment = 6;
inline int PlayerEntity::_internal_equipment_size() const {
  return _impl_.equipment_.size();
}
inline int PlayerEntity::equipment_size() const {
  return _internal_equipment_size();
}
inline void PlayerEntity::clear_equipment() {
  _internal_mutable_equipment()->Clear();
}
inline ::minecpp::proto::entity::EntityEquipment* PlayerEntity::mutable_equipment(int index) {
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.PlayerEntity.equipment)
  return _internal_mutable_equipment()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::EntityEquipment >*
PlayerEntity::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable_list:minecpp.proto.entity.PlayerEntity.equipment)
  return _internal_mutable_equipment();
}
inline const ::minecpp::proto::entity::EntityEquipment& PlayerEntity::_internal_equipment(int index) const {
  return _internal_equipment().Get(index);
}
inline const ::minecpp::proto::entity::EntityEquipment& PlayerEntity::equipment(int index) const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.PlayerEntity.equipment)
  return _internal_equipment(index);
}
inline ::minecpp::proto::entity::EntityEquipment* PlayerEntity::_internal_add_equipment() {
  return _internal_mutable_equipment()->Add();
}
inline ::minecpp::proto::entity::EntityEquipment* PlayerEntity::add_equipment() {
  ::minecpp::proto::entity::EntityEquipment* _add = _internal_add_equipment();
  // @@protoc_insertion_point(field_add:minecpp.proto.entity.PlayerEntity.equipment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::minecpp::proto::entity::EntityEquipment >&
PlayerEntity::equipment() const {
  // @@protoc_insertion_point(field_list:minecpp.proto.entity.PlayerEntity.equipment)
  return _internal_equipment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::EntityEquipment>&
PlayerEntity::_internal_equipment() const {
  return _impl_.equipment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::minecpp::proto::entity::EntityEquipment>*
PlayerEntity::_internal_mutable_equipment() {
  return &_impl_.equipment_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace entity
}  // namespace proto
}  // namespace minecpp


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::minecpp::proto::entity::EquipmentSlot> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::entity::EquipmentSlot>() {
  return ::minecpp::proto::entity::EquipmentSlot_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fEntity_2eproto_2epb_2eh
