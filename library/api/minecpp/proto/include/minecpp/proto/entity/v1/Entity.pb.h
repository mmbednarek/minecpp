// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/entity/v1/Entity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <minecpp/proto/common/v1/Common.pb.h>
#include <minecpp/proto/common/v1/Vector.pb.h>
#include <minecpp/proto/player/v1/Id.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto;
namespace minecpp {
namespace proto {
namespace entity {
namespace v1 {
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Movement;
struct MovementDefaultTypeInternal;
extern MovementDefaultTypeInternal _Movement_default_instance_;
}  // namespace v1
}  // namespace entity
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::proto::entity::v1::Entity* Arena::CreateMaybeMessage<::minecpp::proto::entity::v1::Entity>(Arena*);
template<> ::minecpp::proto::entity::v1::Movement* Arena::CreateMaybeMessage<::minecpp::proto::entity::v1::Movement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace proto {
namespace entity {
namespace v1 {

enum EquipmentSlot : int {
  MAIN_HAND = 0,
  OFF_HAND = 1,
  BOOTS = 2,
  LEGGINGS = 3,
  CHESTPLATE = 4,
  HELMET = 5,
  EquipmentSlot_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EquipmentSlot_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EquipmentSlot_IsValid(int value);
constexpr EquipmentSlot EquipmentSlot_MIN = MAIN_HAND;
constexpr EquipmentSlot EquipmentSlot_MAX = HELMET;
constexpr int EquipmentSlot_ARRAYSIZE = EquipmentSlot_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipmentSlot_descriptor();
template<typename T>
inline const std::string& EquipmentSlot_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EquipmentSlot>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EquipmentSlot_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EquipmentSlot_descriptor(), enum_t_value);
}
inline bool EquipmentSlot_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EquipmentSlot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EquipmentSlot>(
    EquipmentSlot_descriptor(), name, value);
}
// ===================================================================

class Movement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.v1.Movement) */ {
 public:
  inline Movement() : Movement(nullptr) {}
  ~Movement() override;
  explicit PROTOBUF_CONSTEXPR Movement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Movement(const Movement& from);
  Movement(Movement&& from) noexcept
    : Movement() {
    *this = ::std::move(from);
  }

  inline Movement& operator=(const Movement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Movement& operator=(Movement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Movement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Movement* internal_default_instance() {
    return reinterpret_cast<const Movement*>(
               &_Movement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Movement& a, Movement& b) {
    a.Swap(&b);
  }
  inline void Swap(Movement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Movement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Movement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Movement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Movement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Movement& from) {
    Movement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Movement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.entity.v1.Movement";
  }
  protected:
  explicit Movement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.v1.Movement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto;
};
// -------------------------------------------------------------------

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.entity.v1.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entity& from) {
    Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.entity.v1.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kEntityIdFieldNumber = 1,
  };
  // .minecpp.proto.player.v1.PlayerId player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::minecpp::proto::player::v1::PlayerId& player_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::player::v1::PlayerId* release_player_id();
  ::minecpp::proto::player::v1::PlayerId* mutable_player_id();
  void set_allocated_player_id(::minecpp::proto::player::v1::PlayerId* player_id);
  private:
  const ::minecpp::proto::player::v1::PlayerId& _internal_player_id() const;
  ::minecpp::proto::player::v1::PlayerId* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::minecpp::proto::player::v1::PlayerId* player_id);
  ::minecpp::proto::player::v1::PlayerId* unsafe_arena_release_player_id();

  // .minecpp.proto.common.v1.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::minecpp::proto::common::v1::Vector3& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::Vector3* release_position();
  ::minecpp::proto::common::v1::Vector3* mutable_position();
  void set_allocated_position(::minecpp::proto::common::v1::Vector3* position);
  private:
  const ::minecpp::proto::common::v1::Vector3& _internal_position() const;
  ::minecpp::proto::common::v1::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::common::v1::Vector3* position);
  ::minecpp::proto::common::v1::Vector3* unsafe_arena_release_position();

  // .minecpp.proto.common.v1.Rotation rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::minecpp::proto::common::v1::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::Rotation* release_rotation();
  ::minecpp::proto::common::v1::Rotation* mutable_rotation();
  void set_allocated_rotation(::minecpp::proto::common::v1::Rotation* rotation);
  private:
  const ::minecpp::proto::common::v1::Rotation& _internal_rotation() const;
  ::minecpp::proto::common::v1::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::minecpp::proto::common::v1::Rotation* rotation);
  ::minecpp::proto::common::v1::Rotation* unsafe_arena_release_rotation();

  // uint32 entity_id = 1;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.entity.v1.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::player::v1::PlayerId* player_id_;
    ::minecpp::proto::common::v1::Vector3* position_;
    ::minecpp::proto::common::v1::Rotation* rotation_;
    uint32_t entity_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Movement

// int32 x = 1;
inline void Movement::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Movement::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Movement::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Movement.x)
  return _internal_x();
}
inline void Movement::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Movement::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.v1.Movement.x)
}

// int32 y = 2;
inline void Movement::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Movement::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Movement::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Movement.y)
  return _internal_y();
}
inline void Movement::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Movement::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.v1.Movement.y)
}

// int32 z = 3;
inline void Movement::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t Movement::_internal_z() const {
  return _impl_.z_;
}
inline int32_t Movement::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Movement.z)
  return _internal_z();
}
inline void Movement::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void Movement::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.v1.Movement.z)
}

// -------------------------------------------------------------------

// Entity

// uint32 entity_id = 1;
inline void Entity::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t Entity::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Entity.entity_id)
  return _internal_entity_id();
}
inline void Entity::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void Entity::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.entity.v1.Entity.entity_id)
}

// .minecpp.proto.player.v1.PlayerId player_id = 2;
inline bool Entity::_internal_has_player_id() const {
  return this != internal_default_instance() && _impl_.player_id_ != nullptr;
}
inline bool Entity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::minecpp::proto::player::v1::PlayerId& Entity::_internal_player_id() const {
  const ::minecpp::proto::player::v1::PlayerId* p = _impl_.player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::player::v1::PlayerId&>(
      ::minecpp::proto::player::v1::_PlayerId_default_instance_);
}
inline const ::minecpp::proto::player::v1::PlayerId& Entity::player_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Entity.player_id)
  return _internal_player_id();
}
inline void Entity::unsafe_arena_set_allocated_player_id(
    ::minecpp::proto::player::v1::PlayerId* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_id_);
  }
  _impl_.player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.v1.Entity.player_id)
}
inline ::minecpp::proto::player::v1::PlayerId* Entity::release_player_id() {
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.player_id_;
  _impl_.player_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Entity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.v1.Entity.player_id)
  
  ::minecpp::proto::player::v1::PlayerId* temp = _impl_.player_id_;
  _impl_.player_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::player::v1::PlayerId* Entity::_internal_mutable_player_id() {
  
  if (_impl_.player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::player::v1::PlayerId>(GetArenaForAllocation());
    _impl_.player_id_ = p;
  }
  return _impl_.player_id_;
}
inline ::minecpp::proto::player::v1::PlayerId* Entity::mutable_player_id() {
  ::minecpp::proto::player::v1::PlayerId* _msg = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.v1.Entity.player_id)
  return _msg;
}
inline void Entity::set_allocated_player_id(::minecpp::proto::player::v1::PlayerId* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.v1.Entity.player_id)
}

// .minecpp.proto.common.v1.Vector3 position = 3;
inline bool Entity::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Entity::has_position() const {
  return _internal_has_position();
}
inline const ::minecpp::proto::common::v1::Vector3& Entity::_internal_position() const {
  const ::minecpp::proto::common::v1::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::Vector3&>(
      ::minecpp::proto::common::v1::_Vector3_default_instance_);
}
inline const ::minecpp::proto::common::v1::Vector3& Entity::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Entity.position)
  return _internal_position();
}
inline void Entity::unsafe_arena_set_allocated_position(
    ::minecpp::proto::common::v1::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.v1.Entity.position)
}
inline ::minecpp::proto::common::v1::Vector3* Entity::release_position() {
  
  ::minecpp::proto::common::v1::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::Vector3* Entity::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.v1.Entity.position)
  
  ::minecpp::proto::common::v1::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::Vector3* Entity::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::v1::Vector3* Entity::mutable_position() {
  ::minecpp::proto::common::v1::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.v1.Entity.position)
  return _msg;
}
inline void Entity::set_allocated_position(::minecpp::proto::common::v1::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.v1.Entity.position)
}

// .minecpp.proto.common.v1.Rotation rotation = 4;
inline bool Entity::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Entity::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::minecpp::proto::common::v1::Rotation& Entity::_internal_rotation() const {
  const ::minecpp::proto::common::v1::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::Rotation&>(
      ::minecpp::proto::common::v1::_Rotation_default_instance_);
}
inline const ::minecpp::proto::common::v1::Rotation& Entity::rotation() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.entity.v1.Entity.rotation)
  return _internal_rotation();
}
inline void Entity::unsafe_arena_set_allocated_rotation(
    ::minecpp::proto::common::v1::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.entity.v1.Entity.rotation)
}
inline ::minecpp::proto::common::v1::Rotation* Entity::release_rotation() {
  
  ::minecpp::proto::common::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::Rotation* Entity::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:minecpp.proto.entity.v1.Entity.rotation)
  
  ::minecpp::proto::common::v1::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::Rotation* Entity::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::minecpp::proto::common::v1::Rotation* Entity::mutable_rotation() {
  ::minecpp::proto::common::v1::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.entity.v1.Entity.rotation)
  return _msg;
}
inline void Entity::set_allocated_rotation(::minecpp::proto::common::v1::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.entity.v1.Entity.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace entity
}  // namespace proto
}  // namespace minecpp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minecpp::proto::entity::v1::EquipmentSlot> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::entity::v1::EquipmentSlot>() {
  return ::minecpp::proto::entity::v1::EquipmentSlot_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fentity_2fv1_2fEntity_2eproto
