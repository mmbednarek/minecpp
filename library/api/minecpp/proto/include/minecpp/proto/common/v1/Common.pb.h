// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/common/v1/Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
namespace minecpp {
namespace proto {
namespace common {
namespace v1 {
class BlockPosition;
struct BlockPositionDefaultTypeInternal;
extern BlockPositionDefaultTypeInternal _BlockPosition_default_instance_;
class BlockState;
struct BlockStateDefaultTypeInternal;
extern BlockStateDefaultTypeInternal _BlockState_default_instance_;
class ChunkPosition;
struct ChunkPositionDefaultTypeInternal;
extern ChunkPositionDefaultTypeInternal _ChunkPosition_default_instance_;
class ChunkSectionPosition;
struct ChunkSectionPositionDefaultTypeInternal;
extern ChunkSectionPositionDefaultTypeInternal _ChunkSectionPosition_default_instance_;
class Gameplay;
struct GameplayDefaultTypeInternal;
extern GameplayDefaultTypeInternal _Gameplay_default_instance_;
class ItemId;
struct ItemIdDefaultTypeInternal;
extern ItemIdDefaultTypeInternal _ItemId_default_instance_;
class LightLevel;
struct LightLevelDefaultTypeInternal;
extern LightLevelDefaultTypeInternal _LightLevel_default_instance_;
class LightSource;
struct LightSourceDefaultTypeInternal;
extern LightSourceDefaultTypeInternal _LightSource_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class SectionRange;
struct SectionRangeDefaultTypeInternal;
extern SectionRangeDefaultTypeInternal _SectionRange_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3f;
struct Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> ::minecpp::proto::common::v1::BlockPosition* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::BlockPosition>(Arena*);
template<> ::minecpp::proto::common::v1::BlockState* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::BlockState>(Arena*);
template<> ::minecpp::proto::common::v1::ChunkPosition* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::ChunkPosition>(Arena*);
template<> ::minecpp::proto::common::v1::ChunkSectionPosition* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::ChunkSectionPosition>(Arena*);
template<> ::minecpp::proto::common::v1::Gameplay* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::Gameplay>(Arena*);
template<> ::minecpp::proto::common::v1::ItemId* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::ItemId>(Arena*);
template<> ::minecpp::proto::common::v1::LightLevel* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::LightLevel>(Arena*);
template<> ::minecpp::proto::common::v1::LightSource* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::LightSource>(Arena*);
template<> ::minecpp::proto::common::v1::Rotation* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::Rotation>(Arena*);
template<> ::minecpp::proto::common::v1::SectionRange* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::SectionRange>(Arena*);
template<> ::minecpp::proto::common::v1::Vector3* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::Vector3>(Arena*);
template<> ::minecpp::proto::common::v1::Vector3f* Arena::CreateMaybeMessage<::minecpp::proto::common::v1::Vector3f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace minecpp {
namespace proto {
namespace common {
namespace v1 {

enum DimensionType : int {
  Overworld = 0,
  Nether = 1,
  End = 2,
  DimensionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DimensionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DimensionType_IsValid(int value);
constexpr DimensionType DimensionType_MIN = Overworld;
constexpr DimensionType DimensionType_MAX = End;
constexpr int DimensionType_ARRAYSIZE = DimensionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionType_descriptor();
template<typename T>
inline const std::string& DimensionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DimensionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DimensionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DimensionType_descriptor(), enum_t_value);
}
inline bool DimensionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DimensionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DimensionType>(
    DimensionType_descriptor(), name, value);
}
enum Difficulty : int {
  Easy = 0,
  Normal = 1,
  Hard = 2,
  Difficulty_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Difficulty_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Difficulty_IsValid(int value);
constexpr Difficulty Difficulty_MIN = Easy;
constexpr Difficulty Difficulty_MAX = Hard;
constexpr int Difficulty_ARRAYSIZE = Difficulty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difficulty_descriptor();
template<typename T>
inline const std::string& Difficulty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Difficulty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Difficulty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Difficulty_descriptor(), enum_t_value);
}
inline bool Difficulty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Difficulty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Difficulty>(
    Difficulty_descriptor(), name, value);
}
enum GameMode : int {
  Survival = 0,
  Creative = 1,
  Adventure = 2,
  Spectator = 3,
  GameMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GameMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GameMode_IsValid(int value);
constexpr GameMode GameMode_MIN = Survival;
constexpr GameMode GameMode_MAX = Spectator;
constexpr int GameMode_ARRAYSIZE = GameMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMode_descriptor();
template<typename T>
inline const std::string& GameMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameMode_descriptor(), enum_t_value);
}
inline bool GameMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameMode>(
    GameMode_descriptor(), name, value);
}
enum WorldType : int {
  Default = 0,
  Flat = 1,
  LargeBiomes = 2,
  Amplified = 3,
  Customised = 4,
  WorldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WorldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WorldType_IsValid(int value);
constexpr WorldType WorldType_MIN = Default;
constexpr WorldType WorldType_MAX = Customised;
constexpr int WorldType_ARRAYSIZE = WorldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor();
template<typename T>
inline const std::string& WorldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorldType_descriptor(), enum_t_value);
}
inline bool WorldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorldType>(
    WorldType_descriptor(), name, value);
}
enum PlayerDiggingState : int {
  Digging = 0,
  CanceledDigging = 1,
  FinishedDigging = 2,
  DropAllItems = 3,
  DropItem = 4,
  ReleaseUseItem = 5,
  SwapHeldItems = 6,
  PlayerDiggingState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerDiggingState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerDiggingState_IsValid(int value);
constexpr PlayerDiggingState PlayerDiggingState_MIN = Digging;
constexpr PlayerDiggingState PlayerDiggingState_MAX = SwapHeldItems;
constexpr int PlayerDiggingState_ARRAYSIZE = PlayerDiggingState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerDiggingState_descriptor();
template<typename T>
inline const std::string& PlayerDiggingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerDiggingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerDiggingState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerDiggingState_descriptor(), enum_t_value);
}
inline bool PlayerDiggingState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerDiggingState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerDiggingState>(
    PlayerDiggingState_descriptor(), name, value);
}
enum Face : int {
  Bottom = 0,
  Top = 1,
  North = 2,
  South = 3,
  West = 4,
  East = 5,
  Face_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Face_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Face_IsValid(int value);
constexpr Face Face_MIN = Bottom;
constexpr Face Face_MAX = East;
constexpr int Face_ARRAYSIZE = Face_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Face_descriptor();
template<typename T>
inline const std::string& Face_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Face>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Face_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Face_descriptor(), enum_t_value);
}
inline bool Face_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Face* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Face>(
    Face_descriptor(), name, value);
}
enum LightType : int {
  Block = 0,
  Sky = 1,
  LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = Block;
constexpr LightType LightType_MAX = Sky;
constexpr int LightType_ARRAYSIZE = LightType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightType_descriptor();
template<typename T>
inline const std::string& LightType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightType_descriptor(), enum_t_value);
}
inline bool LightType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LightType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightType>(
    LightType_descriptor(), name, value);
}
enum InteractionType : int {
  Interact = 0,
  Attack = 1,
  InteractAt = 2,
  InteractionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InteractionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InteractionType_IsValid(int value);
constexpr InteractionType InteractionType_MIN = Interact;
constexpr InteractionType InteractionType_MAX = InteractAt;
constexpr int InteractionType_ARRAYSIZE = InteractionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InteractionType_descriptor();
template<typename T>
inline const std::string& InteractionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteractionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteractionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InteractionType_descriptor(), enum_t_value);
}
inline bool InteractionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InteractionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InteractionType>(
    InteractionType_descriptor(), name, value);
}
enum HandType : int {
  MainHand = 0,
  OffHand = 1,
  HandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HandType_IsValid(int value);
constexpr HandType HandType_MIN = MainHand;
constexpr HandType HandType_MAX = OffHand;
constexpr int HandType_ARRAYSIZE = HandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandType_descriptor();
template<typename T>
inline const std::string& HandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandType_descriptor(), enum_t_value);
}
inline bool HandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandType>(
    HandType_descriptor(), name, value);
}
enum EntityAnimation : int {
  SwingMainArm = 0,
  TakeDamage = 1,
  LeaveBed = 2,
  SwingOffHand = 3,
  CriticalEffect = 4,
  MagicCriticalEffect = 5,
  EntityAnimation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntityAnimation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntityAnimation_IsValid(int value);
constexpr EntityAnimation EntityAnimation_MIN = SwingMainArm;
constexpr EntityAnimation EntityAnimation_MAX = MagicCriticalEffect;
constexpr int EntityAnimation_ARRAYSIZE = EntityAnimation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityAnimation_descriptor();
template<typename T>
inline const std::string& EntityAnimation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntityAnimation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntityAnimation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntityAnimation_descriptor(), enum_t_value);
}
inline bool EntityAnimation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntityAnimation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntityAnimation>(
    EntityAnimation_descriptor(), name, value);
}
// ===================================================================

class ChunkPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.ChunkPosition) */ {
 public:
  inline ChunkPosition() : ChunkPosition(nullptr) {}
  ~ChunkPosition() override;
  explicit PROTOBUF_CONSTEXPR ChunkPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkPosition(const ChunkPosition& from);
  ChunkPosition(ChunkPosition&& from) noexcept
    : ChunkPosition() {
    *this = ::std::move(from);
  }

  inline ChunkPosition& operator=(const ChunkPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkPosition& operator=(ChunkPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkPosition* internal_default_instance() {
    return reinterpret_cast<const ChunkPosition*>(
               &_ChunkPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChunkPosition& a, ChunkPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkPosition& from) {
    ChunkPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.ChunkPosition";
  }
  protected:
  explicit ChunkPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 z = 2;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.ChunkPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class BlockPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.BlockPosition) */ {
 public:
  inline BlockPosition() : BlockPosition(nullptr) {}
  ~BlockPosition() override;
  explicit PROTOBUF_CONSTEXPR BlockPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockPosition(const BlockPosition& from);
  BlockPosition(BlockPosition&& from) noexcept
    : BlockPosition() {
    *this = ::std::move(from);
  }

  inline BlockPosition& operator=(const BlockPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPosition& operator=(BlockPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockPosition* internal_default_instance() {
    return reinterpret_cast<const BlockPosition*>(
               &_BlockPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockPosition& a, BlockPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockPosition& from) {
    BlockPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.BlockPosition";
  }
  protected:
  explicit BlockPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.BlockPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class BlockState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.BlockState) */ {
 public:
  inline BlockState() : BlockState(nullptr) {}
  ~BlockState() override;
  explicit PROTOBUF_CONSTEXPR BlockState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockState(const BlockState& from);
  BlockState(BlockState&& from) noexcept
    : BlockState() {
    *this = ::std::move(from);
  }

  inline BlockState& operator=(const BlockState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockState& operator=(BlockState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockState* internal_default_instance() {
    return reinterpret_cast<const BlockState*>(
               &_BlockState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockState& a, BlockState& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockState& from) {
    BlockState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.BlockState";
  }
  protected:
  explicit BlockState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockStateFieldNumber = 1,
  };
  // uint32 block_state = 1;
  void clear_block_state();
  uint32_t block_state() const;
  void set_block_state(uint32_t value);
  private:
  uint32_t _internal_block_state() const;
  void _internal_set_block_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.BlockState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t block_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Gameplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.Gameplay) */ {
 public:
  inline Gameplay() : Gameplay(nullptr) {}
  ~Gameplay() override;
  explicit PROTOBUF_CONSTEXPR Gameplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gameplay(const Gameplay& from);
  Gameplay(Gameplay&& from) noexcept
    : Gameplay() {
    *this = ::std::move(from);
  }

  inline Gameplay& operator=(const Gameplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gameplay& operator=(Gameplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gameplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gameplay* internal_default_instance() {
    return reinterpret_cast<const Gameplay*>(
               &_Gameplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gameplay& a, Gameplay& b) {
    a.Swap(&b);
  }
  inline void Swap(Gameplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gameplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gameplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gameplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gameplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Gameplay& from) {
    Gameplay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gameplay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.Gameplay";
  }
  protected:
  explicit Gameplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 2,
    kDimensionFieldNumber = 1,
    kModeFieldNumber = 3,
    kWorldFieldNumber = 4,
    kViewDistanceFieldNumber = 5,
    kMaxPlayersFieldNumber = 7,
    kHardcoreFieldNumber = 6,
    kReducedDebugInfoFieldNumber = 8,
    kDoImmediateRespawnFieldNumber = 9,
    kDifficultyFieldNumber = 10,
  };
  // uint64 seed = 2;
  void clear_seed();
  uint64_t seed() const;
  void set_seed(uint64_t value);
  private:
  uint64_t _internal_seed() const;
  void _internal_set_seed(uint64_t value);
  public:

  // .minecpp.proto.common.v1.DimensionType dimension = 1;
  void clear_dimension();
  ::minecpp::proto::common::v1::DimensionType dimension() const;
  void set_dimension(::minecpp::proto::common::v1::DimensionType value);
  private:
  ::minecpp::proto::common::v1::DimensionType _internal_dimension() const;
  void _internal_set_dimension(::minecpp::proto::common::v1::DimensionType value);
  public:

  // .minecpp.proto.common.v1.GameMode mode = 3;
  void clear_mode();
  ::minecpp::proto::common::v1::GameMode mode() const;
  void set_mode(::minecpp::proto::common::v1::GameMode value);
  private:
  ::minecpp::proto::common::v1::GameMode _internal_mode() const;
  void _internal_set_mode(::minecpp::proto::common::v1::GameMode value);
  public:

  // .minecpp.proto.common.v1.WorldType world = 4;
  void clear_world();
  ::minecpp::proto::common::v1::WorldType world() const;
  void set_world(::minecpp::proto::common::v1::WorldType value);
  private:
  ::minecpp::proto::common::v1::WorldType _internal_world() const;
  void _internal_set_world(::minecpp::proto::common::v1::WorldType value);
  public:

  // int32 view_distance = 5;
  void clear_view_distance();
  int32_t view_distance() const;
  void set_view_distance(int32_t value);
  private:
  int32_t _internal_view_distance() const;
  void _internal_set_view_distance(int32_t value);
  public:

  // int32 max_players = 7;
  void clear_max_players();
  int32_t max_players() const;
  void set_max_players(int32_t value);
  private:
  int32_t _internal_max_players() const;
  void _internal_set_max_players(int32_t value);
  public:

  // bool hardcore = 6;
  void clear_hardcore();
  bool hardcore() const;
  void set_hardcore(bool value);
  private:
  bool _internal_hardcore() const;
  void _internal_set_hardcore(bool value);
  public:

  // bool reduced_debug_info = 8;
  void clear_reduced_debug_info();
  bool reduced_debug_info() const;
  void set_reduced_debug_info(bool value);
  private:
  bool _internal_reduced_debug_info() const;
  void _internal_set_reduced_debug_info(bool value);
  public:

  // bool do_immediate_respawn = 9;
  void clear_do_immediate_respawn();
  bool do_immediate_respawn() const;
  void set_do_immediate_respawn(bool value);
  private:
  bool _internal_do_immediate_respawn() const;
  void _internal_set_do_immediate_respawn(bool value);
  public:

  // .minecpp.proto.common.v1.Difficulty difficulty = 10;
  void clear_difficulty();
  ::minecpp::proto::common::v1::Difficulty difficulty() const;
  void set_difficulty(::minecpp::proto::common::v1::Difficulty value);
  private:
  ::minecpp::proto::common::v1::Difficulty _internal_difficulty() const;
  void _internal_set_difficulty(::minecpp::proto::common::v1::Difficulty value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.Gameplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t seed_;
    int dimension_;
    int mode_;
    int world_;
    int32_t view_distance_;
    int32_t max_players_;
    bool hardcore_;
    bool reduced_debug_info_;
    bool do_immediate_respawn_;
    int difficulty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit PROTOBUF_CONSTEXPR Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rotation& from) {
    Rotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
  };
  // float yaw = 1;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float yaw_;
    float pitch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class Vector3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.Vector3f) */ {
 public:
  inline Vector3f() : Vector3f(nullptr) {}
  ~Vector3f() override;
  explicit PROTOBUF_CONSTEXPR Vector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3f(const Vector3f& from);
  Vector3f(Vector3f&& from) noexcept
    : Vector3f() {
    *this = ::std::move(from);
  }

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
               &_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Vector3f& a, Vector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3f& from) {
    Vector3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.Vector3f";
  }
  protected:
  explicit Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.Vector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ItemId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.ItemId) */ {
 public:
  inline ItemId() : ItemId(nullptr) {}
  ~ItemId() override;
  explicit PROTOBUF_CONSTEXPR ItemId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemId(const ItemId& from);
  ItemId(ItemId&& from) noexcept
    : ItemId() {
    *this = ::std::move(from);
  }

  inline ItemId& operator=(const ItemId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemId& operator=(ItemId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemId* internal_default_instance() {
    return reinterpret_cast<const ItemId*>(
               &_ItemId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ItemId& a, ItemId& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemId& from) {
    ItemId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.ItemId";
  }
  protected:
  explicit ItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.ItemId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class LightLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.LightLevel) */ {
 public:
  inline LightLevel() : LightLevel(nullptr) {}
  ~LightLevel() override;
  explicit PROTOBUF_CONSTEXPR LightLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightLevel(const LightLevel& from);
  LightLevel(LightLevel&& from) noexcept
    : LightLevel() {
    *this = ::std::move(from);
  }

  inline LightLevel& operator=(const LightLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightLevel& operator=(LightLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightLevel* internal_default_instance() {
    return reinterpret_cast<const LightLevel*>(
               &_LightLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LightLevel& a, LightLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(LightLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightLevel& from) {
    LightLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.LightLevel";
  }
  protected:
  explicit LightLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.LightLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ChunkSectionPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.ChunkSectionPosition) */ {
 public:
  inline ChunkSectionPosition() : ChunkSectionPosition(nullptr) {}
  ~ChunkSectionPosition() override;
  explicit PROTOBUF_CONSTEXPR ChunkSectionPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkSectionPosition(const ChunkSectionPosition& from);
  ChunkSectionPosition(ChunkSectionPosition&& from) noexcept
    : ChunkSectionPosition() {
    *this = ::std::move(from);
  }

  inline ChunkSectionPosition& operator=(const ChunkSectionPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkSectionPosition& operator=(ChunkSectionPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkSectionPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkSectionPosition* internal_default_instance() {
    return reinterpret_cast<const ChunkSectionPosition*>(
               &_ChunkSectionPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChunkSectionPosition& a, ChunkSectionPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkSectionPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkSectionPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkSectionPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkSectionPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkSectionPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkSectionPosition& from) {
    ChunkSectionPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkSectionPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.ChunkSectionPosition";
  }
  protected:
  explicit ChunkSectionPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkPositionFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .minecpp.proto.common.v1.ChunkPosition chunk_position = 1;
  bool has_chunk_position() const;
  private:
  bool _internal_has_chunk_position() const;
  public:
  void clear_chunk_position();
  const ::minecpp::proto::common::v1::ChunkPosition& chunk_position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::ChunkPosition* release_chunk_position();
  ::minecpp::proto::common::v1::ChunkPosition* mutable_chunk_position();
  void set_allocated_chunk_position(::minecpp::proto::common::v1::ChunkPosition* chunk_position);
  private:
  const ::minecpp::proto::common::v1::ChunkPosition& _internal_chunk_position() const;
  ::minecpp::proto::common::v1::ChunkPosition* _internal_mutable_chunk_position();
  public:
  void unsafe_arena_set_allocated_chunk_position(
      ::minecpp::proto::common::v1::ChunkPosition* chunk_position);
  ::minecpp::proto::common::v1::ChunkPosition* unsafe_arena_release_chunk_position();

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.ChunkSectionPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::ChunkPosition* chunk_position_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class SectionRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.SectionRange) */ {
 public:
  inline SectionRange() : SectionRange(nullptr) {}
  ~SectionRange() override;
  explicit PROTOBUF_CONSTEXPR SectionRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionRange(const SectionRange& from);
  SectionRange(SectionRange&& from) noexcept
    : SectionRange() {
    *this = ::std::move(from);
  }

  inline SectionRange& operator=(const SectionRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionRange& operator=(SectionRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionRange* internal_default_instance() {
    return reinterpret_cast<const SectionRange*>(
               &_SectionRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SectionRange& a, SectionRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SectionRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SectionRange& from) {
    SectionRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.SectionRange";
  }
  protected:
  explicit SectionRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .minecpp.proto.common.v1.ChunkSectionPosition from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::minecpp::proto::common::v1::ChunkSectionPosition& from() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::ChunkSectionPosition* release_from();
  ::minecpp::proto::common::v1::ChunkSectionPosition* mutable_from();
  void set_allocated_from(::minecpp::proto::common::v1::ChunkSectionPosition* from);
  private:
  const ::minecpp::proto::common::v1::ChunkSectionPosition& _internal_from() const;
  ::minecpp::proto::common::v1::ChunkSectionPosition* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::minecpp::proto::common::v1::ChunkSectionPosition* from);
  ::minecpp::proto::common::v1::ChunkSectionPosition* unsafe_arena_release_from();

  // .minecpp.proto.common.v1.ChunkSectionPosition to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::minecpp::proto::common::v1::ChunkSectionPosition& to() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::ChunkSectionPosition* release_to();
  ::minecpp::proto::common::v1::ChunkSectionPosition* mutable_to();
  void set_allocated_to(::minecpp::proto::common::v1::ChunkSectionPosition* to);
  private:
  const ::minecpp::proto::common::v1::ChunkSectionPosition& _internal_to() const;
  ::minecpp::proto::common::v1::ChunkSectionPosition* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::minecpp::proto::common::v1::ChunkSectionPosition* to);
  ::minecpp::proto::common::v1::ChunkSectionPosition* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.SectionRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::ChunkSectionPosition* from_;
    ::minecpp::proto::common::v1::ChunkSectionPosition* to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class LightSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.v1.LightSource) */ {
 public:
  inline LightSource() : LightSource(nullptr) {}
  ~LightSource() override;
  explicit PROTOBUF_CONSTEXPR LightSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightSource(const LightSource& from);
  LightSource(LightSource&& from) noexcept
    : LightSource() {
    *this = ::std::move(from);
  }

  inline LightSource& operator=(const LightSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightSource& operator=(LightSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightSource* internal_default_instance() {
    return reinterpret_cast<const LightSource*>(
               &_LightSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LightSource& a, LightSource& b) {
    a.Swap(&b);
  }
  inline void Swap(LightSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightSource& from) {
    LightSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "minecpp.proto.common.v1.LightSource";
  }
  protected:
  explicit LightSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStrengthFieldNumber = 2,
  };
  // .minecpp.proto.common.v1.BlockPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::minecpp::proto::common::v1::BlockPosition& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::v1::BlockPosition* release_position();
  ::minecpp::proto::common::v1::BlockPosition* mutable_position();
  void set_allocated_position(::minecpp::proto::common::v1::BlockPosition* position);
  private:
  const ::minecpp::proto::common::v1::BlockPosition& _internal_position() const;
  ::minecpp::proto::common::v1::BlockPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::minecpp::proto::common::v1::BlockPosition* position);
  ::minecpp::proto::common::v1::BlockPosition* unsafe_arena_release_position();

  // int32 strength = 2;
  void clear_strength();
  int32_t strength() const;
  void set_strength(int32_t value);
  private:
  int32_t _internal_strength() const;
  void _internal_set_strength(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:minecpp.proto.common.v1.LightSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::minecpp::proto::common::v1::BlockPosition* position_;
    int32_t strength_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkPosition

// int32 x = 1;
inline void ChunkPosition::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t ChunkPosition::_internal_x() const {
  return _impl_.x_;
}
inline int32_t ChunkPosition::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.ChunkPosition.x)
  return _internal_x();
}
inline void ChunkPosition::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void ChunkPosition::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.ChunkPosition.x)
}

// int32 z = 2;
inline void ChunkPosition::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t ChunkPosition::_internal_z() const {
  return _impl_.z_;
}
inline int32_t ChunkPosition::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.ChunkPosition.z)
  return _internal_z();
}
inline void ChunkPosition::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void ChunkPosition::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.ChunkPosition.z)
}

// -------------------------------------------------------------------

// BlockPosition

// int32 x = 1;
inline void BlockPosition::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t BlockPosition::_internal_x() const {
  return _impl_.x_;
}
inline int32_t BlockPosition::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.BlockPosition.x)
  return _internal_x();
}
inline void BlockPosition::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void BlockPosition::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.BlockPosition.x)
}

// int32 y = 2;
inline void BlockPosition::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t BlockPosition::_internal_y() const {
  return _impl_.y_;
}
inline int32_t BlockPosition::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.BlockPosition.y)
  return _internal_y();
}
inline void BlockPosition::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void BlockPosition::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.BlockPosition.y)
}

// int32 z = 3;
inline void BlockPosition::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t BlockPosition::_internal_z() const {
  return _impl_.z_;
}
inline int32_t BlockPosition::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.BlockPosition.z)
  return _internal_z();
}
inline void BlockPosition::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void BlockPosition::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.BlockPosition.z)
}

// -------------------------------------------------------------------

// BlockState

// uint32 block_state = 1;
inline void BlockState::clear_block_state() {
  _impl_.block_state_ = 0u;
}
inline uint32_t BlockState::_internal_block_state() const {
  return _impl_.block_state_;
}
inline uint32_t BlockState::block_state() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.BlockState.block_state)
  return _internal_block_state();
}
inline void BlockState::_internal_set_block_state(uint32_t value) {
  
  _impl_.block_state_ = value;
}
inline void BlockState::set_block_state(uint32_t value) {
  _internal_set_block_state(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.BlockState.block_state)
}

// -------------------------------------------------------------------

// Gameplay

// .minecpp.proto.common.v1.DimensionType dimension = 1;
inline void Gameplay::clear_dimension() {
  _impl_.dimension_ = 0;
}
inline ::minecpp::proto::common::v1::DimensionType Gameplay::_internal_dimension() const {
  return static_cast< ::minecpp::proto::common::v1::DimensionType >(_impl_.dimension_);
}
inline ::minecpp::proto::common::v1::DimensionType Gameplay::dimension() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.dimension)
  return _internal_dimension();
}
inline void Gameplay::_internal_set_dimension(::minecpp::proto::common::v1::DimensionType value) {
  
  _impl_.dimension_ = value;
}
inline void Gameplay::set_dimension(::minecpp::proto::common::v1::DimensionType value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.dimension)
}

// uint64 seed = 2;
inline void Gameplay::clear_seed() {
  _impl_.seed_ = uint64_t{0u};
}
inline uint64_t Gameplay::_internal_seed() const {
  return _impl_.seed_;
}
inline uint64_t Gameplay::seed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.seed)
  return _internal_seed();
}
inline void Gameplay::_internal_set_seed(uint64_t value) {
  
  _impl_.seed_ = value;
}
inline void Gameplay::set_seed(uint64_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.seed)
}

// .minecpp.proto.common.v1.GameMode mode = 3;
inline void Gameplay::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::minecpp::proto::common::v1::GameMode Gameplay::_internal_mode() const {
  return static_cast< ::minecpp::proto::common::v1::GameMode >(_impl_.mode_);
}
inline ::minecpp::proto::common::v1::GameMode Gameplay::mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.mode)
  return _internal_mode();
}
inline void Gameplay::_internal_set_mode(::minecpp::proto::common::v1::GameMode value) {
  
  _impl_.mode_ = value;
}
inline void Gameplay::set_mode(::minecpp::proto::common::v1::GameMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.mode)
}

// .minecpp.proto.common.v1.WorldType world = 4;
inline void Gameplay::clear_world() {
  _impl_.world_ = 0;
}
inline ::minecpp::proto::common::v1::WorldType Gameplay::_internal_world() const {
  return static_cast< ::minecpp::proto::common::v1::WorldType >(_impl_.world_);
}
inline ::minecpp::proto::common::v1::WorldType Gameplay::world() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.world)
  return _internal_world();
}
inline void Gameplay::_internal_set_world(::minecpp::proto::common::v1::WorldType value) {
  
  _impl_.world_ = value;
}
inline void Gameplay::set_world(::minecpp::proto::common::v1::WorldType value) {
  _internal_set_world(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.world)
}

// int32 view_distance = 5;
inline void Gameplay::clear_view_distance() {
  _impl_.view_distance_ = 0;
}
inline int32_t Gameplay::_internal_view_distance() const {
  return _impl_.view_distance_;
}
inline int32_t Gameplay::view_distance() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.view_distance)
  return _internal_view_distance();
}
inline void Gameplay::_internal_set_view_distance(int32_t value) {
  
  _impl_.view_distance_ = value;
}
inline void Gameplay::set_view_distance(int32_t value) {
  _internal_set_view_distance(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.view_distance)
}

// bool hardcore = 6;
inline void Gameplay::clear_hardcore() {
  _impl_.hardcore_ = false;
}
inline bool Gameplay::_internal_hardcore() const {
  return _impl_.hardcore_;
}
inline bool Gameplay::hardcore() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.hardcore)
  return _internal_hardcore();
}
inline void Gameplay::_internal_set_hardcore(bool value) {
  
  _impl_.hardcore_ = value;
}
inline void Gameplay::set_hardcore(bool value) {
  _internal_set_hardcore(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.hardcore)
}

// int32 max_players = 7;
inline void Gameplay::clear_max_players() {
  _impl_.max_players_ = 0;
}
inline int32_t Gameplay::_internal_max_players() const {
  return _impl_.max_players_;
}
inline int32_t Gameplay::max_players() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.max_players)
  return _internal_max_players();
}
inline void Gameplay::_internal_set_max_players(int32_t value) {
  
  _impl_.max_players_ = value;
}
inline void Gameplay::set_max_players(int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.max_players)
}

// bool reduced_debug_info = 8;
inline void Gameplay::clear_reduced_debug_info() {
  _impl_.reduced_debug_info_ = false;
}
inline bool Gameplay::_internal_reduced_debug_info() const {
  return _impl_.reduced_debug_info_;
}
inline bool Gameplay::reduced_debug_info() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.reduced_debug_info)
  return _internal_reduced_debug_info();
}
inline void Gameplay::_internal_set_reduced_debug_info(bool value) {
  
  _impl_.reduced_debug_info_ = value;
}
inline void Gameplay::set_reduced_debug_info(bool value) {
  _internal_set_reduced_debug_info(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.reduced_debug_info)
}

// bool do_immediate_respawn = 9;
inline void Gameplay::clear_do_immediate_respawn() {
  _impl_.do_immediate_respawn_ = false;
}
inline bool Gameplay::_internal_do_immediate_respawn() const {
  return _impl_.do_immediate_respawn_;
}
inline bool Gameplay::do_immediate_respawn() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.do_immediate_respawn)
  return _internal_do_immediate_respawn();
}
inline void Gameplay::_internal_set_do_immediate_respawn(bool value) {
  
  _impl_.do_immediate_respawn_ = value;
}
inline void Gameplay::set_do_immediate_respawn(bool value) {
  _internal_set_do_immediate_respawn(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.do_immediate_respawn)
}

// .minecpp.proto.common.v1.Difficulty difficulty = 10;
inline void Gameplay::clear_difficulty() {
  _impl_.difficulty_ = 0;
}
inline ::minecpp::proto::common::v1::Difficulty Gameplay::_internal_difficulty() const {
  return static_cast< ::minecpp::proto::common::v1::Difficulty >(_impl_.difficulty_);
}
inline ::minecpp::proto::common::v1::Difficulty Gameplay::difficulty() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Gameplay.difficulty)
  return _internal_difficulty();
}
inline void Gameplay::_internal_set_difficulty(::minecpp::proto::common::v1::Difficulty value) {
  
  _impl_.difficulty_ = value;
}
inline void Gameplay::set_difficulty(::minecpp::proto::common::v1::Difficulty value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Gameplay.difficulty)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline double Vector3::_internal_x() const {
  return _impl_.x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline double Vector3::_internal_y() const {
  return _impl_.y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline double Vector3::_internal_z() const {
  return _impl_.z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3.z)
}

// -------------------------------------------------------------------

// Rotation

// float yaw = 1;
inline void Rotation::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Rotation::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Rotation.yaw)
  return _internal_yaw();
}
inline void Rotation::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Rotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Rotation.yaw)
}

// float pitch = 2;
inline void Rotation::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Rotation::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Rotation.pitch)
  return _internal_pitch();
}
inline void Rotation::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Rotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Rotation.pitch)
}

// -------------------------------------------------------------------

// Vector3f

// float x = 1;
inline void Vector3f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3f::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3f.x)
  return _internal_x();
}
inline void Vector3f::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3f.x)
}

// float y = 2;
inline void Vector3f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3f::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3f.y)
  return _internal_y();
}
inline void Vector3f::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3f.y)
}

// float z = 3;
inline void Vector3f::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3f::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.Vector3f.z)
  return _internal_z();
}
inline void Vector3f::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.Vector3f.z)
}

// -------------------------------------------------------------------

// ItemId

// uint32 id = 1;
inline void ItemId::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ItemId::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ItemId::id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.ItemId.id)
  return _internal_id();
}
inline void ItemId::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ItemId::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.ItemId.id)
}

// -------------------------------------------------------------------

// LightLevel

// uint32 level = 1;
inline void LightLevel::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t LightLevel::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t LightLevel::level() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.LightLevel.level)
  return _internal_level();
}
inline void LightLevel::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void LightLevel::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.LightLevel.level)
}

// -------------------------------------------------------------------

// ChunkSectionPosition

// .minecpp.proto.common.v1.ChunkPosition chunk_position = 1;
inline bool ChunkSectionPosition::_internal_has_chunk_position() const {
  return this != internal_default_instance() && _impl_.chunk_position_ != nullptr;
}
inline bool ChunkSectionPosition::has_chunk_position() const {
  return _internal_has_chunk_position();
}
inline void ChunkSectionPosition::clear_chunk_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunk_position_ != nullptr) {
    delete _impl_.chunk_position_;
  }
  _impl_.chunk_position_ = nullptr;
}
inline const ::minecpp::proto::common::v1::ChunkPosition& ChunkSectionPosition::_internal_chunk_position() const {
  const ::minecpp::proto::common::v1::ChunkPosition* p = _impl_.chunk_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::ChunkPosition&>(
      ::minecpp::proto::common::v1::_ChunkPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::ChunkPosition& ChunkSectionPosition::chunk_position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.ChunkSectionPosition.chunk_position)
  return _internal_chunk_position();
}
inline void ChunkSectionPosition::unsafe_arena_set_allocated_chunk_position(
    ::minecpp::proto::common::v1::ChunkPosition* chunk_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunk_position_);
  }
  _impl_.chunk_position_ = chunk_position;
  if (chunk_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.v1.ChunkSectionPosition.chunk_position)
}
inline ::minecpp::proto::common::v1::ChunkPosition* ChunkSectionPosition::release_chunk_position() {
  
  ::minecpp::proto::common::v1::ChunkPosition* temp = _impl_.chunk_position_;
  _impl_.chunk_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkPosition* ChunkSectionPosition::unsafe_arena_release_chunk_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.common.v1.ChunkSectionPosition.chunk_position)
  
  ::minecpp::proto::common::v1::ChunkPosition* temp = _impl_.chunk_position_;
  _impl_.chunk_position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkPosition* ChunkSectionPosition::_internal_mutable_chunk_position() {
  
  if (_impl_.chunk_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::ChunkPosition>(GetArenaForAllocation());
    _impl_.chunk_position_ = p;
  }
  return _impl_.chunk_position_;
}
inline ::minecpp::proto::common::v1::ChunkPosition* ChunkSectionPosition::mutable_chunk_position() {
  ::minecpp::proto::common::v1::ChunkPosition* _msg = _internal_mutable_chunk_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.v1.ChunkSectionPosition.chunk_position)
  return _msg;
}
inline void ChunkSectionPosition::set_allocated_chunk_position(::minecpp::proto::common::v1::ChunkPosition* chunk_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chunk_position_;
  }
  if (chunk_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk_position);
    if (message_arena != submessage_arena) {
      chunk_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chunk_position_ = chunk_position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.v1.ChunkSectionPosition.chunk_position)
}

// int32 y = 2;
inline void ChunkSectionPosition::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t ChunkSectionPosition::_internal_y() const {
  return _impl_.y_;
}
inline int32_t ChunkSectionPosition::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.ChunkSectionPosition.y)
  return _internal_y();
}
inline void ChunkSectionPosition::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void ChunkSectionPosition::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.ChunkSectionPosition.y)
}

// -------------------------------------------------------------------

// SectionRange

// .minecpp.proto.common.v1.ChunkSectionPosition from = 1;
inline bool SectionRange::_internal_has_from() const {
  return this != internal_default_instance() && _impl_.from_ != nullptr;
}
inline bool SectionRange::has_from() const {
  return _internal_has_from();
}
inline void SectionRange::clear_from() {
  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
}
inline const ::minecpp::proto::common::v1::ChunkSectionPosition& SectionRange::_internal_from() const {
  const ::minecpp::proto::common::v1::ChunkSectionPosition* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::ChunkSectionPosition&>(
      ::minecpp::proto::common::v1::_ChunkSectionPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::ChunkSectionPosition& SectionRange::from() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.SectionRange.from)
  return _internal_from();
}
inline void SectionRange::unsafe_arena_set_allocated_from(
    ::minecpp::proto::common::v1::ChunkSectionPosition* from) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.v1.SectionRange.from)
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::release_from() {
  
  ::minecpp::proto::common::v1::ChunkSectionPosition* temp = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:minecpp.proto.common.v1.SectionRange.from)
  
  ::minecpp::proto::common::v1::ChunkSectionPosition* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::_internal_mutable_from() {
  
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::ChunkSectionPosition>(GetArenaForAllocation());
    _impl_.from_ = p;
  }
  return _impl_.from_;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::mutable_from() {
  ::minecpp::proto::common::v1::ChunkSectionPosition* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.v1.SectionRange.from)
  return _msg;
}
inline void SectionRange::set_allocated_from(::minecpp::proto::common::v1::ChunkSectionPosition* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.from_ = from;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.v1.SectionRange.from)
}

// .minecpp.proto.common.v1.ChunkSectionPosition to = 2;
inline bool SectionRange::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool SectionRange::has_to() const {
  return _internal_has_to();
}
inline void SectionRange::clear_to() {
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
}
inline const ::minecpp::proto::common::v1::ChunkSectionPosition& SectionRange::_internal_to() const {
  const ::minecpp::proto::common::v1::ChunkSectionPosition* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::ChunkSectionPosition&>(
      ::minecpp::proto::common::v1::_ChunkSectionPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::ChunkSectionPosition& SectionRange::to() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.SectionRange.to)
  return _internal_to();
}
inline void SectionRange::unsafe_arena_set_allocated_to(
    ::minecpp::proto::common::v1::ChunkSectionPosition* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.v1.SectionRange.to)
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::release_to() {
  
  ::minecpp::proto::common::v1::ChunkSectionPosition* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:minecpp.proto.common.v1.SectionRange.to)
  
  ::minecpp::proto::common::v1::ChunkSectionPosition* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::ChunkSectionPosition>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::minecpp::proto::common::v1::ChunkSectionPosition* SectionRange::mutable_to() {
  ::minecpp::proto::common::v1::ChunkSectionPosition* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.v1.SectionRange.to)
  return _msg;
}
inline void SectionRange::set_allocated_to(::minecpp::proto::common::v1::ChunkSectionPosition* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.v1.SectionRange.to)
}

// -------------------------------------------------------------------

// LightSource

// .minecpp.proto.common.v1.BlockPosition position = 1;
inline bool LightSource::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool LightSource::has_position() const {
  return _internal_has_position();
}
inline void LightSource::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::minecpp::proto::common::v1::BlockPosition& LightSource::_internal_position() const {
  const ::minecpp::proto::common::v1::BlockPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::v1::BlockPosition&>(
      ::minecpp::proto::common::v1::_BlockPosition_default_instance_);
}
inline const ::minecpp::proto::common::v1::BlockPosition& LightSource::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.LightSource.position)
  return _internal_position();
}
inline void LightSource::unsafe_arena_set_allocated_position(
    ::minecpp::proto::common::v1::BlockPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.v1.LightSource.position)
}
inline ::minecpp::proto::common::v1::BlockPosition* LightSource::release_position() {
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* LightSource::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:minecpp.proto.common.v1.LightSource.position)
  
  ::minecpp::proto::common::v1::BlockPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::v1::BlockPosition* LightSource::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::v1::BlockPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::v1::BlockPosition* LightSource::mutable_position() {
  ::minecpp::proto::common::v1::BlockPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.v1.LightSource.position)
  return _msg;
}
inline void LightSource::set_allocated_position(::minecpp::proto::common::v1::BlockPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.v1.LightSource.position)
}

// int32 strength = 2;
inline void LightSource::clear_strength() {
  _impl_.strength_ = 0;
}
inline int32_t LightSource::_internal_strength() const {
  return _impl_.strength_;
}
inline int32_t LightSource::strength() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.v1.LightSource.strength)
  return _internal_strength();
}
inline void LightSource::_internal_set_strength(int32_t value) {
  
  _impl_.strength_ = value;
}
inline void LightSource::set_strength(int32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.v1.LightSource.strength)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace minecpp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::minecpp::proto::common::v1::DimensionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::DimensionType>() {
  return ::minecpp::proto::common::v1::DimensionType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::Difficulty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::Difficulty>() {
  return ::minecpp::proto::common::v1::Difficulty_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::GameMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::GameMode>() {
  return ::minecpp::proto::common::v1::GameMode_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::WorldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::WorldType>() {
  return ::minecpp::proto::common::v1::WorldType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::PlayerDiggingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::PlayerDiggingState>() {
  return ::minecpp::proto::common::v1::PlayerDiggingState_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::Face> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::Face>() {
  return ::minecpp::proto::common::v1::Face_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::LightType>() {
  return ::minecpp::proto::common::v1::LightType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::InteractionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::InteractionType>() {
  return ::minecpp::proto::common::v1::InteractionType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::HandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::HandType>() {
  return ::minecpp::proto::common::v1::HandType_descriptor();
}
template <> struct is_proto_enum< ::minecpp::proto::common::v1::EntityAnimation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minecpp::proto::common::v1::EntityAnimation>() {
  return ::minecpp::proto::common::v1::EntityAnimation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fv1_2fCommon_2eproto
