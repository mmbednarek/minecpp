// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/common/Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fCommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fCommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_minecpp_2fproto_2fcommon_2fCommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_minecpp_2fproto_2fcommon_2fCommon_2eproto;
namespace minecpp {
namespace proto {
namespace common {
class BlockPosition;
struct BlockPositionDefaultTypeInternal;
extern BlockPositionDefaultTypeInternal _BlockPosition_default_instance_;
class BlockState;
struct BlockStateDefaultTypeInternal;
extern BlockStateDefaultTypeInternal _BlockState_default_instance_;
class ChunkPosition;
struct ChunkPositionDefaultTypeInternal;
extern ChunkPositionDefaultTypeInternal _ChunkPosition_default_instance_;
class ChunkSectionPosition;
struct ChunkSectionPositionDefaultTypeInternal;
extern ChunkSectionPositionDefaultTypeInternal _ChunkSectionPosition_default_instance_;
class Gameplay;
struct GameplayDefaultTypeInternal;
extern GameplayDefaultTypeInternal _Gameplay_default_instance_;
class ItemId;
struct ItemIdDefaultTypeInternal;
extern ItemIdDefaultTypeInternal _ItemId_default_instance_;
class LightLevel;
struct LightLevelDefaultTypeInternal;
extern LightLevelDefaultTypeInternal _LightLevel_default_instance_;
class LightSource;
struct LightSourceDefaultTypeInternal;
extern LightSourceDefaultTypeInternal _LightSource_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class SectionRange;
struct SectionRangeDefaultTypeInternal;
extern SectionRangeDefaultTypeInternal _SectionRange_default_instance_;
class Slot;
struct SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
class UUID;
struct UUIDDefaultTypeInternal;
extern UUIDDefaultTypeInternal _UUID_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace minecpp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace minecpp {
namespace proto {
namespace common {
enum DimensionType : int {
  Overworld = 0,
  Nether = 1,
  End = 2,
  DimensionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DimensionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DimensionType_IsValid(int value);
constexpr DimensionType DimensionType_MIN = static_cast<DimensionType>(0);
constexpr DimensionType DimensionType_MAX = static_cast<DimensionType>(2);
constexpr int DimensionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
DimensionType_descriptor();
template <typename T>
const std::string& DimensionType_Name(T value) {
  static_assert(std::is_same<T, DimensionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DimensionType_Name().");
  return DimensionType_Name(static_cast<DimensionType>(value));
}
template <>
inline const std::string& DimensionType_Name(DimensionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DimensionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool DimensionType_Parse(absl::string_view name, DimensionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DimensionType>(
      DimensionType_descriptor(), name, value);
}
enum Difficulty : int {
  Easy = 0,
  Normal = 1,
  Hard = 2,
  Difficulty_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Difficulty_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Difficulty_IsValid(int value);
constexpr Difficulty Difficulty_MIN = static_cast<Difficulty>(0);
constexpr Difficulty Difficulty_MAX = static_cast<Difficulty>(2);
constexpr int Difficulty_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Difficulty_descriptor();
template <typename T>
const std::string& Difficulty_Name(T value) {
  static_assert(std::is_same<T, Difficulty>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Difficulty_Name().");
  return Difficulty_Name(static_cast<Difficulty>(value));
}
template <>
inline const std::string& Difficulty_Name(Difficulty value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Difficulty_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Difficulty_Parse(absl::string_view name, Difficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Difficulty>(
      Difficulty_descriptor(), name, value);
}
enum GameMode : int {
  Survival = 0,
  Creative = 1,
  Adventure = 2,
  Spectator = 3,
  GameMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameMode_IsValid(int value);
constexpr GameMode GameMode_MIN = static_cast<GameMode>(0);
constexpr GameMode GameMode_MAX = static_cast<GameMode>(3);
constexpr int GameMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GameMode_descriptor();
template <typename T>
const std::string& GameMode_Name(T value) {
  static_assert(std::is_same<T, GameMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameMode_Name().");
  return GameMode_Name(static_cast<GameMode>(value));
}
template <>
inline const std::string& GameMode_Name(GameMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GameMode_Parse(absl::string_view name, GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameMode>(
      GameMode_descriptor(), name, value);
}
enum WorldType : int {
  Default = 0,
  Flat = 1,
  LargeBiomes = 2,
  Amplified = 3,
  Customised = 4,
  WorldType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WorldType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WorldType_IsValid(int value);
constexpr WorldType WorldType_MIN = static_cast<WorldType>(0);
constexpr WorldType WorldType_MAX = static_cast<WorldType>(4);
constexpr int WorldType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
WorldType_descriptor();
template <typename T>
const std::string& WorldType_Name(T value) {
  static_assert(std::is_same<T, WorldType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WorldType_Name().");
  return WorldType_Name(static_cast<WorldType>(value));
}
template <>
inline const std::string& WorldType_Name(WorldType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WorldType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool WorldType_Parse(absl::string_view name, WorldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorldType>(
      WorldType_descriptor(), name, value);
}
enum PlayerDiggingState : int {
  Digging = 0,
  CanceledDigging = 1,
  FinishedDigging = 2,
  DropAllItems = 3,
  DropItem = 4,
  ReleaseUseItem = 5,
  SwapHeldItems = 6,
  PlayerDiggingState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlayerDiggingState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlayerDiggingState_IsValid(int value);
constexpr PlayerDiggingState PlayerDiggingState_MIN = static_cast<PlayerDiggingState>(0);
constexpr PlayerDiggingState PlayerDiggingState_MAX = static_cast<PlayerDiggingState>(6);
constexpr int PlayerDiggingState_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
PlayerDiggingState_descriptor();
template <typename T>
const std::string& PlayerDiggingState_Name(T value) {
  static_assert(std::is_same<T, PlayerDiggingState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlayerDiggingState_Name().");
  return PlayerDiggingState_Name(static_cast<PlayerDiggingState>(value));
}
template <>
inline const std::string& PlayerDiggingState_Name(PlayerDiggingState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PlayerDiggingState_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool PlayerDiggingState_Parse(absl::string_view name, PlayerDiggingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerDiggingState>(
      PlayerDiggingState_descriptor(), name, value);
}
enum Face : int {
  Bottom = 0,
  Top = 1,
  North = 2,
  South = 3,
  West = 4,
  East = 5,
  Face_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Face_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Face_IsValid(int value);
constexpr Face Face_MIN = static_cast<Face>(0);
constexpr Face Face_MAX = static_cast<Face>(5);
constexpr int Face_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Face_descriptor();
template <typename T>
const std::string& Face_Name(T value) {
  static_assert(std::is_same<T, Face>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Face_Name().");
  return Face_Name(static_cast<Face>(value));
}
template <>
inline const std::string& Face_Name(Face value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Face_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Face_Parse(absl::string_view name, Face* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Face>(
      Face_descriptor(), name, value);
}
enum LightType : int {
  Block = 0,
  Sky = 1,
  LightType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LightType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LightType_IsValid(int value);
constexpr LightType LightType_MIN = static_cast<LightType>(0);
constexpr LightType LightType_MAX = static_cast<LightType>(1);
constexpr int LightType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
LightType_descriptor();
template <typename T>
const std::string& LightType_Name(T value) {
  static_assert(std::is_same<T, LightType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LightType_Name().");
  return LightType_Name(static_cast<LightType>(value));
}
template <>
inline const std::string& LightType_Name(LightType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LightType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool LightType_Parse(absl::string_view name, LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightType>(
      LightType_descriptor(), name, value);
}
enum InteractionType : int {
  Interact = 0,
  Attack = 1,
  InteractAt = 2,
  InteractionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InteractionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InteractionType_IsValid(int value);
constexpr InteractionType InteractionType_MIN = static_cast<InteractionType>(0);
constexpr InteractionType InteractionType_MAX = static_cast<InteractionType>(2);
constexpr int InteractionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
InteractionType_descriptor();
template <typename T>
const std::string& InteractionType_Name(T value) {
  static_assert(std::is_same<T, InteractionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InteractionType_Name().");
  return InteractionType_Name(static_cast<InteractionType>(value));
}
template <>
inline const std::string& InteractionType_Name(InteractionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InteractionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool InteractionType_Parse(absl::string_view name, InteractionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InteractionType>(
      InteractionType_descriptor(), name, value);
}
enum HandType : int {
  MainHand = 0,
  OffHand = 1,
  HandType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HandType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HandType_IsValid(int value);
constexpr HandType HandType_MIN = static_cast<HandType>(0);
constexpr HandType HandType_MAX = static_cast<HandType>(1);
constexpr int HandType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
HandType_descriptor();
template <typename T>
const std::string& HandType_Name(T value) {
  static_assert(std::is_same<T, HandType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HandType_Name().");
  return HandType_Name(static_cast<HandType>(value));
}
template <>
inline const std::string& HandType_Name(HandType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HandType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool HandType_Parse(absl::string_view name, HandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HandType>(
      HandType_descriptor(), name, value);
}
enum EntityAnimation : int {
  SwingMainArm = 0,
  TakeDamage = 1,
  LeaveBed = 2,
  SwingOffHand = 3,
  CriticalEffect = 4,
  MagicCriticalEffect = 5,
  EntityAnimation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EntityAnimation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EntityAnimation_IsValid(int value);
constexpr EntityAnimation EntityAnimation_MIN = static_cast<EntityAnimation>(0);
constexpr EntityAnimation EntityAnimation_MAX = static_cast<EntityAnimation>(5);
constexpr int EntityAnimation_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
EntityAnimation_descriptor();
template <typename T>
const std::string& EntityAnimation_Name(T value) {
  static_assert(std::is_same<T, EntityAnimation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EntityAnimation_Name().");
  return EntityAnimation_Name(static_cast<EntityAnimation>(value));
}
template <>
inline const std::string& EntityAnimation_Name(EntityAnimation value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EntityAnimation_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EntityAnimation_Parse(absl::string_view name, EntityAnimation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityAnimation>(
      EntityAnimation_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChunkPosition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.ChunkPosition) */ {
 public:
  inline ChunkPosition() : ChunkPosition(nullptr) {}
  ~ChunkPosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkPosition(::google::protobuf::internal::ConstantInitialized);

  ChunkPosition(const ChunkPosition& from);
  ChunkPosition(ChunkPosition&& from) noexcept
    : ChunkPosition() {
    *this = ::std::move(from);
  }

  inline ChunkPosition& operator=(const ChunkPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkPosition& operator=(ChunkPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkPosition* internal_default_instance() {
    return reinterpret_cast<const ChunkPosition*>(
               &_ChunkPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChunkPosition& a, ChunkPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkPosition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkPosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkPosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChunkPosition& from) {
    ChunkPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkPosition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.ChunkPosition";
  }
  protected:
  explicit ChunkPosition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kZFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 z = 2;
  void clear_z() ;
  ::int32_t z() const;
  void set_z(::int32_t value);

  private:
  ::int32_t _internal_z() const;
  void _internal_set_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.ChunkPosition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t x_;
    ::int32_t z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class BlockPosition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.BlockPosition) */ {
 public:
  inline BlockPosition() : BlockPosition(nullptr) {}
  ~BlockPosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockPosition(::google::protobuf::internal::ConstantInitialized);

  BlockPosition(const BlockPosition& from);
  BlockPosition(BlockPosition&& from) noexcept
    : BlockPosition() {
    *this = ::std::move(from);
  }

  inline BlockPosition& operator=(const BlockPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPosition& operator=(BlockPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockPosition* internal_default_instance() {
    return reinterpret_cast<const BlockPosition*>(
               &_BlockPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockPosition& a, BlockPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockPosition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockPosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockPosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockPosition& from) {
    BlockPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockPosition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.BlockPosition";
  }
  protected:
  explicit BlockPosition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // int32 z = 3;
  void clear_z() ;
  ::int32_t z() const;
  void set_z(::int32_t value);

  private:
  ::int32_t _internal_z() const;
  void _internal_set_z(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.BlockPosition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t x_;
    ::int32_t y_;
    ::int32_t z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class BlockState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.BlockState) */ {
 public:
  inline BlockState() : BlockState(nullptr) {}
  ~BlockState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockState(::google::protobuf::internal::ConstantInitialized);

  BlockState(const BlockState& from);
  BlockState(BlockState&& from) noexcept
    : BlockState() {
    *this = ::std::move(from);
  }

  inline BlockState& operator=(const BlockState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockState& operator=(BlockState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockState* internal_default_instance() {
    return reinterpret_cast<const BlockState*>(
               &_BlockState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockState& a, BlockState& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlockState& from) {
    BlockState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.BlockState";
  }
  protected:
  explicit BlockState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockStateFieldNumber = 1,
  };
  // uint32 block_state = 1;
  void clear_block_state() ;
  ::uint32_t block_state() const;
  void set_block_state(::uint32_t value);

  private:
  ::uint32_t _internal_block_state() const;
  void _internal_set_block_state(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.BlockState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t block_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class Gameplay final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.Gameplay) */ {
 public:
  inline Gameplay() : Gameplay(nullptr) {}
  ~Gameplay() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Gameplay(::google::protobuf::internal::ConstantInitialized);

  Gameplay(const Gameplay& from);
  Gameplay(Gameplay&& from) noexcept
    : Gameplay() {
    *this = ::std::move(from);
  }

  inline Gameplay& operator=(const Gameplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gameplay& operator=(Gameplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gameplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gameplay* internal_default_instance() {
    return reinterpret_cast<const Gameplay*>(
               &_Gameplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gameplay& a, Gameplay& b) {
    a.Swap(&b);
  }
  inline void Swap(Gameplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gameplay* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gameplay* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gameplay>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Gameplay& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Gameplay& from) {
    Gameplay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gameplay* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.Gameplay";
  }
  protected:
  explicit Gameplay(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 2,
    kDimensionFieldNumber = 1,
    kModeFieldNumber = 3,
    kWorldFieldNumber = 4,
    kViewDistanceFieldNumber = 5,
    kMaxPlayersFieldNumber = 7,
    kHardcoreFieldNumber = 6,
    kReducedDebugInfoFieldNumber = 8,
    kDoImmediateRespawnFieldNumber = 9,
    kDifficultyFieldNumber = 10,
  };
  // uint64 seed = 2;
  void clear_seed() ;
  ::uint64_t seed() const;
  void set_seed(::uint64_t value);

  private:
  ::uint64_t _internal_seed() const;
  void _internal_set_seed(::uint64_t value);

  public:
  // .minecpp.proto.common.DimensionType dimension = 1;
  void clear_dimension() ;
  ::minecpp::proto::common::DimensionType dimension() const;
  void set_dimension(::minecpp::proto::common::DimensionType value);

  private:
  ::minecpp::proto::common::DimensionType _internal_dimension() const;
  void _internal_set_dimension(::minecpp::proto::common::DimensionType value);

  public:
  // .minecpp.proto.common.GameMode mode = 3;
  void clear_mode() ;
  ::minecpp::proto::common::GameMode mode() const;
  void set_mode(::minecpp::proto::common::GameMode value);

  private:
  ::minecpp::proto::common::GameMode _internal_mode() const;
  void _internal_set_mode(::minecpp::proto::common::GameMode value);

  public:
  // .minecpp.proto.common.WorldType world = 4;
  void clear_world() ;
  ::minecpp::proto::common::WorldType world() const;
  void set_world(::minecpp::proto::common::WorldType value);

  private:
  ::minecpp::proto::common::WorldType _internal_world() const;
  void _internal_set_world(::minecpp::proto::common::WorldType value);

  public:
  // int32 view_distance = 5;
  void clear_view_distance() ;
  ::int32_t view_distance() const;
  void set_view_distance(::int32_t value);

  private:
  ::int32_t _internal_view_distance() const;
  void _internal_set_view_distance(::int32_t value);

  public:
  // int32 max_players = 7;
  void clear_max_players() ;
  ::int32_t max_players() const;
  void set_max_players(::int32_t value);

  private:
  ::int32_t _internal_max_players() const;
  void _internal_set_max_players(::int32_t value);

  public:
  // bool hardcore = 6;
  void clear_hardcore() ;
  bool hardcore() const;
  void set_hardcore(bool value);

  private:
  bool _internal_hardcore() const;
  void _internal_set_hardcore(bool value);

  public:
  // bool reduced_debug_info = 8;
  void clear_reduced_debug_info() ;
  bool reduced_debug_info() const;
  void set_reduced_debug_info(bool value);

  private:
  bool _internal_reduced_debug_info() const;
  void _internal_set_reduced_debug_info(bool value);

  public:
  // bool do_immediate_respawn = 9;
  void clear_do_immediate_respawn() ;
  bool do_immediate_respawn() const;
  void set_do_immediate_respawn(bool value);

  private:
  bool _internal_do_immediate_respawn() const;
  void _internal_set_do_immediate_respawn(bool value);

  public:
  // .minecpp.proto.common.Difficulty difficulty = 10;
  void clear_difficulty() ;
  ::minecpp::proto::common::Difficulty difficulty() const;
  void set_difficulty(::minecpp::proto::common::Difficulty value);

  private:
  ::minecpp::proto::common::Difficulty _internal_difficulty() const;
  void _internal_set_difficulty(::minecpp::proto::common::Difficulty value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.Gameplay)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t seed_;
    int dimension_;
    int mode_;
    int world_;
    ::int32_t view_distance_;
    ::int32_t max_players_;
    bool hardcore_;
    bool reduced_debug_info_;
    bool do_immediate_respawn_;
    int difficulty_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class Rotation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Rotation(::google::protobuf::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Rotation& from) {
    Rotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.Rotation";
  }
  protected:
  explicit Rotation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
  };
  // float yaw = 1;
  void clear_yaw() ;
  float yaw() const;
  void set_yaw(float value);

  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);

  public:
  // float pitch = 2;
  void clear_pitch() ;
  float pitch() const;
  void set_pitch(float value);

  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.Rotation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float yaw_;
    float pitch_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class ItemId final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.ItemId) */ {
 public:
  inline ItemId() : ItemId(nullptr) {}
  ~ItemId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ItemId(::google::protobuf::internal::ConstantInitialized);

  ItemId(const ItemId& from);
  ItemId(ItemId&& from) noexcept
    : ItemId() {
    *this = ::std::move(from);
  }

  inline ItemId& operator=(const ItemId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemId& operator=(ItemId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemId* internal_default_instance() {
    return reinterpret_cast<const ItemId*>(
               &_ItemId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ItemId& a, ItemId& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemId* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ItemId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ItemId& from) {
    ItemId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemId* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.ItemId";
  }
  protected:
  explicit ItemId(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.ItemId)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class LightLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.LightLevel) */ {
 public:
  inline LightLevel() : LightLevel(nullptr) {}
  ~LightLevel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LightLevel(::google::protobuf::internal::ConstantInitialized);

  LightLevel(const LightLevel& from);
  LightLevel(LightLevel&& from) noexcept
    : LightLevel() {
    *this = ::std::move(from);
  }

  inline LightLevel& operator=(const LightLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightLevel& operator=(LightLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightLevel* internal_default_instance() {
    return reinterpret_cast<const LightLevel*>(
               &_LightLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LightLevel& a, LightLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(LightLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightLevel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LightLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LightLevel& from) {
    LightLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightLevel* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.LightLevel";
  }
  protected:
  explicit LightLevel(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // uint32 level = 1;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.LightLevel)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class ChunkSectionPosition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.ChunkSectionPosition) */ {
 public:
  inline ChunkSectionPosition() : ChunkSectionPosition(nullptr) {}
  ~ChunkSectionPosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChunkSectionPosition(::google::protobuf::internal::ConstantInitialized);

  ChunkSectionPosition(const ChunkSectionPosition& from);
  ChunkSectionPosition(ChunkSectionPosition&& from) noexcept
    : ChunkSectionPosition() {
    *this = ::std::move(from);
  }

  inline ChunkSectionPosition& operator=(const ChunkSectionPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkSectionPosition& operator=(ChunkSectionPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkSectionPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkSectionPosition* internal_default_instance() {
    return reinterpret_cast<const ChunkSectionPosition*>(
               &_ChunkSectionPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChunkSectionPosition& a, ChunkSectionPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkSectionPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkSectionPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkSectionPosition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkSectionPosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChunkSectionPosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChunkSectionPosition& from) {
    ChunkSectionPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkSectionPosition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.ChunkSectionPosition";
  }
  protected:
  explicit ChunkSectionPosition(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkPositionFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .minecpp.proto.common.ChunkPosition chunk_position = 1;
  bool has_chunk_position() const;
  void clear_chunk_position() ;
  const ::minecpp::proto::common::ChunkPosition& chunk_position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::ChunkPosition* release_chunk_position();
  ::minecpp::proto::common::ChunkPosition* mutable_chunk_position();
  void set_allocated_chunk_position(::minecpp::proto::common::ChunkPosition* value);
  void unsafe_arena_set_allocated_chunk_position(::minecpp::proto::common::ChunkPosition* value);
  ::minecpp::proto::common::ChunkPosition* unsafe_arena_release_chunk_position();

  private:
  const ::minecpp::proto::common::ChunkPosition& _internal_chunk_position() const;
  ::minecpp::proto::common::ChunkPosition* _internal_mutable_chunk_position();

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.ChunkSectionPosition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::minecpp::proto::common::ChunkPosition* chunk_position_;
    ::int32_t y_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class SectionRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.SectionRange) */ {
 public:
  inline SectionRange() : SectionRange(nullptr) {}
  ~SectionRange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SectionRange(::google::protobuf::internal::ConstantInitialized);

  SectionRange(const SectionRange& from);
  SectionRange(SectionRange&& from) noexcept
    : SectionRange() {
    *this = ::std::move(from);
  }

  inline SectionRange& operator=(const SectionRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionRange& operator=(SectionRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionRange* internal_default_instance() {
    return reinterpret_cast<const SectionRange*>(
               &_SectionRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SectionRange& a, SectionRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionRange* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionRange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SectionRange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SectionRange& from) {
    SectionRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionRange* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.SectionRange";
  }
  protected:
  explicit SectionRange(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .minecpp.proto.common.ChunkSectionPosition from = 1;
  bool has_from() const;
  void clear_from() ;
  const ::minecpp::proto::common::ChunkSectionPosition& from() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::ChunkSectionPosition* release_from();
  ::minecpp::proto::common::ChunkSectionPosition* mutable_from();
  void set_allocated_from(::minecpp::proto::common::ChunkSectionPosition* value);
  void unsafe_arena_set_allocated_from(::minecpp::proto::common::ChunkSectionPosition* value);
  ::minecpp::proto::common::ChunkSectionPosition* unsafe_arena_release_from();

  private:
  const ::minecpp::proto::common::ChunkSectionPosition& _internal_from() const;
  ::minecpp::proto::common::ChunkSectionPosition* _internal_mutable_from();

  public:
  // .minecpp.proto.common.ChunkSectionPosition to = 2;
  bool has_to() const;
  void clear_to() ;
  const ::minecpp::proto::common::ChunkSectionPosition& to() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::ChunkSectionPosition* release_to();
  ::minecpp::proto::common::ChunkSectionPosition* mutable_to();
  void set_allocated_to(::minecpp::proto::common::ChunkSectionPosition* value);
  void unsafe_arena_set_allocated_to(::minecpp::proto::common::ChunkSectionPosition* value);
  ::minecpp::proto::common::ChunkSectionPosition* unsafe_arena_release_to();

  private:
  const ::minecpp::proto::common::ChunkSectionPosition& _internal_to() const;
  ::minecpp::proto::common::ChunkSectionPosition* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.SectionRange)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::minecpp::proto::common::ChunkSectionPosition* from_;
    ::minecpp::proto::common::ChunkSectionPosition* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class LightSource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.LightSource) */ {
 public:
  inline LightSource() : LightSource(nullptr) {}
  ~LightSource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LightSource(::google::protobuf::internal::ConstantInitialized);

  LightSource(const LightSource& from);
  LightSource(LightSource&& from) noexcept
    : LightSource() {
    *this = ::std::move(from);
  }

  inline LightSource& operator=(const LightSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightSource& operator=(LightSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightSource* internal_default_instance() {
    return reinterpret_cast<const LightSource*>(
               &_LightSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LightSource& a, LightSource& b) {
    a.Swap(&b);
  }
  inline void Swap(LightSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightSource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightSource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LightSource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LightSource& from) {
    LightSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightSource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.LightSource";
  }
  protected:
  explicit LightSource(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kStrengthFieldNumber = 2,
  };
  // .minecpp.proto.common.BlockPosition position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::minecpp::proto::common::BlockPosition& position() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::BlockPosition* release_position();
  ::minecpp::proto::common::BlockPosition* mutable_position();
  void set_allocated_position(::minecpp::proto::common::BlockPosition* value);
  void unsafe_arena_set_allocated_position(::minecpp::proto::common::BlockPosition* value);
  ::minecpp::proto::common::BlockPosition* unsafe_arena_release_position();

  private:
  const ::minecpp::proto::common::BlockPosition& _internal_position() const;
  ::minecpp::proto::common::BlockPosition* _internal_mutable_position();

  public:
  // int32 strength = 2;
  void clear_strength() ;
  ::int32_t strength() const;
  void set_strength(::int32_t value);

  private:
  ::int32_t _internal_strength() const;
  void _internal_set_strength(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.LightSource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::minecpp::proto::common::BlockPosition* position_;
    ::int32_t strength_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class UUID final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.UUID) */ {
 public:
  inline UUID() : UUID(nullptr) {}
  ~UUID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UUID(::google::protobuf::internal::ConstantInitialized);

  UUID(const UUID& from);
  UUID(UUID&& from) noexcept
    : UUID() {
    *this = ::std::move(from);
  }

  inline UUID& operator=(const UUID& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUID& operator=(UUID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUID& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUID* internal_default_instance() {
    return reinterpret_cast<const UUID*>(
               &_UUID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UUID& a, UUID& b) {
    a.Swap(&b);
  }
  inline void Swap(UUID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UUID* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UUID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UUID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UUID& from) {
    UUID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUID* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.UUID";
  }
  protected:
  explicit UUID(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerFieldNumber = 1,
    kUpperFieldNumber = 2,
  };
  // uint64 lower = 1;
  void clear_lower() ;
  ::uint64_t lower() const;
  void set_lower(::uint64_t value);

  private:
  ::uint64_t _internal_lower() const;
  void _internal_set_lower(::uint64_t value);

  public:
  // uint64 upper = 2;
  void clear_upper() ;
  ::uint64_t upper() const;
  void set_upper(::uint64_t value);

  private:
  ::uint64_t _internal_upper() const;
  void _internal_set_upper(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.UUID)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t lower_;
    ::uint64_t upper_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};// -------------------------------------------------------------------

class Slot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:minecpp.proto.common.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {}
  ~Slot() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Slot(::google::protobuf::internal::ConstantInitialized);

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slot* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Slot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Slot& from) {
    Slot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "minecpp.proto.common.Slot";
  }
  protected:
  explicit Slot(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbtDataFieldNumber = 3,
    kItemIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // bytes nbt_data = 3;
  void clear_nbt_data() ;
  const std::string& nbt_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nbt_data(Arg_&& arg, Args_... args);
  std::string* mutable_nbt_data();
  PROTOBUF_NODISCARD std::string* release_nbt_data();
  void set_allocated_nbt_data(std::string* ptr);

  private:
  const std::string& _internal_nbt_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nbt_data(
      const std::string& value);
  std::string* _internal_mutable_nbt_data();

  public:
  // .minecpp.proto.common.ItemId item_id = 1;
  bool has_item_id() const;
  void clear_item_id() ;
  const ::minecpp::proto::common::ItemId& item_id() const;
  PROTOBUF_NODISCARD ::minecpp::proto::common::ItemId* release_item_id();
  ::minecpp::proto::common::ItemId* mutable_item_id();
  void set_allocated_item_id(::minecpp::proto::common::ItemId* value);
  void unsafe_arena_set_allocated_item_id(::minecpp::proto::common::ItemId* value);
  ::minecpp::proto::common::ItemId* unsafe_arena_release_item_id();

  private:
  const ::minecpp::proto::common::ItemId& _internal_item_id() const;
  ::minecpp::proto::common::ItemId* _internal_mutable_item_id();

  public:
  // uint32 count = 2;
  void clear_count() ;
  ::uint32_t count() const;
  void set_count(::uint32_t value);

  private:
  ::uint32_t _internal_count() const;
  void _internal_set_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:minecpp.proto.common.Slot)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr nbt_data_;
    ::minecpp::proto::common::ItemId* item_id_;
    ::uint32_t count_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_minecpp_2fproto_2fcommon_2fCommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChunkPosition

// int32 x = 1;
inline void ChunkPosition::clear_x() {
  _impl_.x_ = 0;
}
inline ::int32_t ChunkPosition::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.ChunkPosition.x)
  return _internal_x();
}
inline void ChunkPosition::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.ChunkPosition.x)
}
inline ::int32_t ChunkPosition::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void ChunkPosition::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 z = 2;
inline void ChunkPosition::clear_z() {
  _impl_.z_ = 0;
}
inline ::int32_t ChunkPosition::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.ChunkPosition.z)
  return _internal_z();
}
inline void ChunkPosition::set_z(::int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.ChunkPosition.z)
}
inline ::int32_t ChunkPosition::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void ChunkPosition::_internal_set_z(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// BlockPosition

// int32 x = 1;
inline void BlockPosition::clear_x() {
  _impl_.x_ = 0;
}
inline ::int32_t BlockPosition::x() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.BlockPosition.x)
  return _internal_x();
}
inline void BlockPosition::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.BlockPosition.x)
}
inline ::int32_t BlockPosition::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void BlockPosition::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void BlockPosition::clear_y() {
  _impl_.y_ = 0;
}
inline ::int32_t BlockPosition::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.BlockPosition.y)
  return _internal_y();
}
inline void BlockPosition::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.BlockPosition.y)
}
inline ::int32_t BlockPosition::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void BlockPosition::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// int32 z = 3;
inline void BlockPosition::clear_z() {
  _impl_.z_ = 0;
}
inline ::int32_t BlockPosition::z() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.BlockPosition.z)
  return _internal_z();
}
inline void BlockPosition::set_z(::int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.BlockPosition.z)
}
inline ::int32_t BlockPosition::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void BlockPosition::_internal_set_z(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// BlockState

// uint32 block_state = 1;
inline void BlockState::clear_block_state() {
  _impl_.block_state_ = 0u;
}
inline ::uint32_t BlockState::block_state() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.BlockState.block_state)
  return _internal_block_state();
}
inline void BlockState::set_block_state(::uint32_t value) {
  _internal_set_block_state(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.BlockState.block_state)
}
inline ::uint32_t BlockState::_internal_block_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_state_;
}
inline void BlockState::_internal_set_block_state(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_state_ = value;
}

// -------------------------------------------------------------------

// Gameplay

// .minecpp.proto.common.DimensionType dimension = 1;
inline void Gameplay::clear_dimension() {
  _impl_.dimension_ = 0;
}
inline ::minecpp::proto::common::DimensionType Gameplay::dimension() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.dimension)
  return _internal_dimension();
}
inline void Gameplay::set_dimension(::minecpp::proto::common::DimensionType value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.dimension)
}
inline ::minecpp::proto::common::DimensionType Gameplay::_internal_dimension() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::DimensionType>(_impl_.dimension_);
}
inline void Gameplay::_internal_set_dimension(::minecpp::proto::common::DimensionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dimension_ = value;
}

// uint64 seed = 2;
inline void Gameplay::clear_seed() {
  _impl_.seed_ = ::uint64_t{0u};
}
inline ::uint64_t Gameplay::seed() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.seed)
  return _internal_seed();
}
inline void Gameplay::set_seed(::uint64_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.seed)
}
inline ::uint64_t Gameplay::_internal_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seed_;
}
inline void Gameplay::_internal_set_seed(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seed_ = value;
}

// .minecpp.proto.common.GameMode mode = 3;
inline void Gameplay::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::minecpp::proto::common::GameMode Gameplay::mode() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.mode)
  return _internal_mode();
}
inline void Gameplay::set_mode(::minecpp::proto::common::GameMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.mode)
}
inline ::minecpp::proto::common::GameMode Gameplay::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::GameMode>(_impl_.mode_);
}
inline void Gameplay::_internal_set_mode(::minecpp::proto::common::GameMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mode_ = value;
}

// .minecpp.proto.common.WorldType world = 4;
inline void Gameplay::clear_world() {
  _impl_.world_ = 0;
}
inline ::minecpp::proto::common::WorldType Gameplay::world() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.world)
  return _internal_world();
}
inline void Gameplay::set_world(::minecpp::proto::common::WorldType value) {
  _internal_set_world(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.world)
}
inline ::minecpp::proto::common::WorldType Gameplay::_internal_world() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::WorldType>(_impl_.world_);
}
inline void Gameplay::_internal_set_world(::minecpp::proto::common::WorldType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.world_ = value;
}

// int32 view_distance = 5;
inline void Gameplay::clear_view_distance() {
  _impl_.view_distance_ = 0;
}
inline ::int32_t Gameplay::view_distance() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.view_distance)
  return _internal_view_distance();
}
inline void Gameplay::set_view_distance(::int32_t value) {
  _internal_set_view_distance(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.view_distance)
}
inline ::int32_t Gameplay::_internal_view_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_distance_;
}
inline void Gameplay::_internal_set_view_distance(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_distance_ = value;
}

// bool hardcore = 6;
inline void Gameplay::clear_hardcore() {
  _impl_.hardcore_ = false;
}
inline bool Gameplay::hardcore() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.hardcore)
  return _internal_hardcore();
}
inline void Gameplay::set_hardcore(bool value) {
  _internal_set_hardcore(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.hardcore)
}
inline bool Gameplay::_internal_hardcore() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hardcore_;
}
inline void Gameplay::_internal_set_hardcore(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hardcore_ = value;
}

// int32 max_players = 7;
inline void Gameplay::clear_max_players() {
  _impl_.max_players_ = 0;
}
inline ::int32_t Gameplay::max_players() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.max_players)
  return _internal_max_players();
}
inline void Gameplay::set_max_players(::int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.max_players)
}
inline ::int32_t Gameplay::_internal_max_players() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_players_;
}
inline void Gameplay::_internal_set_max_players(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_players_ = value;
}

// bool reduced_debug_info = 8;
inline void Gameplay::clear_reduced_debug_info() {
  _impl_.reduced_debug_info_ = false;
}
inline bool Gameplay::reduced_debug_info() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.reduced_debug_info)
  return _internal_reduced_debug_info();
}
inline void Gameplay::set_reduced_debug_info(bool value) {
  _internal_set_reduced_debug_info(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.reduced_debug_info)
}
inline bool Gameplay::_internal_reduced_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reduced_debug_info_;
}
inline void Gameplay::_internal_set_reduced_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reduced_debug_info_ = value;
}

// bool do_immediate_respawn = 9;
inline void Gameplay::clear_do_immediate_respawn() {
  _impl_.do_immediate_respawn_ = false;
}
inline bool Gameplay::do_immediate_respawn() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.do_immediate_respawn)
  return _internal_do_immediate_respawn();
}
inline void Gameplay::set_do_immediate_respawn(bool value) {
  _internal_set_do_immediate_respawn(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.do_immediate_respawn)
}
inline bool Gameplay::_internal_do_immediate_respawn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.do_immediate_respawn_;
}
inline void Gameplay::_internal_set_do_immediate_respawn(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.do_immediate_respawn_ = value;
}

// .minecpp.proto.common.Difficulty difficulty = 10;
inline void Gameplay::clear_difficulty() {
  _impl_.difficulty_ = 0;
}
inline ::minecpp::proto::common::Difficulty Gameplay::difficulty() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Gameplay.difficulty)
  return _internal_difficulty();
}
inline void Gameplay::set_difficulty(::minecpp::proto::common::Difficulty value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Gameplay.difficulty)
}
inline ::minecpp::proto::common::Difficulty Gameplay::_internal_difficulty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::minecpp::proto::common::Difficulty>(_impl_.difficulty_);
}
inline void Gameplay::_internal_set_difficulty(::minecpp::proto::common::Difficulty value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.difficulty_ = value;
}

// -------------------------------------------------------------------

// Rotation

// float yaw = 1;
inline void Rotation::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Rotation::yaw() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Rotation.yaw)
  return _internal_yaw();
}
inline void Rotation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Rotation.yaw)
}
inline float Rotation::_internal_yaw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.yaw_;
}
inline void Rotation::_internal_set_yaw(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.yaw_ = value;
}

// float pitch = 2;
inline void Rotation::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Rotation::pitch() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Rotation.pitch)
  return _internal_pitch();
}
inline void Rotation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Rotation.pitch)
}
inline float Rotation::_internal_pitch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pitch_;
}
inline void Rotation::_internal_set_pitch(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pitch_ = value;
}

// -------------------------------------------------------------------

// ItemId

// uint32 id = 1;
inline void ItemId::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t ItemId::id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.ItemId.id)
  return _internal_id();
}
inline void ItemId::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.ItemId.id)
}
inline ::uint32_t ItemId::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ItemId::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// LightLevel

// uint32 level = 1;
inline void LightLevel::clear_level() {
  _impl_.level_ = 0u;
}
inline ::uint32_t LightLevel::level() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.LightLevel.level)
  return _internal_level();
}
inline void LightLevel::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.LightLevel.level)
}
inline ::uint32_t LightLevel::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void LightLevel::_internal_set_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// ChunkSectionPosition

// .minecpp.proto.common.ChunkPosition chunk_position = 1;
inline bool ChunkSectionPosition::has_chunk_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chunk_position_ != nullptr);
  return value;
}
inline void ChunkSectionPosition::clear_chunk_position() {
  if (_impl_.chunk_position_ != nullptr) _impl_.chunk_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::minecpp::proto::common::ChunkPosition& ChunkSectionPosition::_internal_chunk_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::ChunkPosition* p = _impl_.chunk_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::ChunkPosition&>(::minecpp::proto::common::_ChunkPosition_default_instance_);
}
inline const ::minecpp::proto::common::ChunkPosition& ChunkSectionPosition::chunk_position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.ChunkSectionPosition.chunk_position)
  return _internal_chunk_position();
}
inline void ChunkSectionPosition::unsafe_arena_set_allocated_chunk_position(::minecpp::proto::common::ChunkPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chunk_position_);
  }
  _impl_.chunk_position_ = reinterpret_cast<::minecpp::proto::common::ChunkPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.ChunkSectionPosition.chunk_position)
}
inline ::minecpp::proto::common::ChunkPosition* ChunkSectionPosition::release_chunk_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ChunkPosition* released = _impl_.chunk_position_;
  _impl_.chunk_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::ChunkPosition* ChunkSectionPosition::unsafe_arena_release_chunk_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.ChunkSectionPosition.chunk_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ChunkPosition* temp = _impl_.chunk_position_;
  _impl_.chunk_position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::ChunkPosition* ChunkSectionPosition::_internal_mutable_chunk_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chunk_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::ChunkPosition>(GetArenaForAllocation());
    _impl_.chunk_position_ = reinterpret_cast<::minecpp::proto::common::ChunkPosition*>(p);
  }
  return _impl_.chunk_position_;
}
inline ::minecpp::proto::common::ChunkPosition* ChunkSectionPosition::mutable_chunk_position() {
  ::minecpp::proto::common::ChunkPosition* _msg = _internal_mutable_chunk_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.ChunkSectionPosition.chunk_position)
  return _msg;
}
inline void ChunkSectionPosition::set_allocated_chunk_position(::minecpp::proto::common::ChunkPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::common::ChunkPosition*>(_impl_.chunk_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::common::ChunkPosition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chunk_position_ = reinterpret_cast<::minecpp::proto::common::ChunkPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.ChunkSectionPosition.chunk_position)
}

// int32 y = 2;
inline void ChunkSectionPosition::clear_y() {
  _impl_.y_ = 0;
}
inline ::int32_t ChunkSectionPosition::y() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.ChunkSectionPosition.y)
  return _internal_y();
}
inline void ChunkSectionPosition::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.ChunkSectionPosition.y)
}
inline ::int32_t ChunkSectionPosition::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void ChunkSectionPosition::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// SectionRange

// .minecpp.proto.common.ChunkSectionPosition from = 1;
inline bool SectionRange::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline void SectionRange::clear_from() {
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::_internal_from() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::ChunkSectionPosition* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::ChunkSectionPosition&>(::minecpp::proto::common::_ChunkSectionPosition_default_instance_);
}
inline const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::from() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.SectionRange.from)
  return _internal_from();
}
inline void SectionRange::unsafe_arena_set_allocated_from(::minecpp::proto::common::ChunkSectionPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.SectionRange.from)
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ChunkSectionPosition* released = _impl_.from_;
  _impl_.from_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::unsafe_arena_release_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.SectionRange.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ChunkSectionPosition* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::_internal_mutable_from() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::ChunkSectionPosition>(GetArenaForAllocation());
    _impl_.from_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(p);
  }
  return _impl_.from_;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::mutable_from() {
  ::minecpp::proto::common::ChunkSectionPosition* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.SectionRange.from)
  return _msg;
}
inline void SectionRange::set_allocated_from(::minecpp::proto::common::ChunkSectionPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.SectionRange.from)
}

// .minecpp.proto.common.ChunkSectionPosition to = 2;
inline bool SectionRange::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline void SectionRange::clear_to() {
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::_internal_to() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::ChunkSectionPosition* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::ChunkSectionPosition&>(::minecpp::proto::common::_ChunkSectionPosition_default_instance_);
}
inline const ::minecpp::proto::common::ChunkSectionPosition& SectionRange::to() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.SectionRange.to)
  return _internal_to();
}
inline void SectionRange::unsafe_arena_set_allocated_to(::minecpp::proto::common::ChunkSectionPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.SectionRange.to)
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::ChunkSectionPosition* released = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::unsafe_arena_release_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.SectionRange.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::minecpp::proto::common::ChunkSectionPosition* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::_internal_mutable_to() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::ChunkSectionPosition>(GetArenaForAllocation());
    _impl_.to_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(p);
  }
  return _impl_.to_;
}
inline ::minecpp::proto::common::ChunkSectionPosition* SectionRange::mutable_to() {
  ::minecpp::proto::common::ChunkSectionPosition* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.SectionRange.to)
  return _msg;
}
inline void SectionRange::set_allocated_to(::minecpp::proto::common::ChunkSectionPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::minecpp::proto::common::ChunkSectionPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.SectionRange.to)
}

// -------------------------------------------------------------------

// LightSource

// .minecpp.proto.common.BlockPosition position = 1;
inline bool LightSource::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void LightSource::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::minecpp::proto::common::BlockPosition& LightSource::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::BlockPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::BlockPosition&>(::minecpp::proto::common::_BlockPosition_default_instance_);
}
inline const ::minecpp::proto::common::BlockPosition& LightSource::position() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.LightSource.position)
  return _internal_position();
}
inline void LightSource::unsafe_arena_set_allocated_position(::minecpp::proto::common::BlockPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::minecpp::proto::common::BlockPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.LightSource.position)
}
inline ::minecpp::proto::common::BlockPosition* LightSource::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::BlockPosition* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::BlockPosition* LightSource::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.LightSource.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::BlockPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::BlockPosition* LightSource::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::BlockPosition>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::minecpp::proto::common::BlockPosition*>(p);
  }
  return _impl_.position_;
}
inline ::minecpp::proto::common::BlockPosition* LightSource::mutable_position() {
  ::minecpp::proto::common::BlockPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.LightSource.position)
  return _msg;
}
inline void LightSource::set_allocated_position(::minecpp::proto::common::BlockPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::common::BlockPosition*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::common::BlockPosition*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::minecpp::proto::common::BlockPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.LightSource.position)
}

// int32 strength = 2;
inline void LightSource::clear_strength() {
  _impl_.strength_ = 0;
}
inline ::int32_t LightSource::strength() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.LightSource.strength)
  return _internal_strength();
}
inline void LightSource::set_strength(::int32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.LightSource.strength)
}
inline ::int32_t LightSource::_internal_strength() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strength_;
}
inline void LightSource::_internal_set_strength(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strength_ = value;
}

// -------------------------------------------------------------------

// UUID

// uint64 lower = 1;
inline void UUID::clear_lower() {
  _impl_.lower_ = ::uint64_t{0u};
}
inline ::uint64_t UUID::lower() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.UUID.lower)
  return _internal_lower();
}
inline void UUID::set_lower(::uint64_t value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.UUID.lower)
}
inline ::uint64_t UUID::_internal_lower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lower_;
}
inline void UUID::_internal_set_lower(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lower_ = value;
}

// uint64 upper = 2;
inline void UUID::clear_upper() {
  _impl_.upper_ = ::uint64_t{0u};
}
inline ::uint64_t UUID::upper() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.UUID.upper)
  return _internal_upper();
}
inline void UUID::set_upper(::uint64_t value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.UUID.upper)
}
inline ::uint64_t UUID::_internal_upper() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.upper_;
}
inline void UUID::_internal_set_upper(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.upper_ = value;
}

// -------------------------------------------------------------------

// Slot

// .minecpp.proto.common.ItemId item_id = 1;
inline bool Slot::has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_id_ != nullptr);
  return value;
}
inline void Slot::clear_item_id() {
  if (_impl_.item_id_ != nullptr) _impl_.item_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::minecpp::proto::common::ItemId& Slot::_internal_item_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::minecpp::proto::common::ItemId* p = _impl_.item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::minecpp::proto::common::ItemId&>(::minecpp::proto::common::_ItemId_default_instance_);
}
inline const ::minecpp::proto::common::ItemId& Slot::item_id() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Slot.item_id)
  return _internal_item_id();
}
inline void Slot::unsafe_arena_set_allocated_item_id(::minecpp::proto::common::ItemId* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.item_id_);
  }
  _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:minecpp.proto.common.Slot.item_id)
}
inline ::minecpp::proto::common::ItemId* Slot::release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ItemId* released = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::minecpp::proto::common::ItemId* Slot::unsafe_arena_release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.Slot.item_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::minecpp::proto::common::ItemId* temp = _impl_.item_id_;
  _impl_.item_id_ = nullptr;
  return temp;
}
inline ::minecpp::proto::common::ItemId* Slot::_internal_mutable_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::minecpp::proto::common::ItemId>(GetArenaForAllocation());
    _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(p);
  }
  return _impl_.item_id_;
}
inline ::minecpp::proto::common::ItemId* Slot::mutable_item_id() {
  ::minecpp::proto::common::ItemId* _msg = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.Slot.item_id)
  return _msg;
}
inline void Slot::set_allocated_item_id(::minecpp::proto::common::ItemId* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::minecpp::proto::common::ItemId*>(_impl_.item_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::minecpp::proto::common::ItemId*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.item_id_ = reinterpret_cast<::minecpp::proto::common::ItemId*>(value);
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.Slot.item_id)
}

// uint32 count = 2;
inline void Slot::clear_count() {
  _impl_.count_ = 0u;
}
inline ::uint32_t Slot::count() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Slot.count)
  return _internal_count();
}
inline void Slot::set_count(::uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Slot.count)
}
inline ::uint32_t Slot::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void Slot::_internal_set_count(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// bytes nbt_data = 3;
inline void Slot::clear_nbt_data() {
  _impl_.nbt_data_.ClearToEmpty();
}
inline const std::string& Slot::nbt_data() const {
  // @@protoc_insertion_point(field_get:minecpp.proto.common.Slot.nbt_data)
  return _internal_nbt_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Slot::set_nbt_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nbt_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:minecpp.proto.common.Slot.nbt_data)
}
inline std::string* Slot::mutable_nbt_data() {
  std::string* _s = _internal_mutable_nbt_data();
  // @@protoc_insertion_point(field_mutable:minecpp.proto.common.Slot.nbt_data)
  return _s;
}
inline const std::string& Slot::_internal_nbt_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nbt_data_.Get();
}
inline void Slot::_internal_set_nbt_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nbt_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Slot::_internal_mutable_nbt_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nbt_data_.Mutable( GetArenaForAllocation());
}
inline std::string* Slot::release_nbt_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:minecpp.proto.common.Slot.nbt_data)
  return _impl_.nbt_data_.Release();
}
inline void Slot::set_allocated_nbt_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nbt_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nbt_data_.IsDefault()) {
          _impl_.nbt_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.common.Slot.nbt_data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace proto
}  // namespace minecpp


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::minecpp::proto::common::DimensionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::DimensionType>() {
  return ::minecpp::proto::common::DimensionType_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::Difficulty> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::Difficulty>() {
  return ::minecpp::proto::common::Difficulty_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::GameMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::GameMode>() {
  return ::minecpp::proto::common::GameMode_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::WorldType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::WorldType>() {
  return ::minecpp::proto::common::WorldType_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::PlayerDiggingState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::PlayerDiggingState>() {
  return ::minecpp::proto::common::PlayerDiggingState_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::Face> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::Face>() {
  return ::minecpp::proto::common::Face_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::LightType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::LightType>() {
  return ::minecpp::proto::common::LightType_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::InteractionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::InteractionType>() {
  return ::minecpp::proto::common::InteractionType_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::HandType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::HandType>() {
  return ::minecpp::proto::common::HandType_descriptor();
}
template <>
struct is_proto_enum<::minecpp::proto::common::EntityAnimation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::minecpp::proto::common::EntityAnimation>() {
  return ::minecpp::proto::common::EntityAnimation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_minecpp_2fproto_2fcommon_2fCommon_2eproto_2epb_2eh
