// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/common/v1/common.proto

#include <minecpp/proto/common/v1/common.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace common {
namespace v1 {
PROTOBUF_CONSTEXPR ChunkPosition::ChunkPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkPositionDefaultTypeInternal() {}
  union {
    ChunkPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkPositionDefaultTypeInternal _ChunkPosition_default_instance_;
PROTOBUF_CONSTEXPR BlockPosition::BlockPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPositionDefaultTypeInternal() {}
  union {
    BlockPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPositionDefaultTypeInternal _BlockPosition_default_instance_;
PROTOBUF_CONSTEXPR BlockState::BlockState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockStateDefaultTypeInternal() {}
  union {
    BlockState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockStateDefaultTypeInternal _BlockState_default_instance_;
PROTOBUF_CONSTEXPR Gameplay::Gameplay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seed_)*/uint64_t{0u}
  , /*decltype(_impl_.dimension_)*/0
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.world_)*/0
  , /*decltype(_impl_.view_distance_)*/0
  , /*decltype(_impl_.max_players_)*/0
  , /*decltype(_impl_.hardcore_)*/false
  , /*decltype(_impl_.reduced_debug_info_)*/false
  , /*decltype(_impl_.do_immediate_respawn_)*/false
  , /*decltype(_impl_.difficulty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameplayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameplayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameplayDefaultTypeInternal() {}
  union {
    Gameplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameplayDefaultTypeInternal _Gameplay_default_instance_;
PROTOBUF_CONSTEXPR Vector3f::Vector3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3fDefaultTypeInternal() {}
  union {
    Vector3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3fDefaultTypeInternal _Vector3f_default_instance_;
PROTOBUF_CONSTEXPR ItemId::ItemId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemIdDefaultTypeInternal() {}
  union {
    ItemId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemIdDefaultTypeInternal _ItemId_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::ChunkPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::ChunkPosition, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::ChunkPosition, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockPosition, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockPosition, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockPosition, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::BlockState, _impl_.block_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.world_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.view_distance_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.hardcore_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.max_players_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.reduced_debug_info_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.do_immediate_respawn_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Gameplay, _impl_.difficulty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Vector3f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Vector3f, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::Vector3f, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::ItemId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::common::v1::ItemId, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::common::v1::ChunkPosition)},
  { 8, -1, -1, sizeof(::minecpp::proto::common::v1::BlockPosition)},
  { 17, -1, -1, sizeof(::minecpp::proto::common::v1::BlockState)},
  { 24, -1, -1, sizeof(::minecpp::proto::common::v1::Gameplay)},
  { 40, -1, -1, sizeof(::minecpp::proto::common::v1::Vector3f)},
  { 49, -1, -1, sizeof(::minecpp::proto::common::v1::ItemId)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::common::v1::_ChunkPosition_default_instance_._instance,
  &::minecpp::proto::common::v1::_BlockPosition_default_instance_._instance,
  &::minecpp::proto::common::v1::_BlockState_default_instance_._instance,
  &::minecpp::proto::common::v1::_Gameplay_default_instance_._instance,
  &::minecpp::proto::common::v1::_Vector3f_default_instance_._instance,
  &::minecpp::proto::common::v1::_ItemId_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$minecpp/proto/common/v1/common.proto\022\027"
  "minecpp.proto.common.v1\"%\n\rChunkPosition"
  "\022\t\n\001x\030\001 \001(\005\022\t\n\001z\030\002 \001(\005\"0\n\rBlockPosition\022"
  "\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"!\n\nBloc"
  "kState\022\023\n\013block_state\030\001 \001(\r\"\350\002\n\010Gameplay"
  "\0229\n\tdimension\030\001 \001(\0162&.minecpp.proto.comm"
  "on.v1.DimensionType\022\014\n\004seed\030\002 \001(\004\022/\n\004mod"
  "e\030\003 \001(\0162!.minecpp.proto.common.v1.GameMo"
  "de\0221\n\005world\030\004 \001(\0162\".minecpp.proto.common"
  ".v1.WorldType\022\025\n\rview_distance\030\005 \001(\005\022\020\n\010"
  "hardcore\030\006 \001(\010\022\023\n\013max_players\030\007 \001(\005\022\032\n\022r"
  "educed_debug_info\030\010 \001(\010\022\034\n\024do_immediate_"
  "respawn\030\t \001(\010\0227\n\ndifficulty\030\n \001(\0162#.mine"
  "cpp.proto.common.v1.Difficulty\"+\n\010Vector"
  "3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\024\n\006I"
  "temId\022\n\n\002id\030\001 \001(\r*3\n\rDimensionType\022\r\n\tOv"
  "erworld\020\000\022\n\n\006Nether\020\001\022\007\n\003End\020\002*,\n\nDiffic"
  "ulty\022\010\n\004Easy\020\000\022\n\n\006Normal\020\001\022\010\n\004Hard\020\002*D\n\010"
  "GameMode\022\014\n\010Survival\020\000\022\014\n\010Creative\020\001\022\r\n\t"
  "Adventure\020\002\022\r\n\tSpectator\020\003*R\n\tWorldType\022"
  "\013\n\007Default\020\000\022\010\n\004Flat\020\001\022\017\n\013LargeBiomes\020\002\022"
  "\r\n\tAmplified\020\003\022\016\n\nCustomised\020\004*\222\001\n\022Playe"
  "rDiggingState\022\013\n\007Digging\020\000\022\023\n\017CanceledDi"
  "gging\020\001\022\023\n\017FinishedDigging\020\002\022\020\n\014DropAllI"
  "tems\020\003\022\014\n\010DropItem\020\004\022\022\n\016ReleaseUseItem\020\005"
  "\022\021\n\rSwapHeldItems\020\006*E\n\004Face\022\n\n\006Bottom\020\000\022"
  "\007\n\003Top\020\001\022\t\n\005North\020\002\022\t\n\005South\020\003\022\010\n\004West\020\004"
  "\022\010\n\004East\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto = {
    false, false, 1098, descriptor_table_protodef_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    "minecpp/proto/common/v1/common.proto",
    &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
namespace minecpp {
namespace proto {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DimensionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[0];
}
bool DimensionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difficulty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[1];
}
bool Difficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[2];
}
bool GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[3];
}
bool WorldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerDiggingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[4];
}
bool PlayerDiggingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Face_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[5];
}
bool Face_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChunkPosition::_Internal {
 public:
};

ChunkPosition::ChunkPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.ChunkPosition)
}
ChunkPosition::ChunkPosition(const ChunkPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunkPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.ChunkPosition)
}

inline void ChunkPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChunkPosition::~ChunkPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.ChunkPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.ChunkPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunkPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.ChunkPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.ChunkPosition)
  return target;
}

size_t ChunkPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.ChunkPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 z = 2;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkPosition::GetClassData() const { return &_class_data_; }


void ChunkPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunkPosition*>(&to_msg);
  auto& from = static_cast<const ChunkPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.ChunkPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkPosition::CopyFrom(const ChunkPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.ChunkPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkPosition::IsInitialized() const {
  return true;
}

void ChunkPosition::InternalSwap(ChunkPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.z_)
      + sizeof(ChunkPosition::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(ChunkPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[0]);
}

// ===================================================================

class BlockPosition::_Internal {
 public:
};

BlockPosition::BlockPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.BlockPosition)
}
BlockPosition::BlockPosition(const BlockPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.BlockPosition)
}

inline void BlockPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockPosition::~BlockPosition() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.BlockPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.BlockPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.BlockPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.BlockPosition)
  return target;
}

size_t BlockPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.BlockPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockPosition::GetClassData() const { return &_class_data_; }


void BlockPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockPosition*>(&to_msg);
  auto& from = static_cast<const BlockPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.BlockPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPosition::CopyFrom(const BlockPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.BlockPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPosition::IsInitialized() const {
  return true;
}

void BlockPosition::InternalSwap(BlockPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.z_)
      + sizeof(BlockPosition::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(BlockPosition, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[1]);
}

// ===================================================================

class BlockState::_Internal {
 public:
};

BlockState::BlockState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.BlockState)
}
BlockState::BlockState(const BlockState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_state_ = from._impl_.block_state_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.BlockState)
}

inline void BlockState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockState::~BlockState() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.BlockState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockState::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.BlockState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_state_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 block_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.BlockState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_state = 1;
  if (this->_internal_block_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.BlockState)
  return target;
}

size_t BlockState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.BlockState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_state = 1;
  if (this->_internal_block_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockState::GetClassData() const { return &_class_data_; }


void BlockState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockState*>(&to_msg);
  auto& from = static_cast<const BlockState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.BlockState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_state() != 0) {
    _this->_internal_set_block_state(from._internal_block_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockState::CopyFrom(const BlockState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.BlockState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockState::IsInitialized() const {
  return true;
}

void BlockState::InternalSwap(BlockState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.block_state_, other->_impl_.block_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[2]);
}

// ===================================================================

class Gameplay::_Internal {
 public:
};

Gameplay::Gameplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.Gameplay)
}
Gameplay::Gameplay(const Gameplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gameplay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){}
    , decltype(_impl_.dimension_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.world_){}
    , decltype(_impl_.view_distance_){}
    , decltype(_impl_.max_players_){}
    , decltype(_impl_.hardcore_){}
    , decltype(_impl_.reduced_debug_info_){}
    , decltype(_impl_.do_immediate_respawn_){}
    , decltype(_impl_.difficulty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.difficulty_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.difficulty_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.Gameplay)
}

inline void Gameplay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.seed_){uint64_t{0u}}
    , decltype(_impl_.dimension_){0}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.world_){0}
    , decltype(_impl_.view_distance_){0}
    , decltype(_impl_.max_players_){0}
    , decltype(_impl_.hardcore_){false}
    , decltype(_impl_.reduced_debug_info_){false}
    , decltype(_impl_.do_immediate_respawn_){false}
    , decltype(_impl_.difficulty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Gameplay::~Gameplay() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.Gameplay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gameplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gameplay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gameplay::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.Gameplay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.difficulty_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.difficulty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gameplay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.DimensionType dimension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dimension(static_cast<::minecpp::proto::common::v1::DimensionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.GameMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::minecpp::proto::common::v1::GameMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.WorldType world = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_world(static_cast<::minecpp::proto::common::v1::WorldType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 view_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.view_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hardcore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hardcore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reduced_debug_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.reduced_debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool do_immediate_respawn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.do_immediate_respawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.Difficulty difficulty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_difficulty(static_cast<::minecpp::proto::common::v1::Difficulty>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gameplay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.Gameplay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.DimensionType dimension = 1;
  if (this->_internal_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dimension(), target);
  }

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seed(), target);
  }

  // .minecpp.proto.common.v1.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // .minecpp.proto.common.v1.WorldType world = 4;
  if (this->_internal_world() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_world(), target);
  }

  // int32 view_distance = 5;
  if (this->_internal_view_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_view_distance(), target);
  }

  // bool hardcore = 6;
  if (this->_internal_hardcore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_hardcore(), target);
  }

  // int32 max_players = 7;
  if (this->_internal_max_players() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_players(), target);
  }

  // bool reduced_debug_info = 8;
  if (this->_internal_reduced_debug_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_reduced_debug_info(), target);
  }

  // bool do_immediate_respawn = 9;
  if (this->_internal_do_immediate_respawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_do_immediate_respawn(), target);
  }

  // .minecpp.proto.common.v1.Difficulty difficulty = 10;
  if (this->_internal_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.Gameplay)
  return target;
}

size_t Gameplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.Gameplay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seed());
  }

  // .minecpp.proto.common.v1.DimensionType dimension = 1;
  if (this->_internal_dimension() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dimension());
  }

  // .minecpp.proto.common.v1.GameMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .minecpp.proto.common.v1.WorldType world = 4;
  if (this->_internal_world() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_world());
  }

  // int32 view_distance = 5;
  if (this->_internal_view_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_view_distance());
  }

  // int32 max_players = 7;
  if (this->_internal_max_players() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_players());
  }

  // bool hardcore = 6;
  if (this->_internal_hardcore() != 0) {
    total_size += 1 + 1;
  }

  // bool reduced_debug_info = 8;
  if (this->_internal_reduced_debug_info() != 0) {
    total_size += 1 + 1;
  }

  // bool do_immediate_respawn = 9;
  if (this->_internal_do_immediate_respawn() != 0) {
    total_size += 1 + 1;
  }

  // .minecpp.proto.common.v1.Difficulty difficulty = 10;
  if (this->_internal_difficulty() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gameplay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gameplay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gameplay::GetClassData() const { return &_class_data_; }


void Gameplay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gameplay*>(&to_msg);
  auto& from = static_cast<const Gameplay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.Gameplay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_dimension() != 0) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_world() != 0) {
    _this->_internal_set_world(from._internal_world());
  }
  if (from._internal_view_distance() != 0) {
    _this->_internal_set_view_distance(from._internal_view_distance());
  }
  if (from._internal_max_players() != 0) {
    _this->_internal_set_max_players(from._internal_max_players());
  }
  if (from._internal_hardcore() != 0) {
    _this->_internal_set_hardcore(from._internal_hardcore());
  }
  if (from._internal_reduced_debug_info() != 0) {
    _this->_internal_set_reduced_debug_info(from._internal_reduced_debug_info());
  }
  if (from._internal_do_immediate_respawn() != 0) {
    _this->_internal_set_do_immediate_respawn(from._internal_do_immediate_respawn());
  }
  if (from._internal_difficulty() != 0) {
    _this->_internal_set_difficulty(from._internal_difficulty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gameplay::CopyFrom(const Gameplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.Gameplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gameplay::IsInitialized() const {
  return true;
}

void Gameplay::InternalSwap(Gameplay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.difficulty_)
      + sizeof(Gameplay::_impl_.difficulty_)
      - PROTOBUF_FIELD_OFFSET(Gameplay, _impl_.seed_)>(
          reinterpret_cast<char*>(&_impl_.seed_),
          reinterpret_cast<char*>(&other->_impl_.seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gameplay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[3]);
}

// ===================================================================

class Vector3f::_Internal {
 public:
};

Vector3f::Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.Vector3f)
}

inline void Vector3f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.Vector3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.Vector3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.Vector3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.Vector3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3f::GetClassData() const { return &_class_data_; }


void Vector3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3f*>(&to_msg);
  auto& from = static_cast<const Vector3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.Vector3f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.z_)
      + sizeof(Vector3f::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[4]);
}

// ===================================================================

class ItemId::_Internal {
 public:
};

ItemId::ItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.common.v1.ItemId)
}
ItemId::ItemId(const ItemId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.common.v1.ItemId)
}

inline void ItemId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemId::~ItemId() {
  // @@protoc_insertion_point(destructor:minecpp.proto.common.v1.ItemId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemId::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.common.v1.ItemId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.common.v1.ItemId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.common.v1.ItemId)
  return target;
}

size_t ItemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.common.v1.ItemId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemId::GetClassData() const { return &_class_data_; }


void ItemId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemId*>(&to_msg);
  auto& from = static_cast<const ItemId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.common.v1.ItemId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemId::CopyFrom(const ItemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.common.v1.ItemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemId::IsInitialized() const {
  return true;
}

void ItemId::InternalSwap(ItemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::ChunkPosition*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::ChunkPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::ChunkPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::BlockPosition*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::BlockPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::BlockPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::BlockState*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::BlockState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::BlockState >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::Gameplay*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::Gameplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::Gameplay >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::Vector3f*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::Vector3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::Vector3f >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::common::v1::ItemId*
Arena::CreateMaybeMessage< ::minecpp::proto::common::v1::ItemId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::common::v1::ItemId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
