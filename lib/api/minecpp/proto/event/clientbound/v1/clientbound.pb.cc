// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/event/clientbound/v1/clientbound.proto

#include <minecpp/proto/event/clientbound/v1/clientbound.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace event {
namespace clientbound {
namespace v1 {
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized)
  : payload_(nullptr)
  , _oneof_case_{}{}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR RecipientSinglePlayer::RecipientSinglePlayer(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr){}
struct RecipientSinglePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientSinglePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientSinglePlayerDefaultTypeInternal() {}
  union {
    RecipientSinglePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientSinglePlayerDefaultTypeInternal _RecipientSinglePlayer_default_instance_;
PROTOBUF_CONSTEXPR RecipientMultiplePlayers::RecipientMultiplePlayers(
    ::_pbi::ConstantInitialized)
  : player_ids_(){}
struct RecipientMultiplePlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientMultiplePlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientMultiplePlayersDefaultTypeInternal() {}
  union {
    RecipientMultiplePlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientMultiplePlayersDefaultTypeInternal _RecipientMultiplePlayers_default_instance_;
PROTOBUF_CONSTEXPR RecipientAllPlayers::RecipientAllPlayers(
    ::_pbi::ConstantInitialized){}
struct RecipientAllPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientAllPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientAllPlayersDefaultTypeInternal() {}
  union {
    RecipientAllPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientAllPlayersDefaultTypeInternal _RecipientAllPlayers_default_instance_;
PROTOBUF_CONSTEXPR RecipientExcluding::RecipientExcluding(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr){}
struct RecipientExcludingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecipientExcludingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecipientExcludingDefaultTypeInternal() {}
  union {
    RecipientExcluding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecipientExcludingDefaultTypeInternal _RecipientExcluding_default_instance_;
PROTOBUF_CONSTEXPR AddPlayer::AddPlayer(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_id_(nullptr)
  , game_mode_(0)

  , ping_(0u){}
struct AddPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPlayerDefaultTypeInternal() {}
  union {
    AddPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPlayerDefaultTypeInternal _AddPlayer_default_instance_;
PROTOBUF_CONSTEXPR SpawnPlayer::SpawnPlayer(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , position_(nullptr)
  , rotation_(nullptr)
  , entity_id_(0u){}
struct SpawnPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnPlayerDefaultTypeInternal() {}
  union {
    SpawnPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
PROTOBUF_CONSTEXPR EntityMove::EntityMove(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , movement_(nullptr)
  , rotation_(nullptr)
  , entity_id_(0u){}
struct EntityMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityMoveDefaultTypeInternal() {}
  union {
    EntityMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityMoveDefaultTypeInternal _EntityMove_default_instance_;
PROTOBUF_CONSTEXPR EntityLook::EntityLook(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , rotation_(nullptr)
  , entity_id_(0u){}
struct EntityLookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityLookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityLookDefaultTypeInternal() {}
  union {
    EntityLook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityLookDefaultTypeInternal _EntityLook_default_instance_;
PROTOBUF_CONSTEXPR PlayerPositionRotation::PlayerPositionRotation(
    ::_pbi::ConstantInitialized){}
struct PlayerPositionRotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerPositionRotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerPositionRotationDefaultTypeInternal() {}
  union {
    PlayerPositionRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerPositionRotationDefaultTypeInternal _PlayerPositionRotation_default_instance_;
PROTOBUF_CONSTEXPR Chat::Chat(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0){}
struct ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatDefaultTypeInternal() {}
  union {
    Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatDefaultTypeInternal _Chat_default_instance_;
PROTOBUF_CONSTEXPR RemovePlayer::RemovePlayer(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , entity_id_(0u){}
struct RemovePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovePlayerDefaultTypeInternal() {}
  union {
    RemovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovePlayerDefaultTypeInternal _RemovePlayer_default_instance_;
PROTOBUF_CONSTEXPR UpdateBlock::UpdateBlock(
    ::_pbi::ConstantInitialized)
  : block_position_(uint64_t{0u})
  , state_(0u){}
struct UpdateBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateBlockDefaultTypeInternal() {}
  union {
    UpdateBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateBlockDefaultTypeInternal _UpdateBlock_default_instance_;
PROTOBUF_CONSTEXPR AnimateHand::AnimateHand(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , entity_id_(0u)
  , hand_(0u){}
struct AnimateHandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimateHandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimateHandDefaultTypeInternal() {}
  union {
    AnimateHand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimateHandDefaultTypeInternal _AnimateHand_default_instance_;
PROTOBUF_CONSTEXPR LoadTerrain::LoadTerrain(
    ::_pbi::ConstantInitialized)
  : coords_()
  , central_chunk_(nullptr){}
struct LoadTerrainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadTerrainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadTerrainDefaultTypeInternal() {}
  union {
    LoadTerrain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadTerrainDefaultTypeInternal _LoadTerrain_default_instance_;
PROTOBUF_CONSTEXPR TransferPlayer::TransferPlayer(
    ::_pbi::ConstantInitialized)
  : engine_instance_id_(uint64_t{0u}){}
struct TransferPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferPlayerDefaultTypeInternal() {}
  union {
    TransferPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferPlayerDefaultTypeInternal _TransferPlayer_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerAbilities::UpdatePlayerAbilities(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , invulnerable_(false)
  , is_flying_(false)
  , allow_flying_(false)
  , creative_mode_(false)
  , walk_speed_(0)
  , fly_speed_(0){}
struct UpdatePlayerAbilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerAbilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerAbilitiesDefaultTypeInternal() {}
  union {
    UpdatePlayerAbilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerAbilitiesDefaultTypeInternal _UpdatePlayerAbilities_default_instance_;
PROTOBUF_CONSTEXPR UnloadChunk::UnloadChunk(
    ::_pbi::ConstantInitialized)
  : player_id_(nullptr)
  , chunk_position_(nullptr){}
struct UnloadChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnloadChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnloadChunkDefaultTypeInternal() {}
  union {
    UnloadChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnloadChunkDefaultTypeInternal _UnloadChunk_default_instance_;
PROTOBUF_CONSTEXPR PlayerList::PlayerList(
    ::_pbi::ConstantInitialized)
  : list_(){}
struct PlayerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerListDefaultTypeInternal() {}
  union {
    PlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerListDefaultTypeInternal _PlayerList_default_instance_;
PROTOBUF_CONSTEXPR EntityList::EntityList(
    ::_pbi::ConstantInitialized)
  : list_(){}
struct EntityListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityListDefaultTypeInternal() {}
  union {
    EntityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityListDefaultTypeInternal _EntityList_default_instance_;
PROTOBUF_CONSTEXPR AcceptPlayer::AcceptPlayer(
    ::_pbi::ConstantInitialized)
  : gameplay_(nullptr)
  , player_(nullptr){}
struct AcceptPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptPlayerDefaultTypeInternal() {}
  union {
    AcceptPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptPlayerDefaultTypeInternal _AcceptPlayer_default_instance_;
PROTOBUF_CONSTEXPR DenyPlayer::DenyPlayer(
    ::_pbi::ConstantInitialized)
  : denial_reason_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DenyPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenyPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenyPlayerDefaultTypeInternal() {}
  union {
    DenyPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenyPlayerDefaultTypeInternal _DenyPlayer_default_instance_;
}  // namespace v1
}  // namespace clientbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, payload_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Event, recipient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers, player_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientExcluding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RecipientExcluding, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, game_mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AddPlayer, ping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::SpawnPlayer, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, movement_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityMove, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityLook, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, message_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::Chat, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::RemovePlayer, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, block_position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdateBlock, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateHand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateHand, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateHand, entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AnimateHand, hand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, central_chunk_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::LoadTerrain, coords_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::TransferPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::TransferPlayer, engine_instance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, invulnerable_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, is_flying_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, allow_flying_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, creative_mode_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, walk_speed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities, fly_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, player_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::UnloadChunk, chunk_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::PlayerList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::EntityList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, gameplay_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::AcceptPlayer, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::DenyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::event::clientbound::v1::DenyPlayer, denial_reason_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::Event)},
  { 12, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer)},
  { 19, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers)},
  { 26, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers)},
  { 32, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RecipientExcluding)},
  { 39, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AddPlayer)},
  { 49, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::SpawnPlayer)},
  { 59, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityMove)},
  { 69, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityLook)},
  { 78, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::PlayerPositionRotation)},
  { 84, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::Chat)},
  { 92, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::RemovePlayer)},
  { 100, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UpdateBlock)},
  { 108, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AnimateHand)},
  { 117, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::LoadTerrain)},
  { 125, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::TransferPlayer)},
  { 132, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities)},
  { 145, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::UnloadChunk)},
  { 153, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::PlayerList)},
  { 160, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::EntityList)},
  { 167, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::AcceptPlayer)},
  { 175, -1, -1, sizeof(::minecpp::proto::event::clientbound::v1::DenyPlayer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::event::clientbound::v1::_Event_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientSinglePlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientMultiplePlayers_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientAllPlayers_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RecipientExcluding_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AddPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_SpawnPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityMove_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityLook_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_PlayerPositionRotation_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_Chat_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_RemovePlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UpdateBlock_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AnimateHand_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_LoadTerrain_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_TransferPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UpdatePlayerAbilities_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_UnloadChunk_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_PlayerList_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_EntityList_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_AcceptPlayer_default_instance_._instance,
  &::minecpp::proto::event::clientbound::v1::_DenyPlayer_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4minecpp/proto/event/clientbound/v1/cli"
  "entbound.proto\022\"minecpp.proto.event.clie"
  "ntbound.v1\032\031google/protobuf/any.proto\032$m"
  "inecpp/proto/common/v1/common.proto\032 min"
  "ecpp/proto/player/v1/id.proto\032$minecpp/p"
  "roto/player/v1/player.proto\032$minecpp/pro"
  "to/entity/v1/entity.proto\"\206\003\n\005Event\022%\n\007p"
  "ayload\030\001 \001(\0132\024.google.protobuf.Any\022R\n\rsi"
  "ngle_player\030\002 \001(\01329.minecpp.proto.event."
  "clientbound.v1.RecipientSinglePlayerH\000\022X"
  "\n\020multiple_players\030\003 \001(\0132<.minecpp.proto"
  ".event.clientbound.v1.RecipientMultipleP"
  "layersH\000\022N\n\013all_players\030\004 \001(\01327.minecpp."
  "proto.event.clientbound.v1.RecipientAllP"
  "layersH\000\022K\n\texcluding\030\005 \001(\01326.minecpp.pr"
  "oto.event.clientbound.v1.RecipientExclud"
  "ingH\000B\013\n\trecipient\"M\n\025RecipientSinglePla"
  "yer\0224\n\tplayer_id\030\001 \001(\0132!.minecpp.proto.p"
  "layer.v1.PlayerId\"Q\n\030RecipientMultiplePl"
  "ayers\0225\n\nplayer_ids\030\001 \003(\0132!.minecpp.prot"
  "o.player.v1.PlayerId\"\025\n\023RecipientAllPlay"
  "ers\"J\n\022RecipientExcluding\0224\n\tplayer_id\030\001"
  " \001(\0132!.minecpp.proto.player.v1.PlayerId\""
  "\223\001\n\tAddPlayer\0224\n\tplayer_id\030\001 \001(\0132!.minec"
  "pp.proto.player.v1.PlayerId\022\014\n\004name\030\002 \001("
  "\t\0224\n\tgame_mode\030\003 \001(\0162!.minecpp.proto.com"
  "mon.v1.GameMode\022\014\n\004ping\030\004 \001(\r\"\300\001\n\013SpawnP"
  "layer\0224\n\tplayer_id\030\001 \001(\0132!.minecpp.proto"
  ".player.v1.PlayerId\022\021\n\tentity_id\030\002 \001(\r\0223"
  "\n\010position\030\003 \001(\0132!.minecpp.proto.entity."
  "v1.Position\0223\n\010rotation\030\004 \001(\0132!.minecpp."
  "proto.entity.v1.Rotation\"\277\001\n\nEntityMove\022"
  "4\n\tplayer_id\030\001 \001(\0132!.minecpp.proto.playe"
  "r.v1.PlayerId\022\021\n\tentity_id\030\002 \001(\r\0223\n\010move"
  "ment\030\003 \001(\0132!.minecpp.proto.entity.v1.Mov"
  "ement\0223\n\010rotation\030\004 \001(\0132!.minecpp.proto."
  "entity.v1.Rotation\"\212\001\n\nEntityLook\0224\n\tpla"
  "yer_id\030\001 \001(\0132!.minecpp.proto.player.v1.P"
  "layerId\022\021\n\tentity_id\030\002 \001(\r\0223\n\010rotation\030\003"
  " \001(\0132!.minecpp.proto.entity.v1.Rotation\""
  "\030\n\026PlayerPositionRotation\"%\n\004Chat\022\017\n\007mes"
  "sage\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\"W\n\014RemovePlayer"
  "\0224\n\tplayer_id\030\001 \001(\0132!.minecpp.proto.play"
  "er.v1.PlayerId\022\021\n\tentity_id\030\002 \001(\r\"4\n\013Upd"
  "ateBlock\022\026\n\016block_position\030\001 \001(\004\022\r\n\005stat"
  "e\030\002 \001(\r\"d\n\013AnimateHand\0224\n\tplayer_id\030\001 \001("
  "\0132!.minecpp.proto.player.v1.PlayerId\022\021\n\t"
  "entity_id\030\002 \001(\r\022\014\n\004hand\030\003 \001(\r\"\204\001\n\013LoadTe"
  "rrain\022=\n\rcentral_chunk\030\001 \001(\0132&.minecpp.p"
  "roto.common.v1.ChunkPosition\0226\n\006coords\030\002"
  " \003(\0132&.minecpp.proto.common.v1.ChunkPosi"
  "tion\",\n\016TransferPlayer\022\032\n\022engine_instanc"
  "e_id\030\002 \001(\004\"\312\001\n\025UpdatePlayerAbilities\0224\n\t"
  "player_id\030\001 \001(\0132!.minecpp.proto.player.v"
  "1.PlayerId\022\024\n\014invulnerable\030\002 \001(\010\022\021\n\tis_f"
  "lying\030\003 \001(\010\022\024\n\014allow_flying\030\004 \001(\010\022\025\n\rcre"
  "ative_mode\030\005 \001(\010\022\022\n\nwalk_speed\030\007 \001(\002\022\021\n\t"
  "fly_speed\030\010 \001(\002\"\203\001\n\013UnloadChunk\0224\n\tplaye"
  "r_id\030\001 \001(\0132!.minecpp.proto.player.v1.Pla"
  "yerId\022>\n\016chunk_position\030\002 \001(\0132&.minecpp."
  "proto.common.v1.ChunkPosition\";\n\nPlayerL"
  "ist\022-\n\004list\030\001 \003(\0132\037.minecpp.proto.player"
  ".v1.Status\";\n\nEntityList\022-\n\004list\030\001 \003(\0132\037"
  ".minecpp.proto.entity.v1.Entity\"t\n\014Accep"
  "tPlayer\0223\n\010gameplay\030\001 \001(\0132!.minecpp.prot"
  "o.common.v1.Gameplay\022/\n\006player\030\002 \001(\0132\037.m"
  "inecpp.proto.player.v1.Player\"#\n\nDenyPla"
  "yer\022\025\n\rdenial_reason\030\001 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_minecpp_2fproto_2fentity_2fv1_2fentity_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fid_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto = {
    false, false, 2714, descriptor_table_protodef_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto,
    "minecpp/proto/event/clientbound/v1/clientbound.proto",
    &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once, descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_deps, 5, 22,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto(&descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto);
namespace minecpp {
namespace proto {
namespace event {
namespace clientbound {
namespace v1 {

// ===================================================================

class Event::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& payload(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer& single_player(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers& multiple_players(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers& all_players(const Event* msg);
  static const ::minecpp::proto::event::clientbound::v1::RecipientExcluding& excluding(const Event* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Event::_Internal::payload(const Event* msg) {
  return *msg->payload_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer&
Event::_Internal::single_player(const Event* msg) {
  return *msg->recipient_.single_player_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers&
Event::_Internal::multiple_players(const Event* msg) {
  return *msg->recipient_.multiple_players_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers&
Event::_Internal::all_players(const Event* msg) {
  return *msg->recipient_.all_players_;
}
const ::minecpp::proto::event::clientbound::v1::RecipientExcluding&
Event::_Internal::excluding(const Event* msg) {
  return *msg->recipient_.excluding_;
}
void Event::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void Event::set_allocated_single_player(::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer* single_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (single_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single_player);
    if (message_arena != submessage_arena) {
      single_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_player, submessage_arena);
    }
    set_has_single_player();
    recipient_.single_player_ = single_player;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.single_player)
}
void Event::set_allocated_multiple_players(::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers* multiple_players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (multiple_players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_players);
    if (message_arena != submessage_arena) {
      multiple_players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_players, submessage_arena);
    }
    set_has_multiple_players();
    recipient_.multiple_players_ = multiple_players;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.multiple_players)
}
void Event::set_allocated_all_players(::minecpp::proto::event::clientbound::v1::RecipientAllPlayers* all_players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (all_players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_players);
    if (message_arena != submessage_arena) {
      all_players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_players, submessage_arena);
    }
    set_has_all_players();
    recipient_.all_players_ = all_players;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.all_players)
}
void Event::set_allocated_excluding(::minecpp::proto::event::clientbound::v1::RecipientExcluding* excluding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_recipient();
  if (excluding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(excluding);
    if (message_arena != submessage_arena) {
      excluding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excluding, submessage_arena);
    }
    set_has_excluding();
    recipient_.excluding_ = excluding;
  }
  // @@protoc_insertion_point(field_set_allocated:minecpp.proto.event.clientbound.v1.Event.excluding)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  clear_has_recipient();
  switch (from.recipient_case()) {
    case kSinglePlayer: {
      _internal_mutable_single_player()->::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer::MergeFrom(from._internal_single_player());
      break;
    }
    case kMultiplePlayers: {
      _internal_mutable_multiple_players()->::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers::MergeFrom(from._internal_multiple_players());
      break;
    }
    case kAllPlayers: {
      _internal_mutable_all_players()->::minecpp::proto::event::clientbound::v1::RecipientAllPlayers::MergeFrom(from._internal_all_players());
      break;
    }
    case kExcluding: {
      _internal_mutable_excluding()->::minecpp::proto::event::clientbound::v1::RecipientExcluding::MergeFrom(from._internal_excluding());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.Event)
}

inline void Event::SharedCtor() {
payload_ = nullptr;
clear_has_recipient();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
  if (has_recipient()) {
    clear_recipient();
  }
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::clear_recipient() {
// @@protoc_insertion_point(one_of_clear_start:minecpp.proto.event.clientbound.v1.Event)
  switch (recipient_case()) {
    case kSinglePlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete recipient_.single_player_;
      }
      break;
    }
    case kMultiplePlayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete recipient_.multiple_players_;
      }
      break;
    }
    case kAllPlayers: {
      if (GetArenaForAllocation() == nullptr) {
        delete recipient_.all_players_;
      }
      break;
    }
    case kExcluding: {
      if (GetArenaForAllocation() == nullptr) {
        delete recipient_.excluding_;
      }
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECIPIENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  clear_recipient();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_players(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_players(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_excluding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
  if (_internal_has_single_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::single_player(this),
        _Internal::single_player(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
  if (_internal_has_multiple_players()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::multiple_players(this),
        _Internal::multiple_players(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
  if (_internal_has_all_players()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::all_players(this),
        _Internal::all_players(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
  if (_internal_has_excluding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::excluding(this),
        _Internal::excluding(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  switch (recipient_case()) {
    // .minecpp.proto.event.clientbound.v1.RecipientSinglePlayer single_player = 2;
    case kSinglePlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recipient_.single_player_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers multiple_players = 3;
    case kMultiplePlayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recipient_.multiple_players_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientAllPlayers all_players = 4;
    case kAllPlayers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recipient_.all_players_);
      break;
    }
    // .minecpp.proto.event.clientbound.v1.RecipientExcluding excluding = 5;
    case kExcluding: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recipient_.excluding_);
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _internal_mutable_payload()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  switch (from.recipient_case()) {
    case kSinglePlayer: {
      _internal_mutable_single_player()->::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer::MergeFrom(from._internal_single_player());
      break;
    }
    case kMultiplePlayers: {
      _internal_mutable_multiple_players()->::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers::MergeFrom(from._internal_multiple_players());
      break;
    }
    case kAllPlayers: {
      _internal_mutable_all_players()->::minecpp::proto::event::clientbound::v1::RecipientAllPlayers::MergeFrom(from._internal_all_players());
      break;
    }
    case kExcluding: {
      _internal_mutable_excluding()->::minecpp::proto::event::clientbound::v1::RecipientExcluding::MergeFrom(from._internal_excluding());
      break;
    }
    case RECIPIENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(recipient_, other->recipient_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[0]);
}

// ===================================================================

class RecipientSinglePlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RecipientSinglePlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RecipientSinglePlayer::_Internal::player_id(const RecipientSinglePlayer* msg) {
  return *msg->player_id_;
}
void RecipientSinglePlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
RecipientSinglePlayer::RecipientSinglePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
}
RecipientSinglePlayer::RecipientSinglePlayer(const RecipientSinglePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
}

inline void RecipientSinglePlayer::SharedCtor() {
player_id_ = nullptr;
}

RecipientSinglePlayer::~RecipientSinglePlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientSinglePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void RecipientSinglePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecipientSinglePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientSinglePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientSinglePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  return target;
}

size_t RecipientSinglePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientSinglePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecipientSinglePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientSinglePlayer::GetClassData() const { return &_class_data_; }

void RecipientSinglePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecipientSinglePlayer *>(to)->MergeFrom(
      static_cast<const RecipientSinglePlayer &>(from));
}


void RecipientSinglePlayer::MergeFrom(const RecipientSinglePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientSinglePlayer::CopyFrom(const RecipientSinglePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientSinglePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientSinglePlayer::IsInitialized() const {
  return true;
}

void RecipientSinglePlayer::InternalSwap(RecipientSinglePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientSinglePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[1]);
}

// ===================================================================

class RecipientMultiplePlayers::_Internal {
 public:
};

void RecipientMultiplePlayers::clear_player_ids() {
  player_ids_.Clear();
}
RecipientMultiplePlayers::RecipientMultiplePlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  player_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
}
RecipientMultiplePlayers::RecipientMultiplePlayers(const RecipientMultiplePlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_ids_(from.player_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
}

inline void RecipientMultiplePlayers::SharedCtor() {
}

RecipientMultiplePlayers::~RecipientMultiplePlayers() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientMultiplePlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecipientMultiplePlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecipientMultiplePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientMultiplePlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientMultiplePlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  return target;
}

size_t RecipientMultiplePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.PlayerId player_ids = 1;
  total_size += 1UL * this->_internal_player_ids_size();
  for (const auto& msg : this->player_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientMultiplePlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecipientMultiplePlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientMultiplePlayers::GetClassData() const { return &_class_data_; }

void RecipientMultiplePlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecipientMultiplePlayers *>(to)->MergeFrom(
      static_cast<const RecipientMultiplePlayers &>(from));
}


void RecipientMultiplePlayers::MergeFrom(const RecipientMultiplePlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  player_ids_.MergeFrom(from.player_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientMultiplePlayers::CopyFrom(const RecipientMultiplePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientMultiplePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientMultiplePlayers::IsInitialized() const {
  return true;
}

void RecipientMultiplePlayers::InternalSwap(RecipientMultiplePlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_ids_.InternalSwap(&other->player_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientMultiplePlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[2]);
}

// ===================================================================

class RecipientAllPlayers::_Internal {
 public:
};

RecipientAllPlayers::RecipientAllPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientAllPlayers)
}
RecipientAllPlayers::RecipientAllPlayers(const RecipientAllPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientAllPlayers)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientAllPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientAllPlayers::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RecipientAllPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[3]);
}

// ===================================================================

class RecipientExcluding::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RecipientExcluding* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RecipientExcluding::_Internal::player_id(const RecipientExcluding* msg) {
  return *msg->player_id_;
}
void RecipientExcluding::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
RecipientExcluding::RecipientExcluding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
}
RecipientExcluding::RecipientExcluding(const RecipientExcluding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
}

inline void RecipientExcluding::SharedCtor() {
player_id_ = nullptr;
}

RecipientExcluding::~RecipientExcluding() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecipientExcluding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void RecipientExcluding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecipientExcluding::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientExcluding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipientExcluding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  return target;
}

size_t RecipientExcluding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipientExcluding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecipientExcluding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipientExcluding::GetClassData() const { return &_class_data_; }

void RecipientExcluding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecipientExcluding *>(to)->MergeFrom(
      static_cast<const RecipientExcluding &>(from));
}


void RecipientExcluding::MergeFrom(const RecipientExcluding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipientExcluding::CopyFrom(const RecipientExcluding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RecipientExcluding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientExcluding::IsInitialized() const {
  return true;
}

void RecipientExcluding::InternalSwap(RecipientExcluding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientExcluding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[4]);
}

// ===================================================================

class AddPlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const AddPlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
AddPlayer::_Internal::player_id(const AddPlayer* msg) {
  return *msg->player_id_;
}
void AddPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AddPlayer::AddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AddPlayer)
}
AddPlayer::AddPlayer(const AddPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&game_mode_, &from.game_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&game_mode_)) + sizeof(ping_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AddPlayer)
}

inline void AddPlayer::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ping_));
}

AddPlayer::~AddPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AddPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete player_id_;
}

void AddPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&game_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&game_mode_)) + sizeof(ping_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.AddPlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.GameMode game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_mode(static_cast<::minecpp::proto::common::v1::GameMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.AddPlayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 3;
  if (this->_internal_game_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_game_mode(), target);
  }

  // uint32 ping = 4;
  if (this->_internal_ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AddPlayer)
  return target;
}

size_t AddPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 3;
  if (this->_internal_game_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
  }

  // uint32 ping = 4;
  if (this->_internal_ping() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPlayer::GetClassData() const { return &_class_data_; }

void AddPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddPlayer *>(to)->MergeFrom(
      static_cast<const AddPlayer &>(from));
}


void AddPlayer::MergeFrom(const AddPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_game_mode() != 0) {
    _internal_set_game_mode(from._internal_game_mode());
  }
  if (from._internal_ping() != 0) {
    _internal_set_ping(from._internal_ping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPlayer::CopyFrom(const AddPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayer::IsInitialized() const {
  return true;
}

void AddPlayer::InternalSwap(AddPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlayer, ping_)
      + sizeof(AddPlayer::ping_)
      - PROTOBUF_FIELD_OFFSET(AddPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[5]);
}

// ===================================================================

class SpawnPlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const SpawnPlayer* msg);
  static const ::minecpp::proto::entity::v1::Position& position(const SpawnPlayer* msg);
  static const ::minecpp::proto::entity::v1::Rotation& rotation(const SpawnPlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
SpawnPlayer::_Internal::player_id(const SpawnPlayer* msg) {
  return *msg->player_id_;
}
const ::minecpp::proto::entity::v1::Position&
SpawnPlayer::_Internal::position(const SpawnPlayer* msg) {
  return *msg->position_;
}
const ::minecpp::proto::entity::v1::Rotation&
SpawnPlayer::_Internal::rotation(const SpawnPlayer* msg) {
  return *msg->rotation_;
}
void SpawnPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SpawnPlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void SpawnPlayer::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
SpawnPlayer::SpawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
}
SpawnPlayer::SpawnPlayer(const SpawnPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::minecpp::proto::entity::v1::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::minecpp::proto::entity::v1::Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  entity_id_ = from.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
}

inline void SpawnPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

SpawnPlayer::~SpawnPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void SpawnPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpawnPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Rotation rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.entity.v1.Position position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  return target;
}

size_t SpawnPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .minecpp.proto.entity.v1.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpawnPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnPlayer::GetClassData() const { return &_class_data_; }

void SpawnPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpawnPlayer *>(to)->MergeFrom(
      static_cast<const SpawnPlayer &>(from));
}


void SpawnPlayer::MergeFrom(const SpawnPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::minecpp::proto::entity::v1::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::minecpp::proto::entity::v1::Rotation::MergeFrom(from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnPlayer::CopyFrom(const SpawnPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.SpawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnPlayer::IsInitialized() const {
  return true;
}

void SpawnPlayer::InternalSwap(SpawnPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnPlayer, entity_id_)
      + sizeof(SpawnPlayer::entity_id_)
      - PROTOBUF_FIELD_OFFSET(SpawnPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[6]);
}

// ===================================================================

class EntityMove::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const EntityMove* msg);
  static const ::minecpp::proto::entity::v1::Movement& movement(const EntityMove* msg);
  static const ::minecpp::proto::entity::v1::Rotation& rotation(const EntityMove* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
EntityMove::_Internal::player_id(const EntityMove* msg) {
  return *msg->player_id_;
}
const ::minecpp::proto::entity::v1::Movement&
EntityMove::_Internal::movement(const EntityMove* msg) {
  return *msg->movement_;
}
const ::minecpp::proto::entity::v1::Rotation&
EntityMove::_Internal::rotation(const EntityMove* msg) {
  return *msg->rotation_;
}
void EntityMove::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void EntityMove::clear_movement() {
  if (GetArenaForAllocation() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
}
void EntityMove::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
EntityMove::EntityMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityMove)
}
EntityMove::EntityMove(const EntityMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_movement()) {
    movement_ = new ::minecpp::proto::entity::v1::Movement(*from.movement_);
  } else {
    movement_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::minecpp::proto::entity::v1::Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  entity_id_ = from.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityMove)
}

inline void EntityMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

EntityMove::~EntityMove() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete movement_;
  if (this != internal_default_instance()) delete rotation_;
}

void EntityMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntityMove::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Movement movement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Rotation rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.entity.v1.Movement movement = 3;
  if (this->_internal_has_movement()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::movement(this),
        _Internal::movement(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityMove)
  return target;
}

size_t EntityMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .minecpp.proto.entity.v1.Movement movement = 3;
  if (this->_internal_has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EntityMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityMove::GetClassData() const { return &_class_data_; }

void EntityMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EntityMove *>(to)->MergeFrom(
      static_cast<const EntityMove &>(from));
}


void EntityMove::MergeFrom(const EntityMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_has_movement()) {
    _internal_mutable_movement()->::minecpp::proto::entity::v1::Movement::MergeFrom(from._internal_movement());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::minecpp::proto::entity::v1::Rotation::MergeFrom(from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityMove::CopyFrom(const EntityMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMove::IsInitialized() const {
  return true;
}

void EntityMove::InternalSwap(EntityMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityMove, entity_id_)
      + sizeof(EntityMove::entity_id_)
      - PROTOBUF_FIELD_OFFSET(EntityMove, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[7]);
}

// ===================================================================

class EntityLook::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const EntityLook* msg);
  static const ::minecpp::proto::entity::v1::Rotation& rotation(const EntityLook* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
EntityLook::_Internal::player_id(const EntityLook* msg) {
  return *msg->player_id_;
}
const ::minecpp::proto::entity::v1::Rotation&
EntityLook::_Internal::rotation(const EntityLook* msg) {
  return *msg->rotation_;
}
void EntityLook::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void EntityLook::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
EntityLook::EntityLook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityLook)
}
EntityLook::EntityLook(const EntityLook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::minecpp::proto::entity::v1::Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  entity_id_ = from.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityLook)
}

inline void EntityLook::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

EntityLook::~EntityLook() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityLook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityLook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete rotation_;
}

void EntityLook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntityLook::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityLook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityLook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Rotation rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityLook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityLook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityLook)
  return target;
}

size_t EntityLook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityLook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityLook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EntityLook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityLook::GetClassData() const { return &_class_data_; }

void EntityLook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EntityLook *>(to)->MergeFrom(
      static_cast<const EntityLook &>(from));
}


void EntityLook::MergeFrom(const EntityLook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityLook)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::minecpp::proto::entity::v1::Rotation::MergeFrom(from._internal_rotation());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityLook::CopyFrom(const EntityLook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityLook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityLook::IsInitialized() const {
  return true;
}

void EntityLook::InternalSwap(EntityLook* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityLook, entity_id_)
      + sizeof(EntityLook::entity_id_)
      - PROTOBUF_FIELD_OFFSET(EntityLook, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityLook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[8]);
}

// ===================================================================

class PlayerPositionRotation::_Internal {
 public:
};

PlayerPositionRotation::PlayerPositionRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
}
PlayerPositionRotation::PlayerPositionRotation(const PlayerPositionRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.PlayerPositionRotation)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerPositionRotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerPositionRotation::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PlayerPositionRotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[9]);
}

// ===================================================================

class Chat::_Internal {
 public:
};

Chat::Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.Chat)
}
Chat::Chat(const Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.Chat)
}

inline void Chat::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.Chat.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.Chat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat::GetClassData() const { return &_class_data_; }

void Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat *>(to)->MergeFrom(
      static_cast<const Chat &>(from));
}


void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {
  return true;
}

void Chat::InternalSwap(Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[10]);
}

// ===================================================================

class RemovePlayer::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const RemovePlayer* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
RemovePlayer::_Internal::player_id(const RemovePlayer* msg) {
  return *msg->player_id_;
}
void RemovePlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
RemovePlayer::RemovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
}
RemovePlayer::RemovePlayer(const RemovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  entity_id_ = from.entity_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
}

inline void RemovePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

RemovePlayer::~RemovePlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.RemovePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void RemovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  entity_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemovePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemovePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.RemovePlayer)
  return target;
}

size_t RemovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemovePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemovePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemovePlayer::GetClassData() const { return &_class_data_; }

void RemovePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemovePlayer *>(to)->MergeFrom(
      static_cast<const RemovePlayer &>(from));
}


void RemovePlayer::MergeFrom(const RemovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemovePlayer::CopyFrom(const RemovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.RemovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayer::IsInitialized() const {
  return true;
}

void RemovePlayer::InternalSwap(RemovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemovePlayer, entity_id_)
      + sizeof(RemovePlayer::entity_id_)
      - PROTOBUF_FIELD_OFFSET(RemovePlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[11]);
}

// ===================================================================

class UpdateBlock::_Internal {
 public:
};

UpdateBlock::UpdateBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
}
UpdateBlock::UpdateBlock(const UpdateBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_position_, &from.block_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&block_position_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
}

inline void UpdateBlock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&block_position_)) + sizeof(state_));
}

UpdateBlock::~UpdateBlock() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UpdateBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&block_position_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          block_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_position = 1;
  if (this->_internal_block_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_position(), target);
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UpdateBlock)
  return target;
}

size_t UpdateBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_position = 1;
  if (this->_internal_block_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_position());
  }

  // uint32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateBlock::GetClassData() const { return &_class_data_; }

void UpdateBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateBlock *>(to)->MergeFrom(
      static_cast<const UpdateBlock &>(from));
}


void UpdateBlock::MergeFrom(const UpdateBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_position() != 0) {
    _internal_set_block_position(from._internal_block_position());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateBlock::CopyFrom(const UpdateBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UpdateBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlock::IsInitialized() const {
  return true;
}

void UpdateBlock::InternalSwap(UpdateBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBlock, state_)
      + sizeof(UpdateBlock::state_)
      - PROTOBUF_FIELD_OFFSET(UpdateBlock, block_position_)>(
          reinterpret_cast<char*>(&block_position_),
          reinterpret_cast<char*>(&other->block_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[12]);
}

// ===================================================================

class AnimateHand::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const AnimateHand* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
AnimateHand::_Internal::player_id(const AnimateHand* msg) {
  return *msg->player_id_;
}
void AnimateHand::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AnimateHand::AnimateHand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AnimateHand)
}
AnimateHand::AnimateHand(const AnimateHand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(hand_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AnimateHand)
}

inline void AnimateHand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hand_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(hand_));
}

AnimateHand::~AnimateHand() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AnimateHand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnimateHand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void AnimateHand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnimateHand::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AnimateHand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(hand_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimateHand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimateHand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AnimateHand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // uint32 hand = 3;
  if (this->_internal_hand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hand(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AnimateHand)
  return target;
}

size_t AnimateHand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AnimateHand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // uint32 hand = 3;
  if (this->_internal_hand() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hand());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimateHand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnimateHand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimateHand::GetClassData() const { return &_class_data_; }

void AnimateHand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnimateHand *>(to)->MergeFrom(
      static_cast<const AnimateHand &>(from));
}


void AnimateHand::MergeFrom(const AnimateHand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AnimateHand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_hand() != 0) {
    _internal_set_hand(from._internal_hand());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimateHand::CopyFrom(const AnimateHand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AnimateHand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimateHand::IsInitialized() const {
  return true;
}

void AnimateHand::InternalSwap(AnimateHand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimateHand, hand_)
      + sizeof(AnimateHand::hand_)
      - PROTOBUF_FIELD_OFFSET(AnimateHand, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimateHand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[13]);
}

// ===================================================================

class LoadTerrain::_Internal {
 public:
  static const ::minecpp::proto::common::v1::ChunkPosition& central_chunk(const LoadTerrain* msg);
};

const ::minecpp::proto::common::v1::ChunkPosition&
LoadTerrain::_Internal::central_chunk(const LoadTerrain* msg) {
  return *msg->central_chunk_;
}
void LoadTerrain::clear_central_chunk() {
  if (GetArenaForAllocation() == nullptr && central_chunk_ != nullptr) {
    delete central_chunk_;
  }
  central_chunk_ = nullptr;
}
void LoadTerrain::clear_coords() {
  coords_.Clear();
}
LoadTerrain::LoadTerrain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coords_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
}
LoadTerrain::LoadTerrain(const LoadTerrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coords_(from.coords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_central_chunk()) {
    central_chunk_ = new ::minecpp::proto::common::v1::ChunkPosition(*from.central_chunk_);
  } else {
    central_chunk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
}

inline void LoadTerrain::SharedCtor() {
central_chunk_ = nullptr;
}

LoadTerrain::~LoadTerrain() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.LoadTerrain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoadTerrain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete central_chunk_;
}

void LoadTerrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadTerrain::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coords_.Clear();
  if (GetArenaForAllocation() == nullptr && central_chunk_ != nullptr) {
    delete central_chunk_;
  }
  central_chunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadTerrain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_central_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadTerrain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
  if (this->_internal_has_central_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::central_chunk(this),
        _Internal::central_chunk(this).GetCachedSize(), target, stream);
  }

  // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.LoadTerrain)
  return target;
}

size_t LoadTerrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.common.v1.ChunkPosition coords = 2;
  total_size += 1UL * this->_internal_coords_size();
  for (const auto& msg : this->coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .minecpp.proto.common.v1.ChunkPosition central_chunk = 1;
  if (this->_internal_has_central_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *central_chunk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadTerrain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadTerrain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadTerrain::GetClassData() const { return &_class_data_; }

void LoadTerrain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadTerrain *>(to)->MergeFrom(
      static_cast<const LoadTerrain &>(from));
}


void LoadTerrain::MergeFrom(const LoadTerrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  coords_.MergeFrom(from.coords_);
  if (from._internal_has_central_chunk()) {
    _internal_mutable_central_chunk()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(from._internal_central_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadTerrain::CopyFrom(const LoadTerrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.LoadTerrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadTerrain::IsInitialized() const {
  return true;
}

void LoadTerrain::InternalSwap(LoadTerrain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coords_.InternalSwap(&other->coords_);
  swap(central_chunk_, other->central_chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadTerrain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[14]);
}

// ===================================================================

class TransferPlayer::_Internal {
 public:
};

TransferPlayer::TransferPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
}
TransferPlayer::TransferPlayer(const TransferPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  engine_instance_id_ = from.engine_instance_id_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
}

inline void TransferPlayer::SharedCtor() {
engine_instance_id_ = uint64_t{0u};
}

TransferPlayer::~TransferPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.TransferPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransferPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransferPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_instance_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 engine_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          engine_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 engine_instance_id = 2;
  if (this->_internal_engine_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_engine_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.TransferPlayer)
  return target;
}

size_t TransferPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 engine_instance_id = 2;
  if (this->_internal_engine_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_engine_instance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransferPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferPlayer::GetClassData() const { return &_class_data_; }

void TransferPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransferPlayer *>(to)->MergeFrom(
      static_cast<const TransferPlayer &>(from));
}


void TransferPlayer::MergeFrom(const TransferPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_engine_instance_id() != 0) {
    _internal_set_engine_instance_id(from._internal_engine_instance_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferPlayer::CopyFrom(const TransferPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.TransferPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferPlayer::IsInitialized() const {
  return true;
}

void TransferPlayer::InternalSwap(TransferPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(engine_instance_id_, other->engine_instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[15]);
}

// ===================================================================

class UpdatePlayerAbilities::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const UpdatePlayerAbilities* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
UpdatePlayerAbilities::_Internal::player_id(const UpdatePlayerAbilities* msg) {
  return *msg->player_id_;
}
void UpdatePlayerAbilities::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
UpdatePlayerAbilities::UpdatePlayerAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
}
UpdatePlayerAbilities::UpdatePlayerAbilities(const UpdatePlayerAbilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&invulnerable_, &from.invulnerable_,
    static_cast<size_t>(reinterpret_cast<char*>(&fly_speed_) -
    reinterpret_cast<char*>(&invulnerable_)) + sizeof(fly_speed_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
}

inline void UpdatePlayerAbilities::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fly_speed_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(fly_speed_));
}

UpdatePlayerAbilities::~UpdatePlayerAbilities() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePlayerAbilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void UpdatePlayerAbilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePlayerAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&invulnerable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fly_speed_) -
      reinterpret_cast<char*>(&invulnerable_)) + sizeof(fly_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerAbilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool invulnerable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          invulnerable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_flying = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_flying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_flying = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          allow_flying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool creative_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          creative_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float walk_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          walk_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fly_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          fly_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePlayerAbilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // bool invulnerable = 2;
  if (this->_internal_invulnerable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_invulnerable(), target);
  }

  // bool is_flying = 3;
  if (this->_internal_is_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_flying(), target);
  }

  // bool allow_flying = 4;
  if (this->_internal_allow_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_flying(), target);
  }

  // bool creative_mode = 5;
  if (this->_internal_creative_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_creative_mode(), target);
  }

  // float walk_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_walk_speed(), target);
  }

  // float fly_speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_fly_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  return target;
}

size_t UpdatePlayerAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // bool invulnerable = 2;
  if (this->_internal_invulnerable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_flying = 3;
  if (this->_internal_is_flying() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_flying = 4;
  if (this->_internal_allow_flying() != 0) {
    total_size += 1 + 1;
  }

  // bool creative_mode = 5;
  if (this->_internal_creative_mode() != 0) {
    total_size += 1 + 1;
  }

  // float walk_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    total_size += 1 + 4;
  }

  // float fly_speed = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePlayerAbilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdatePlayerAbilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePlayerAbilities::GetClassData() const { return &_class_data_; }

void UpdatePlayerAbilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdatePlayerAbilities *>(to)->MergeFrom(
      static_cast<const UpdatePlayerAbilities &>(from));
}


void UpdatePlayerAbilities::MergeFrom(const UpdatePlayerAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_invulnerable() != 0) {
    _internal_set_invulnerable(from._internal_invulnerable());
  }
  if (from._internal_is_flying() != 0) {
    _internal_set_is_flying(from._internal_is_flying());
  }
  if (from._internal_allow_flying() != 0) {
    _internal_set_allow_flying(from._internal_allow_flying());
  }
  if (from._internal_creative_mode() != 0) {
    _internal_set_creative_mode(from._internal_creative_mode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = from._internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    _internal_set_walk_speed(from._internal_walk_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = from._internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    _internal_set_fly_speed(from._internal_fly_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePlayerAbilities::CopyFrom(const UpdatePlayerAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UpdatePlayerAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerAbilities::IsInitialized() const {
  return true;
}

void UpdatePlayerAbilities::InternalSwap(UpdatePlayerAbilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerAbilities, fly_speed_)
      + sizeof(UpdatePlayerAbilities::fly_speed_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerAbilities, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerAbilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[16]);
}

// ===================================================================

class UnloadChunk::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const UnloadChunk* msg);
  static const ::minecpp::proto::common::v1::ChunkPosition& chunk_position(const UnloadChunk* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
UnloadChunk::_Internal::player_id(const UnloadChunk* msg) {
  return *msg->player_id_;
}
const ::minecpp::proto::common::v1::ChunkPosition&
UnloadChunk::_Internal::chunk_position(const UnloadChunk* msg) {
  return *msg->chunk_position_;
}
void UnloadChunk::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void UnloadChunk::clear_chunk_position() {
  if (GetArenaForAllocation() == nullptr && chunk_position_ != nullptr) {
    delete chunk_position_;
  }
  chunk_position_ = nullptr;
}
UnloadChunk::UnloadChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
}
UnloadChunk::UnloadChunk(const UnloadChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_chunk_position()) {
    chunk_position_ = new ::minecpp::proto::common::v1::ChunkPosition(*from.chunk_position_);
  } else {
    chunk_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
}

inline void UnloadChunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunk_position_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(chunk_position_));
}

UnloadChunk::~UnloadChunk() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.UnloadChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnloadChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete chunk_position_;
}

void UnloadChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnloadChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chunk_position_ != nullptr) {
    delete chunk_position_;
  }
  chunk_position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnloadChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnloadChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player_id(this),
        _Internal::player_id(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
  if (this->_internal_has_chunk_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk_position(this),
        _Internal::chunk_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.UnloadChunk)
  return target;
}

size_t UnloadChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId player_id = 1;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .minecpp.proto.common.v1.ChunkPosition chunk_position = 2;
  if (this->_internal_has_chunk_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnloadChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnloadChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnloadChunk::GetClassData() const { return &_class_data_; }

void UnloadChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnloadChunk *>(to)->MergeFrom(
      static_cast<const UnloadChunk &>(from));
}


void UnloadChunk::MergeFrom(const UnloadChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  if (from._internal_has_chunk_position()) {
    _internal_mutable_chunk_position()->::minecpp::proto::common::v1::ChunkPosition::MergeFrom(from._internal_chunk_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnloadChunk::CopyFrom(const UnloadChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.UnloadChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadChunk::IsInitialized() const {
  return true;
}

void UnloadChunk::InternalSwap(UnloadChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnloadChunk, chunk_position_)
      + sizeof(UnloadChunk::chunk_position_)
      - PROTOBUF_FIELD_OFFSET(UnloadChunk, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnloadChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[17]);
}

// ===================================================================

class PlayerList::_Internal {
 public:
};

void PlayerList::clear_list() {
  list_.Clear();
}
PlayerList::PlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.PlayerList)
}
PlayerList::PlayerList(const PlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.PlayerList)
}

inline void PlayerList::SharedCtor() {
}

PlayerList::~PlayerList() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.PlayerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.PlayerList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.player.v1.Status list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.PlayerList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.Status list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.PlayerList)
  return target;
}

size_t PlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.PlayerList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.player.v1.Status list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerList::GetClassData() const { return &_class_data_; }

void PlayerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerList *>(to)->MergeFrom(
      static_cast<const PlayerList &>(from));
}


void PlayerList::MergeFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.PlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerList::CopyFrom(const PlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.PlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerList::IsInitialized() const {
  return true;
}

void PlayerList::InternalSwap(PlayerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[18]);
}

// ===================================================================

class EntityList::_Internal {
 public:
};

void EntityList::clear_list() {
  list_.Clear();
}
EntityList::EntityList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.EntityList)
}
EntityList::EntityList(const EntityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.EntityList)
}

inline void EntityList::SharedCtor() {
}

EntityList::~EntityList() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.EntityList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EntityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntityList::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.EntityList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .minecpp.proto.entity.v1.Entity list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.EntityList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.v1.Entity list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.EntityList)
  return target;
}

size_t EntityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.EntityList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.entity.v1.Entity list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EntityList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityList::GetClassData() const { return &_class_data_; }

void EntityList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EntityList *>(to)->MergeFrom(
      static_cast<const EntityList &>(from));
}


void EntityList::MergeFrom(const EntityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.EntityList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityList::CopyFrom(const EntityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.EntityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityList::IsInitialized() const {
  return true;
}

void EntityList::InternalSwap(EntityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[19]);
}

// ===================================================================

class AcceptPlayer::_Internal {
 public:
  static const ::minecpp::proto::common::v1::Gameplay& gameplay(const AcceptPlayer* msg);
  static const ::minecpp::proto::player::v1::Player& player(const AcceptPlayer* msg);
};

const ::minecpp::proto::common::v1::Gameplay&
AcceptPlayer::_Internal::gameplay(const AcceptPlayer* msg) {
  return *msg->gameplay_;
}
const ::minecpp::proto::player::v1::Player&
AcceptPlayer::_Internal::player(const AcceptPlayer* msg) {
  return *msg->player_;
}
void AcceptPlayer::clear_gameplay() {
  if (GetArenaForAllocation() == nullptr && gameplay_ != nullptr) {
    delete gameplay_;
  }
  gameplay_ = nullptr;
}
void AcceptPlayer::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
AcceptPlayer::AcceptPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
}
AcceptPlayer::AcceptPlayer(const AcceptPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameplay()) {
    gameplay_ = new ::minecpp::proto::common::v1::Gameplay(*from.gameplay_);
  } else {
    gameplay_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::minecpp::proto::player::v1::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
}

inline void AcceptPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameplay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&gameplay_)) + sizeof(player_));
}

AcceptPlayer::~AcceptPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete gameplay_;
  if (this != internal_default_instance()) delete player_;
}

void AcceptPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AcceptPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && gameplay_ != nullptr) {
    delete gameplay_;
  }
  gameplay_ = nullptr;
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.common.v1.Gameplay gameplay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Gameplay gameplay = 1;
  if (this->_internal_has_gameplay()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gameplay(this),
        _Internal::gameplay(this).GetCachedSize(), target, stream);
  }

  // .minecpp.proto.player.v1.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  return target;
}

size_t AcceptPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .minecpp.proto.common.v1.Gameplay gameplay = 1;
  if (this->_internal_has_gameplay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameplay_);
  }

  // .minecpp.proto.player.v1.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AcceptPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptPlayer::GetClassData() const { return &_class_data_; }

void AcceptPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AcceptPlayer *>(to)->MergeFrom(
      static_cast<const AcceptPlayer &>(from));
}


void AcceptPlayer::MergeFrom(const AcceptPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameplay()) {
    _internal_mutable_gameplay()->::minecpp::proto::common::v1::Gameplay::MergeFrom(from._internal_gameplay());
  }
  if (from._internal_has_player()) {
    _internal_mutable_player()->::minecpp::proto::player::v1::Player::MergeFrom(from._internal_player());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptPlayer::CopyFrom(const AcceptPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.AcceptPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayer::IsInitialized() const {
  return true;
}

void AcceptPlayer::InternalSwap(AcceptPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcceptPlayer, player_)
      + sizeof(AcceptPlayer::player_)
      - PROTOBUF_FIELD_OFFSET(AcceptPlayer, gameplay_)>(
          reinterpret_cast<char*>(&gameplay_),
          reinterpret_cast<char*>(&other->gameplay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[20]);
}

// ===================================================================

class DenyPlayer::_Internal {
 public:
};

DenyPlayer::DenyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
}
DenyPlayer::DenyPlayer(const DenyPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  denial_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    denial_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denial_reason().empty()) {
    denial_reason_.Set(from._internal_denial_reason(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
}

inline void DenyPlayer::SharedCtor() {
denial_reason_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  denial_reason_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenyPlayer::~DenyPlayer() {
  // @@protoc_insertion_point(destructor:minecpp.proto.event.clientbound.v1.DenyPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenyPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  denial_reason_.Destroy();
}

void DenyPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DenyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  denial_reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenyPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denial_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denial_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.event.clientbound.v1.DenyPlayer.denial_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DenyPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denial_reason = 1;
  if (!this->_internal_denial_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_denial_reason().data(), static_cast<int>(this->_internal_denial_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.event.clientbound.v1.DenyPlayer.denial_reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_denial_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.event.clientbound.v1.DenyPlayer)
  return target;
}

size_t DenyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denial_reason = 1;
  if (!this->_internal_denial_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denial_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenyPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DenyPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenyPlayer::GetClassData() const { return &_class_data_; }

void DenyPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DenyPlayer *>(to)->MergeFrom(
      static_cast<const DenyPlayer &>(from));
}


void DenyPlayer::MergeFrom(const DenyPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denial_reason().empty()) {
    _internal_set_denial_reason(from._internal_denial_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenyPlayer::CopyFrom(const DenyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.event.clientbound.v1.DenyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenyPlayer::IsInitialized() const {
  return true;
}

void DenyPlayer::InternalSwap(DenyPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &denial_reason_, lhs_arena,
      &other->denial_reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DenyPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_getter, &descriptor_table_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fevent_2fclientbound_2fv1_2fclientbound_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace clientbound
}  // namespace event
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::Event*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientSinglePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientMultiplePlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientAllPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RecipientExcluding*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RecipientExcluding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RecipientExcluding >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AddPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AddPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AddPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::SpawnPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::SpawnPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::SpawnPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityMove*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityMove >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityLook*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityLook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityLook >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::PlayerPositionRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::Chat*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::RemovePlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::RemovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::RemovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UpdateBlock*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UpdateBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UpdateBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AnimateHand*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AnimateHand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AnimateHand >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::LoadTerrain*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::LoadTerrain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::LoadTerrain >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::TransferPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::TransferPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::TransferPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UpdatePlayerAbilities >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::UnloadChunk*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::UnloadChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::UnloadChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::PlayerList*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::PlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::PlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::EntityList*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::EntityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::EntityList >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::AcceptPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::AcceptPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::AcceptPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::event::clientbound::v1::DenyPlayer*
Arena::CreateMaybeMessage< ::minecpp::proto::event::clientbound::v1::DenyPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::event::clientbound::v1::DenyPlayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
