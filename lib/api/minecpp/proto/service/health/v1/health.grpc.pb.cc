// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: minecpp/proto/service/health/v1/health.proto

#include <minecpp/proto/service/health/v1/health.pb.h>
#include <minecpp/proto/service/health/v1/health.grpc.pb.h>

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace minecpp {
namespace proto {
namespace service {
namespace health {
namespace v1 {

static const char* HealthService_method_names[] = {
  "/minecpp.proto.service.health.v1.HealthService/GetServiceStatus",
};

std::unique_ptr< HealthService::Stub> HealthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HealthService::Stub> stub(new HealthService::Stub(channel, options));
  return stub;
}

HealthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServiceStatus_(HealthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HealthService::Stub::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::proto::service::health::v1::Request& request, ::minecpp::proto::service::health::v1::ServiceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::minecpp::proto::service::health::v1::Request, ::minecpp::proto::service::health::v1::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceStatus_, context, request, response);
}

void HealthService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::proto::service::health::v1::Request* request, ::minecpp::proto::service::health::v1::ServiceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::minecpp::proto::service::health::v1::Request, ::minecpp::proto::service::health::v1::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::GetServiceStatus(::grpc::ClientContext* context, const ::minecpp::proto::service::health::v1::Request* request, ::minecpp::proto::service::health::v1::ServiceStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::minecpp::proto::service::health::v1::ServiceStatus>* HealthService::Stub::PrepareAsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::proto::service::health::v1::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::minecpp::proto::service::health::v1::ServiceStatus, ::minecpp::proto::service::health::v1::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::minecpp::proto::service::health::v1::ServiceStatus>* HealthService::Stub::AsyncGetServiceStatusRaw(::grpc::ClientContext* context, const ::minecpp::proto::service::health::v1::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

HealthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthService::Service, ::minecpp::proto::service::health::v1::Request, ::minecpp::proto::service::health::v1::ServiceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::minecpp::proto::service::health::v1::Request* req,
             ::minecpp::proto::service::health::v1::ServiceStatus* resp) {
               return service->GetServiceStatus(ctx, req, resp);
             }, this)));
}

HealthService::Service::~Service() {
}

::grpc::Status HealthService::Service::GetServiceStatus(::grpc::ServerContext* context, const ::minecpp::proto::service::health::v1::Request* request, ::minecpp::proto::service::health::v1::ServiceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace minecpp
}  // namespace proto
}  // namespace service
}  // namespace health
}  // namespace v1

