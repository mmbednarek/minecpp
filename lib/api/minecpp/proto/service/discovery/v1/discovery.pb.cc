// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/service/discovery/v1/discovery.proto

#include <minecpp/proto/service/discovery/v1/discovery.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace minecpp {
namespace proto {
namespace service {
namespace discovery {
namespace v1 {
PROTOBUF_CONSTEXPR DiscoveryRequest::DiscoveryRequest(
    ::_pbi::ConstantInitialized)
  : service_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , resource_version_(uint64_t{0u}){}
struct DiscoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryRequestDefaultTypeInternal() {}
  union {
    DiscoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryResponse::DiscoveryResponse(
    ::_pbi::ConstantInitialized)
  : endpoints_()
  , resource_version_(uint64_t{0u}){}
struct DiscoveryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryResponseDefaultTypeInternal() {}
  union {
    DiscoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
PROTOBUF_CONSTEXPR Endpoint::Endpoint(
    ::_pbi::ConstantInitialized)
  : address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(0u){}
struct EndpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndpointDefaultTypeInternal() {}
  union {
    Endpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndpointDefaultTypeInternal _Endpoint_default_instance_;
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized)
  : service_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , endpoint_(nullptr){}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR EmptyResult::EmptyResult(
    ::_pbi::ConstantInitialized){}
struct EmptyResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyResultDefaultTypeInternal() {}
  union {
    EmptyResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyResultDefaultTypeInternal _EmptyResult_default_instance_;
}  // namespace v1
}  // namespace discovery
}  // namespace service
}  // namespace proto
}  // namespace minecpp
static ::_pb::Metadata file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryRequest, resource_version_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryResponse, resource_version_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::DiscoveryResponse, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::Endpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::Endpoint, address_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::Endpoint, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::RegisterRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::RegisterRequest, endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::discovery::v1::EmptyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::service::discovery::v1::DiscoveryRequest)},
  { 8, -1, -1, sizeof(::minecpp::proto::service::discovery::v1::DiscoveryResponse)},
  { 16, -1, -1, sizeof(::minecpp::proto::service::discovery::v1::Endpoint)},
  { 24, -1, -1, sizeof(::minecpp::proto::service::discovery::v1::RegisterRequest)},
  { 32, -1, -1, sizeof(::minecpp::proto::service::discovery::v1::EmptyResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::minecpp::proto::service::discovery::v1::_DiscoveryRequest_default_instance_._instance,
  &::minecpp::proto::service::discovery::v1::_DiscoveryResponse_default_instance_._instance,
  &::minecpp::proto::service::discovery::v1::_Endpoint_default_instance_._instance,
  &::minecpp::proto::service::discovery::v1::_RegisterRequest_default_instance_._instance,
  &::minecpp::proto::service::discovery::v1::_EmptyResult_default_instance_._instance,
};

const char descriptor_table_protodef_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2minecpp/proto/service/discovery/v1/dis"
  "covery.proto\022\"minecpp.proto.service.disc"
  "overy.v1\"B\n\020DiscoveryRequest\022\030\n\020resource"
  "_version\030\001 \001(\004\022\024\n\014service_name\030\002 \001(\t\"n\n\021"
  "DiscoveryResponse\022\030\n\020resource_version\030\001 "
  "\001(\004\022\?\n\tendpoints\030\002 \003(\0132,.minecpp.proto.s"
  "ervice.discovery.v1.Endpoint\")\n\010Endpoint"
  "\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"g\n\017Regis"
  "terRequest\022\024\n\014service_name\030\001 \001(\t\022>\n\010endp"
  "oint\030\002 \001(\0132,.minecpp.proto.service.disco"
  "very.v1.Endpoint\"\r\n\013EmptyResult2\203\002\n\020Disc"
  "overyService\022v\n\007Resolve\0224.minecpp.proto."
  "service.discovery.v1.DiscoveryRequest\0325."
  "minecpp.proto.service.discovery.v1.Disco"
  "veryResponse\022w\n\017RegisterService\0223.minecp"
  "p.proto.service.discovery.v1.RegisterReq"
  "uest\032/.minecpp.proto.service.discovery.v"
  "1.EmptyResultb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto = {
    false, false, 701, descriptor_table_protodef_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto,
    "minecpp/proto/service/discovery/v1/discovery.proto",
    &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto::offsets,
    file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto,
    file_level_service_descriptors_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto(&descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto);
namespace minecpp {
namespace proto {
namespace service {
namespace discovery {
namespace v1 {

// ===================================================================

class DiscoveryRequest::_Internal {
 public:
};

DiscoveryRequest::DiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.discovery.v1.DiscoveryRequest)
}
DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  resource_version_ = from.resource_version_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.discovery.v1.DiscoveryRequest)
}

inline void DiscoveryRequest::SharedCtor() {
service_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
resource_version_ = uint64_t{0u};
}

DiscoveryRequest::~DiscoveryRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.Destroy();
}

void DiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  resource_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 resource_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          resource_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.service.discovery.v1.DiscoveryRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 resource_version = 1;
  if (this->_internal_resource_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_resource_version(), target);
  }

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.service.discovery.v1.DiscoveryRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  return target;
}

size_t DiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 2;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // uint64 resource_version = 1;
  if (this->_internal_resource_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resource_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscoveryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryRequest::GetClassData() const { return &_class_data_; }

void DiscoveryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscoveryRequest *>(to)->MergeFrom(
      static_cast<const DiscoveryRequest &>(from));
}


void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from._internal_resource_version() != 0) {
    _internal_set_resource_version(from._internal_resource_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.discovery.v1.DiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  return true;
}

void DiscoveryRequest::InternalSwap(DiscoveryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  swap(resource_version_, other->resource_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[0]);
}

// ===================================================================

class DiscoveryResponse::_Internal {
 public:
};

DiscoveryResponse::DiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  endpoints_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.discovery.v1.DiscoveryResponse)
}
DiscoveryResponse::DiscoveryResponse(const DiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_version_ = from.resource_version_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.discovery.v1.DiscoveryResponse)
}

inline void DiscoveryResponse::SharedCtor() {
resource_version_ = uint64_t{0u};
}

DiscoveryResponse::~DiscoveryResponse() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoints_.Clear();
  resource_version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 resource_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          resource_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .minecpp.proto.service.discovery.v1.Endpoint endpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 resource_version = 1;
  if (this->_internal_resource_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_resource_version(), target);
  }

  // repeated .minecpp.proto.service.discovery.v1.Endpoint endpoints = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_endpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_endpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  return target;
}

size_t DiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .minecpp.proto.service.discovery.v1.Endpoint endpoints = 2;
  total_size += 1UL * this->_internal_endpoints_size();
  for (const auto& msg : this->endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 resource_version = 1;
  if (this->_internal_resource_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resource_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscoveryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscoveryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscoveryResponse::GetClassData() const { return &_class_data_; }

void DiscoveryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscoveryResponse *>(to)->MergeFrom(
      static_cast<const DiscoveryResponse &>(from));
}


void DiscoveryResponse::MergeFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  endpoints_.MergeFrom(from.endpoints_);
  if (from._internal_resource_version() != 0) {
    _internal_set_resource_version(from._internal_resource_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscoveryResponse::CopyFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.discovery.v1.DiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryResponse::IsInitialized() const {
  return true;
}

void DiscoveryResponse::InternalSwap(DiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  endpoints_.InternalSwap(&other->endpoints_);
  swap(resource_version_, other->resource_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[1]);
}

// ===================================================================

class Endpoint::_Internal {
 public:
};

Endpoint::Endpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.discovery.v1.Endpoint)
}
Endpoint::Endpoint(const Endpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.discovery.v1.Endpoint)
}

inline void Endpoint::SharedCtor() {
address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0u;
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.discovery.v1.Endpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Endpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.Destroy();
}

void Endpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Endpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.discovery.v1.Endpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Endpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.service.discovery.v1.Endpoint.address"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Endpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.discovery.v1.Endpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.service.discovery.v1.Endpoint.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.discovery.v1.Endpoint)
  return target;
}

size_t Endpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.discovery.v1.Endpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Endpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Endpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Endpoint::GetClassData() const { return &_class_data_; }

void Endpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Endpoint *>(to)->MergeFrom(
      static_cast<const Endpoint &>(from));
}


void Endpoint::MergeFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.discovery.v1.Endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Endpoint::CopyFrom(const Endpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.discovery.v1.Endpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  return true;
}

void Endpoint::InternalSwap(Endpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Endpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[2]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::minecpp::proto::service::discovery::v1::Endpoint& endpoint(const RegisterRequest* msg);
};

const ::minecpp::proto::service::discovery::v1::Endpoint&
RegisterRequest::_Internal::endpoint(const RegisterRequest* msg) {
  return *msg->endpoint_;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.discovery.v1.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(from._internal_service_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_endpoint()) {
    endpoint_ = new ::minecpp::proto::service::discovery::v1::Endpoint(*from.endpoint_);
  } else {
    endpoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.discovery.v1.RegisterRequest)
}

inline void RegisterRequest::SharedCtor() {
service_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
endpoint_ = nullptr;
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.discovery.v1.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.Destroy();
  if (this != internal_default_instance()) delete endpoint_;
}

void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.discovery.v1.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "minecpp.proto.service.discovery.v1.RegisterRequest.service_name"));
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.service.discovery.v1.Endpoint endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.discovery.v1.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.service.discovery.v1.RegisterRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .minecpp.proto.service.discovery.v1.Endpoint endpoint = 2;
  if (this->_internal_has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoint(this),
        _Internal::endpoint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.discovery.v1.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.discovery.v1.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // .minecpp.proto.service.discovery.v1.Endpoint endpoint = 2;
  if (this->_internal_has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }

void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterRequest *>(to)->MergeFrom(
      static_cast<const RegisterRequest &>(from));
}


void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.discovery.v1.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from._internal_has_endpoint()) {
    _internal_mutable_endpoint()->::minecpp::proto::service::discovery::v1::Endpoint::MergeFrom(from._internal_endpoint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.discovery.v1.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  swap(endpoint_, other->endpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[3]);
}

// ===================================================================

class EmptyResult::_Internal {
 public:
};

EmptyResult::EmptyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.discovery.v1.EmptyResult)
}
EmptyResult::EmptyResult(const EmptyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.discovery.v1.EmptyResult)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyResult::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fdiscovery_2fv1_2fdiscovery_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace discovery
}  // namespace service
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::discovery::v1::DiscoveryRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::discovery::v1::DiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::discovery::v1::DiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::discovery::v1::DiscoveryResponse*
Arena::CreateMaybeMessage< ::minecpp::proto::service::discovery::v1::DiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::discovery::v1::DiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::discovery::v1::Endpoint*
Arena::CreateMaybeMessage< ::minecpp::proto::service::discovery::v1::Endpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::discovery::v1::Endpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::discovery::v1::RegisterRequest*
Arena::CreateMaybeMessage< ::minecpp::proto::service::discovery::v1::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::discovery::v1::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::discovery::v1::EmptyResult*
Arena::CreateMaybeMessage< ::minecpp::proto::service::discovery::v1::EmptyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::discovery::v1::EmptyResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
