// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/service/engine/v1/engine.proto

#include <minecpp/proto/service/engine/v1/engine.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minecpp {
namespace proto {
namespace service {
namespace engine {
namespace v1 {
constexpr PlayerRequest::PlayerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr)
  , player_id_(nullptr){}
struct PlayerRequestDefaultTypeInternal {
  constexpr PlayerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerRequestDefaultTypeInternal() {}
  union {
    PlayerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerRequestDefaultTypeInternal _PlayerRequest_default_instance_;
constexpr GameEvent::GameEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(nullptr){}
struct GameEventDefaultTypeInternal {
  constexpr GameEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameEventDefaultTypeInternal() {}
  union {
    GameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameEventDefaultTypeInternal _GameEvent_default_instance_;
}  // namespace v1
}  // namespace engine
}  // namespace service
}  // namespace proto
}  // namespace minecpp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::engine::v1::PlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::engine::v1::PlayerRequest, payload_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::engine::v1::PlayerRequest, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::engine::v1::GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::service::engine::v1::GameEvent, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::minecpp::proto::service::engine::v1::PlayerRequest)},
  { 7, -1, sizeof(::minecpp::proto::service::engine::v1::GameEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::service::engine::v1::_PlayerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::service::engine::v1::_GameEvent_default_instance_),
};

const char descriptor_table_protodef_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,minecpp/proto/service/engine/v1/engine"
  ".proto\022\037minecpp.proto.service.engine.v1\032"
  "\031google/protobuf/any.proto\032$minecpp/prot"
  "o/player/v1/player.proto\"l\n\rPlayerReques"
  "t\022%\n\007payload\030\001 \001(\0132\024.google.protobuf.Any"
  "\0224\n\tplayer_id\030\002 \001(\0132!.minecpp.proto.play"
  "er.v1.PlayerId\"2\n\tGameEvent\022%\n\007payload\030\001"
  " \001(\0132\024.google.protobuf.Any2w\n\rEngineServ"
  "ice\022f\n\004Join\022..minecpp.proto.service.engi"
  "ne.v1.PlayerRequest\032*.minecpp.proto.serv"
  "ice.engine.v1.GameEvent(\0010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto = {
  false, false, 435, descriptor_table_protodef_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto, "minecpp/proto/service/engine/v1/engine.proto", 
  &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_once, descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto::offsets,
  file_level_metadata_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto, file_level_service_descriptors_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto(&descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto);
namespace minecpp {
namespace proto {
namespace service {
namespace engine {
namespace v1 {

// ===================================================================

class PlayerRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const PlayerRequest* msg);
  static const ::minecpp::proto::player::v1::PlayerId& player_id(const PlayerRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
PlayerRequest::_Internal::payload(const PlayerRequest* msg) {
  return *msg->payload_;
}
const ::minecpp::proto::player::v1::PlayerId&
PlayerRequest::_Internal::player_id(const PlayerRequest* msg) {
  return *msg->player_id_;
}
void PlayerRequest::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void PlayerRequest::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
PlayerRequest::PlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.engine.v1.PlayerRequest)
}
PlayerRequest::PlayerRequest(const PlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::minecpp::proto::player::v1::PlayerId(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.engine.v1.PlayerRequest)
}

inline void PlayerRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(player_id_));
}

PlayerRequest::~PlayerRequest() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.engine.v1.PlayerRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete player_id_;
}

void PlayerRequest::ArenaDtor(void* object) {
  PlayerRequest* _this = reinterpret_cast< PlayerRequest* >(object);
  (void)_this;
}
void PlayerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.engine.v1.PlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.PlayerId player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.engine.v1.PlayerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  // .minecpp.proto.player.v1.PlayerId player_id = 2;
  if (this->_internal_has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.engine.v1.PlayerRequest)
  return target;
}

size_t PlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.engine.v1.PlayerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .minecpp.proto.player.v1.PlayerId player_id = 2;
  if (this->_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerRequest::GetClassData() const { return &_class_data_; }

void PlayerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PlayerRequest *>(to)->MergeFrom(
      static_cast<const PlayerRequest &>(from));
}


void PlayerRequest::MergeFrom(const PlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.engine.v1.PlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from._internal_has_player_id()) {
    _internal_mutable_player_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerRequest::CopyFrom(const PlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.engine.v1.PlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequest::IsInitialized() const {
  return true;
}

void PlayerRequest::InternalSwap(PlayerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRequest, player_id_)
      + sizeof(PlayerRequest::player_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerRequest, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto[0]);
}

// ===================================================================

class GameEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const GameEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
GameEvent::_Internal::payload(const GameEvent* msg) {
  return *msg->payload_;
}
void GameEvent::clear_payload() {
  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
GameEvent::GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.service.engine.v1.GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.service.engine.v1.GameEvent)
}

inline void GameEvent::SharedCtor() {
payload_ = nullptr;
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:minecpp.proto.service.engine.v1.GameEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete payload_;
}

void GameEvent::ArenaDtor(void* object) {
  GameEvent* _this = reinterpret_cast< GameEvent* >(object);
  (void)_this;
}
void GameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.service.engine.v1.GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.service.engine.v1.GameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.service.engine.v1.GameEvent)
  return target;
}

size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.service.engine.v1.GameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any payload = 1;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent::GetClassData() const { return &_class_data_; }

void GameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GameEvent *>(to)->MergeFrom(
      static_cast<const GameEvent &>(from));
}


void GameEvent::MergeFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.service.engine.v1.GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.service.engine.v1.GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  return true;
}

void GameEvent::InternalSwap(GameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_getter, &descriptor_table_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fservice_2fengine_2fv1_2fengine_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace engine
}  // namespace service
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::engine::v1::PlayerRequest* Arena::CreateMaybeMessage< ::minecpp::proto::service::engine::v1::PlayerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::engine::v1::PlayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::service::engine::v1::GameEvent* Arena::CreateMaybeMessage< ::minecpp::proto::service::engine::v1::GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::service::engine::v1::GameEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
