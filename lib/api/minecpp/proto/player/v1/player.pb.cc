// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minecpp/proto/player/v1/player.proto

#include <minecpp/proto/player/v1/player.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace minecpp {
namespace proto {
namespace player {
namespace v1 {
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , ping_(0)
  , game_mode_(0)
{}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
constexpr Player::Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , rotation_(nullptr)
  , abilities_(nullptr)
  , recipe_book_(nullptr)
  , entity_id_(0u)
  , game_mode_(0)
{}
struct PlayerDefaultTypeInternal {
  constexpr PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDefaultTypeInternal _Player_default_instance_;
constexpr Abilities::Abilities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : walk_speed_(0)
  , fly_speed_(0)
  , flying_(false)
  , instant_build_(false)
  , invulnerable_(false)
  , may_build_(false)
  , may_fly_(false){}
struct AbilitiesDefaultTypeInternal {
  constexpr AbilitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbilitiesDefaultTypeInternal() {}
  union {
    Abilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbilitiesDefaultTypeInternal _Abilities_default_instance_;
constexpr RecipeBook::RecipeBook(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gui_open_(false)
  , filtering_craftable_(false)
  , furnace_gui_open_(false)
  , furnace_filtering_craftable_(false){}
struct RecipeBookDefaultTypeInternal {
  constexpr RecipeBookDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecipeBookDefaultTypeInternal() {}
  union {
    RecipeBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecipeBookDefaultTypeInternal _RecipeBook_default_instance_;
}  // namespace v1
}  // namespace player
}  // namespace proto
}  // namespace minecpp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto = nullptr;

const uint32_t TableStruct_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Status, id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Status, name_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Status, ping_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Status, game_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, name_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, entity_id_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, position_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, rotation_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, abilities_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, recipe_book_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Player, game_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, walk_speed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, fly_speed_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, flying_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, instant_build_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, invulnerable_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, may_build_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::Abilities, may_fly_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::RecipeBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::RecipeBook, gui_open_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::RecipeBook, filtering_craftable_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::RecipeBook, furnace_gui_open_),
  PROTOBUF_FIELD_OFFSET(::minecpp::proto::player::v1::RecipeBook, furnace_filtering_craftable_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::minecpp::proto::player::v1::Status)},
  { 10, -1, -1, sizeof(::minecpp::proto::player::v1::Player)},
  { 23, -1, -1, sizeof(::minecpp::proto::player::v1::Abilities)},
  { 36, -1, -1, sizeof(::minecpp::proto::player::v1::RecipeBook)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::player::v1::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::player::v1::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::player::v1::_Abilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::minecpp::proto::player::v1::_RecipeBook_default_instance_),
};

const char descriptor_table_protodef_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$minecpp/proto/player/v1/player.proto\022\027"
  "minecpp.proto.player.v1\032$minecpp/proto/c"
  "ommon/v1/common.proto\032$minecpp/proto/ent"
  "ity/v1/entity.proto\032 minecpp/proto/playe"
  "r/v1/id.proto\"\211\001\n\006Status\022-\n\002id\030\001 \001(\0132!.m"
  "inecpp.proto.player.v1.PlayerId\022\014\n\004name\030"
  "\002 \001(\t\022\014\n\004ping\030\003 \001(\005\0224\n\tgame_mode\030\004 \001(\0162!"
  ".minecpp.proto.common.v1.GameMode\"\272\002\n\006Pl"
  "ayer\022\014\n\004name\030\001 \001(\t\022\021\n\tentity_id\030\002 \001(\r\0223\n"
  "\010position\030\003 \001(\0132!.minecpp.proto.entity.v"
  "1.Position\0223\n\010rotation\030\004 \001(\0132!.minecpp.p"
  "roto.entity.v1.Rotation\0225\n\tabilities\030\005 \001"
  "(\0132\".minecpp.proto.player.v1.Abilities\0228"
  "\n\013recipe_book\030\006 \001(\0132#.minecpp.proto.play"
  "er.v1.RecipeBook\0224\n\tgame_mode\030\007 \001(\0162!.mi"
  "necpp.proto.common.v1.GameMode\"\223\001\n\tAbili"
  "ties\022\022\n\nwalk_speed\030\001 \001(\002\022\021\n\tfly_speed\030\002 "
  "\001(\002\022\016\n\006flying\030\003 \001(\010\022\025\n\rinstant_build\030\004 \001"
  "(\010\022\024\n\014invulnerable\030\005 \001(\010\022\021\n\tmay_build\030\006 "
  "\001(\010\022\017\n\007may_fly\030\007 \001(\010\"z\n\nRecipeBook\022\020\n\010gu"
  "i_open\030\001 \001(\010\022\033\n\023filtering_craftable\030\002 \001("
  "\010\022\030\n\020furnace_gui_open\030\003 \001(\010\022#\n\033furnace_f"
  "iltering_craftable\030\004 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_deps[3] = {
  &::descriptor_table_minecpp_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_minecpp_2fproto_2fentity_2fv1_2fentity_2eproto,
  &::descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto = {
  false, false, 912, descriptor_table_protodef_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto, "minecpp/proto/player/v1/player.proto", 
  &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once, descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto::offsets,
  file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto, file_level_enum_descriptors_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto, file_level_service_descriptors_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_getter() {
  return &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto(&descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto);
namespace minecpp {
namespace proto {
namespace player {
namespace v1 {

// ===================================================================

class Status::_Internal {
 public:
  static const ::minecpp::proto::player::v1::PlayerId& id(const Status* msg);
};

const ::minecpp::proto::player::v1::PlayerId&
Status::_Internal::id(const Status* msg) {
  return *msg->id_;
}
void Status::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.player.v1.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::minecpp::proto::player::v1::PlayerId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.player.v1.Status)
}

inline void Status::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(game_mode_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:minecpp.proto.player.v1.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.player.v1.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&ping_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&ping_)) + sizeof(game_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .minecpp.proto.player.v1.PlayerId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minecpp.proto.player.v1.Status.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.GameMode game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_mode(static_cast<::minecpp::proto::common::v1::GameMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.player.v1.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .minecpp.proto.player.v1.PlayerId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.player.v1.Status.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 ping = 3;
  if (this->_internal_ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ping(), target);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 4;
  if (this->_internal_game_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.player.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.player.v1.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minecpp.proto.player.v1.PlayerId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 ping = 3;
  if (this->_internal_ping() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ping());
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 4;
  if (this->_internal_game_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.player.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_id()) {
    _internal_mutable_id()->::minecpp::proto::player::v1::PlayerId::MergeFrom(from._internal_id());
  }
  if (from._internal_ping() != 0) {
    _internal_set_ping(from._internal_ping());
  }
  if (from._internal_game_mode() != 0) {
    _internal_set_game_mode(from._internal_game_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.player.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, game_mode_)
      + sizeof(Status::game_mode_)
      - PROTOBUF_FIELD_OFFSET(Status, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_getter, &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[0]);
}

// ===================================================================

class Player::_Internal {
 public:
  static const ::minecpp::proto::entity::v1::Position& position(const Player* msg);
  static const ::minecpp::proto::entity::v1::Rotation& rotation(const Player* msg);
  static const ::minecpp::proto::player::v1::Abilities& abilities(const Player* msg);
  static const ::minecpp::proto::player::v1::RecipeBook& recipe_book(const Player* msg);
};

const ::minecpp::proto::entity::v1::Position&
Player::_Internal::position(const Player* msg) {
  return *msg->position_;
}
const ::minecpp::proto::entity::v1::Rotation&
Player::_Internal::rotation(const Player* msg) {
  return *msg->rotation_;
}
const ::minecpp::proto::player::v1::Abilities&
Player::_Internal::abilities(const Player* msg) {
  return *msg->abilities_;
}
const ::minecpp::proto::player::v1::RecipeBook&
Player::_Internal::recipe_book(const Player* msg) {
  return *msg->recipe_book_;
}
void Player::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Player::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.player.v1.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::minecpp::proto::entity::v1::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::minecpp::proto::entity::v1::Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_abilities()) {
    abilities_ = new ::minecpp::proto::player::v1::Abilities(*from.abilities_);
  } else {
    abilities_ = nullptr;
  }
  if (from._internal_has_recipe_book()) {
    recipe_book_ = new ::minecpp::proto::player::v1::RecipeBook(*from.recipe_book_);
  } else {
    recipe_book_ = nullptr;
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.player.v1.Player)
}

inline void Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&position_)) + sizeof(game_mode_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:minecpp.proto.player.v1.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete abilities_;
  if (this != internal_default_instance()) delete recipe_book_;
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.player.v1.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && abilities_ != nullptr) {
    delete abilities_;
  }
  abilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recipe_book_ != nullptr) {
    delete recipe_book_;
  }
  recipe_book_ = nullptr;
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(game_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "minecpp.proto.player.v1.Player.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.entity.v1.Rotation rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.Abilities abilities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_abilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.player.v1.RecipeBook recipe_book = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipe_book(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .minecpp.proto.common.v1.GameMode game_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_mode(static_cast<::minecpp::proto::common::v1::GameMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.player.v1.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "minecpp.proto.player.v1.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  // .minecpp.proto.entity.v1.Position position = 3;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation(this), target, stream);
  }

  // .minecpp.proto.player.v1.Abilities abilities = 5;
  if (this->_internal_has_abilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::abilities(this), target, stream);
  }

  // .minecpp.proto.player.v1.RecipeBook recipe_book = 6;
  if (this->_internal_has_recipe_book()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::recipe_book(this), target, stream);
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 7;
  if (this->_internal_game_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.player.v1.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.player.v1.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .minecpp.proto.entity.v1.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .minecpp.proto.entity.v1.Rotation rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .minecpp.proto.player.v1.Abilities abilities = 5;
  if (this->_internal_has_abilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *abilities_);
  }

  // .minecpp.proto.player.v1.RecipeBook recipe_book = 6;
  if (this->_internal_has_recipe_book()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recipe_book_);
  }

  // uint32 entity_id = 2;
  if (this->_internal_entity_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // .minecpp.proto.common.v1.GameMode game_mode = 7;
  if (this->_internal_game_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }

void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Player *>(to)->MergeFrom(
      static_cast<const Player &>(from));
}


void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.player.v1.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::minecpp::proto::entity::v1::Position::MergeFrom(from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::minecpp::proto::entity::v1::Rotation::MergeFrom(from._internal_rotation());
  }
  if (from._internal_has_abilities()) {
    _internal_mutable_abilities()->::minecpp::proto::player::v1::Abilities::MergeFrom(from._internal_abilities());
  }
  if (from._internal_has_recipe_book()) {
    _internal_mutable_recipe_book()->::minecpp::proto::player::v1::RecipeBook::MergeFrom(from._internal_recipe_book());
  }
  if (from._internal_entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_game_mode() != 0) {
    _internal_set_game_mode(from._internal_game_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.player.v1.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, game_mode_)
      + sizeof(Player::game_mode_)
      - PROTOBUF_FIELD_OFFSET(Player, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_getter, &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[1]);
}

// ===================================================================

class Abilities::_Internal {
 public:
};

Abilities::Abilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.player.v1.Abilities)
}
Abilities::Abilities(const Abilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&walk_speed_, &from.walk_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_fly_) -
    reinterpret_cast<char*>(&walk_speed_)) + sizeof(may_fly_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.player.v1.Abilities)
}

inline void Abilities::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&walk_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&may_fly_) -
    reinterpret_cast<char*>(&walk_speed_)) + sizeof(may_fly_));
}

Abilities::~Abilities() {
  // @@protoc_insertion_point(destructor:minecpp.proto.player.v1.Abilities)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Abilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Abilities::ArenaDtor(void* object) {
  Abilities* _this = reinterpret_cast< Abilities* >(object);
  (void)_this;
}
void Abilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Abilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Abilities::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.player.v1.Abilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&walk_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&may_fly_) -
      reinterpret_cast<char*>(&walk_speed_)) + sizeof(may_fly_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Abilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float walk_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          walk_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fly_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          fly_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool flying = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          flying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool instant_build = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          instant_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool invulnerable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          invulnerable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool may_build = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          may_build_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool may_fly = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          may_fly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Abilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.player.v1.Abilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float walk_speed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_walk_speed(), target);
  }

  // float fly_speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fly_speed(), target);
  }

  // bool flying = 3;
  if (this->_internal_flying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flying(), target);
  }

  // bool instant_build = 4;
  if (this->_internal_instant_build() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_instant_build(), target);
  }

  // bool invulnerable = 5;
  if (this->_internal_invulnerable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_invulnerable(), target);
  }

  // bool may_build = 6;
  if (this->_internal_may_build() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_may_build(), target);
  }

  // bool may_fly = 7;
  if (this->_internal_may_fly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_may_fly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.player.v1.Abilities)
  return target;
}

size_t Abilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.player.v1.Abilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float walk_speed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = this->_internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    total_size += 1 + 4;
  }

  // float fly_speed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = this->_internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    total_size += 1 + 4;
  }

  // bool flying = 3;
  if (this->_internal_flying() != 0) {
    total_size += 1 + 1;
  }

  // bool instant_build = 4;
  if (this->_internal_instant_build() != 0) {
    total_size += 1 + 1;
  }

  // bool invulnerable = 5;
  if (this->_internal_invulnerable() != 0) {
    total_size += 1 + 1;
  }

  // bool may_build = 6;
  if (this->_internal_may_build() != 0) {
    total_size += 1 + 1;
  }

  // bool may_fly = 7;
  if (this->_internal_may_fly() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Abilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Abilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Abilities::GetClassData() const { return &_class_data_; }

void Abilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Abilities *>(to)->MergeFrom(
      static_cast<const Abilities &>(from));
}


void Abilities::MergeFrom(const Abilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.player.v1.Abilities)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_walk_speed = from._internal_walk_speed();
  uint32_t raw_walk_speed;
  memcpy(&raw_walk_speed, &tmp_walk_speed, sizeof(tmp_walk_speed));
  if (raw_walk_speed != 0) {
    _internal_set_walk_speed(from._internal_walk_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fly_speed = from._internal_fly_speed();
  uint32_t raw_fly_speed;
  memcpy(&raw_fly_speed, &tmp_fly_speed, sizeof(tmp_fly_speed));
  if (raw_fly_speed != 0) {
    _internal_set_fly_speed(from._internal_fly_speed());
  }
  if (from._internal_flying() != 0) {
    _internal_set_flying(from._internal_flying());
  }
  if (from._internal_instant_build() != 0) {
    _internal_set_instant_build(from._internal_instant_build());
  }
  if (from._internal_invulnerable() != 0) {
    _internal_set_invulnerable(from._internal_invulnerable());
  }
  if (from._internal_may_build() != 0) {
    _internal_set_may_build(from._internal_may_build());
  }
  if (from._internal_may_fly() != 0) {
    _internal_set_may_fly(from._internal_may_fly());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Abilities::CopyFrom(const Abilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.player.v1.Abilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abilities::IsInitialized() const {
  return true;
}

void Abilities::InternalSwap(Abilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Abilities, may_fly_)
      + sizeof(Abilities::may_fly_)
      - PROTOBUF_FIELD_OFFSET(Abilities, walk_speed_)>(
          reinterpret_cast<char*>(&walk_speed_),
          reinterpret_cast<char*>(&other->walk_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Abilities::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_getter, &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[2]);
}

// ===================================================================

class RecipeBook::_Internal {
 public:
};

RecipeBook::RecipeBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:minecpp.proto.player.v1.RecipeBook)
}
RecipeBook::RecipeBook(const RecipeBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gui_open_, &from.gui_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&furnace_filtering_craftable_) -
    reinterpret_cast<char*>(&gui_open_)) + sizeof(furnace_filtering_craftable_));
  // @@protoc_insertion_point(copy_constructor:minecpp.proto.player.v1.RecipeBook)
}

inline void RecipeBook::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gui_open_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&furnace_filtering_craftable_) -
    reinterpret_cast<char*>(&gui_open_)) + sizeof(furnace_filtering_craftable_));
}

RecipeBook::~RecipeBook() {
  // @@protoc_insertion_point(destructor:minecpp.proto.player.v1.RecipeBook)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecipeBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecipeBook::ArenaDtor(void* object) {
  RecipeBook* _this = reinterpret_cast< RecipeBook* >(object);
  (void)_this;
}
void RecipeBook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecipeBook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecipeBook::Clear() {
// @@protoc_insertion_point(message_clear_start:minecpp.proto.player.v1.RecipeBook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gui_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&furnace_filtering_craftable_) -
      reinterpret_cast<char*>(&gui_open_)) + sizeof(furnace_filtering_craftable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipeBook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool gui_open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gui_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filtering_craftable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          filtering_craftable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool furnace_gui_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          furnace_gui_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool furnace_filtering_craftable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          furnace_filtering_craftable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecipeBook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:minecpp.proto.player.v1.RecipeBook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool gui_open = 1;
  if (this->_internal_gui_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_gui_open(), target);
  }

  // bool filtering_craftable = 2;
  if (this->_internal_filtering_craftable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_filtering_craftable(), target);
  }

  // bool furnace_gui_open = 3;
  if (this->_internal_furnace_gui_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_furnace_gui_open(), target);
  }

  // bool furnace_filtering_craftable = 4;
  if (this->_internal_furnace_filtering_craftable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_furnace_filtering_craftable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:minecpp.proto.player.v1.RecipeBook)
  return target;
}

size_t RecipeBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:minecpp.proto.player.v1.RecipeBook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool gui_open = 1;
  if (this->_internal_gui_open() != 0) {
    total_size += 1 + 1;
  }

  // bool filtering_craftable = 2;
  if (this->_internal_filtering_craftable() != 0) {
    total_size += 1 + 1;
  }

  // bool furnace_gui_open = 3;
  if (this->_internal_furnace_gui_open() != 0) {
    total_size += 1 + 1;
  }

  // bool furnace_filtering_craftable = 4;
  if (this->_internal_furnace_filtering_craftable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecipeBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecipeBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecipeBook::GetClassData() const { return &_class_data_; }

void RecipeBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecipeBook *>(to)->MergeFrom(
      static_cast<const RecipeBook &>(from));
}


void RecipeBook::MergeFrom(const RecipeBook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:minecpp.proto.player.v1.RecipeBook)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gui_open() != 0) {
    _internal_set_gui_open(from._internal_gui_open());
  }
  if (from._internal_filtering_craftable() != 0) {
    _internal_set_filtering_craftable(from._internal_filtering_craftable());
  }
  if (from._internal_furnace_gui_open() != 0) {
    _internal_set_furnace_gui_open(from._internal_furnace_gui_open());
  }
  if (from._internal_furnace_filtering_craftable() != 0) {
    _internal_set_furnace_filtering_craftable(from._internal_furnace_filtering_craftable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecipeBook::CopyFrom(const RecipeBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:minecpp.proto.player.v1.RecipeBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipeBook::IsInitialized() const {
  return true;
}

void RecipeBook::InternalSwap(RecipeBook* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecipeBook, furnace_filtering_craftable_)
      + sizeof(RecipeBook::furnace_filtering_craftable_)
      - PROTOBUF_FIELD_OFFSET(RecipeBook, gui_open_)>(
          reinterpret_cast<char*>(&gui_open_),
          reinterpret_cast<char*>(&other->gui_open_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipeBook::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_getter, &descriptor_table_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto_once,
      file_level_metadata_minecpp_2fproto_2fplayer_2fv1_2fplayer_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace player
}  // namespace proto
}  // namespace minecpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::minecpp::proto::player::v1::Status* Arena::CreateMaybeMessage< ::minecpp::proto::player::v1::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::player::v1::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::player::v1::Player* Arena::CreateMaybeMessage< ::minecpp::proto::player::v1::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::player::v1::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::player::v1::Abilities* Arena::CreateMaybeMessage< ::minecpp::proto::player::v1::Abilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::player::v1::Abilities >(arena);
}
template<> PROTOBUF_NOINLINE ::minecpp::proto::player::v1::RecipeBook* Arena::CreateMaybeMessage< ::minecpp::proto::player::v1::RecipeBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::minecpp::proto::player::v1::RecipeBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
