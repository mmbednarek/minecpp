generator = "nbt"
package minecpp.nbt.level

[NBT]
record Memories {
   no_empty: int32
}

[NBT]
record Brain {
   memories: Memories
}

[NBT]
record Abilities {
   flySpeed: float32
   flying: int8
   instabuild: int8
   invulnerable: int8
   mayBuild: int8
   mayfly: int8
   walkSpeed: float32
}

[NBT]
record RecipeBook {
   isBlastingFurnaceFilteringCraftable: int8
   isBlastingFurnaceGuiOpen: int8
   isFilteringCraftable: int8
   isFurnaceFilteringCraftable: int8
   isFurnaceGuiOpen: int8
   isGuiOpen: int8
   isSmokerFilteringCraftable: int8
   isSmokerGuiOpen: int8
}

[NBT]
record Version {
   Id: int32
   Name: string
   Snapshot: int8
}

[NBT]
record BiomeSource {
   preset: string
   large_biomes: int8
   seed: int64
   type: string
}

[NBT]
record Generator {
   biome_source: BiomeSource
   seed: int64
   settings: string
   type: string
}

[NBT]
record DimentionData {
   generator: Generator
   type: string
}

[NBT]
record Dimentions {
   [Namespace="minecraft", Path="overworld"]
   overworld: DimentionData
   [Namespace="minecraft", Path="the_end"]
   the_end: DimentionData
   [Namespace="minecraft", Path="the_nether"]
   the_nether: DimentionData
}

[NBT]
record WorldGen {
   bonus_chest: int8
   dimensions: Dimentions
   generate_features: int8
   seed: int64
}

[NBT]
record DataPacks {
   Disabled: list[int64]
}

[NBT]
record DragonFight {
   DragonKilled: int8
   PreviouslyKilled: int8
}

[NBT]
record CustomBossEvents {
   no_empty: int32
}

[NBT]
record Player {
   AbsorptionAmount: float32
   Air: int16
   Brain: Brain
   DataVersion: int32
   DeathTime: int16
   Dimension: string
   FallDistance: float32
   FallFlying: int8
   Fire: int16
   Health: float32
   HurtByTimestamp: int32
   HurtTime: int16
   Invulnerable: int8
   OnGround: int8
   PortalCooldown: int32
   Score: int32
   SelectedItemSlot: int32
   SleepTimer: int16
   UUID: list[int32]
   XpLevel: int32
   XpP: float32
   XpSeed: int32
   XpTotal: int32
   abilities: Abilities
   foodExhaustionLevel: float32
   foodLevel: int32
   foodSaturationLevel: float32
   foodTickTimer: int32
   playerGameType: int32
   previousPlayerGameType: int32
   recipeBook: RecipeBook
   seenCredits: int8
}

[NBT]
record GameRules {
   announceAdvancements: string
   commandBlockOutput: string
   disableElytraMovementCheck: string
   disableRaids: string
   doDaylightCycle: string
   doEntityDrops: string
   doFireTick: string
   doImmediateRespawn: string
   doInsomnia: string
   doLimitedCrafting: string
   doMobLoot: string
   doMobSpawning: string
   doPatrolSpawning: string
   doTileDrops: string
   doTraderSpawning: string
   doWeatherCycle: string
   drowningDamage: string
   fallDamage: string
   fireDamage: string
   forgiveDeadPlayers: string
   keepInventory: string
   logAdminCommands: string
   maxCommandChainLength: string
   maxEntityCramming: string
   mobGriefing: string
   naturalRegeneration: string
   randomTickSpeed: string
   reducedDebugInfo: string
   sendCommandFeedback: string
   showDeathMessages: string
   spawnRadius: string
   spectatorsGenerateChunks: string
   universalAnger: string
}

[NBT]
record LevelData {
   BorderCenterX: float64
   BorderCenterZ: float64
   BorderDamagePerBlock: float64
   BorderSafeZone: float64
   BorderSize: float64
   BorderSizeLerpTarget: float64
   BorderSizeLerpTime: int64
   BorderWarningBlocks: float64
   BorderWarningTime: float64
   CustomBossEvents: CustomBossEvents
   DataPacks: DataPacks
   DataVersion: int32
   DayTime: int64
   Difficulty: int8
   DifficultyLocked: int8
   DragonFight: DragonFight
   GameRules: GameRules
   GameType: int32
   LastPlayed: int64
   LevelName: string
   Player: Player
   SpawnX: int32
   SpawnY: int32
   SpawnZ: int32
   Time: int64
   Version: Version
   WanderingTraderSpawnChance: int32
   WanderingTraderSpawnDelay: int32
   WasModded: int8
   WorldGenSettings: WorldGen
   allowCommands: int8
   clearWeatherTime: int32
   hardcore: int8
   initialized: int8
   rainTime: int32
   raining: int8
   thunderTime: int32
   thundering: int8
   version2: int32
}

[NBT]
record Level {
   Data: LevelData
}

