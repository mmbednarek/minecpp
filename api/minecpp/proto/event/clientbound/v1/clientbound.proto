syntax = "proto3";
package minecpp.proto.event.clientbound.v1;

import "google/protobuf/any.proto";
import "minecpp/proto/common/v1/common.proto";
import "minecpp/proto/player/v1/player.proto";
import "minecpp/proto/entity/v1/entity.proto";

message Event {
  google.protobuf.Any payload = 1;
  oneof recipient {
    RecipientSinglePlayer single_player = 2;
    RecipientMultiplePlayers multiple_players = 3;
    RecipientAllPlayers all_players = 4;
  }
}

message RecipientSinglePlayer {
  player.v1.PlayerId player_id = 1;
}

message RecipientMultiplePlayers {
  repeated player.v1.PlayerId player_ids = 1;
}

message RecipientAllPlayers {
}

message AddPlayer {
  player.v1.PlayerId player_id = 1;
  string name = 2;
  common.v1.GameMode game_mode = 3;
  int32 ping = 4;
}

message SpawnPlayer {
  player.v1.PlayerId player_id = 1;
  int32 entity_id = 2;
  entity.v1.Position position = 3;
  entity.v1.Rotation rotation = 4;
}

message EntityMove {
  player.v1.PlayerId player_id = 1;
  int32 entity_id = 2;
  entity.v1.Position position = 3;
  entity.v1.Rotation rotation = 4;
}

message EntityLook {
  player.v1.PlayerId player_id = 1;
  int32 entity_id = 2;
  entity.v1.Rotation rotation = 3;
}

message PlayerPositionRotation {
}

message Chat {
  string message = 1;
  int32 type = 2;
}

message RemovePlayer {
  player.v1.PlayerId player_id = 1;
  int32 entity_id = 2;
}

message UpdateBlock {
  int64 block_position = 1;
  uint32 state = 2;
}

message AnimateHand {
  player.v1.PlayerId player_id = 1;
  int32 entity_id = 2;
  int32 hand = 3;
}

message LoadTerrain {
  player.v1.PlayerId player_id = 1;
  common.v1.ChunkPosition central_chunk = 2;
  repeated common.v1.ChunkPosition coords = 3;
}

message TransferPlayer {
  bytes player = 1;
  bytes target_engine = 2;
}

message UpdatePlayerAbilities {
  player.v1.PlayerId player_id = 1;
  bool invulnerable = 2;
  bool is_flying = 3;
  bool allow_flying = 4;
  bool creative_mode = 5;
  float walk_speed = 7;
  float fly_speed = 8;
}

message UnloadChunk {
  player.v1.PlayerId player_id = 1;
  common.v1.ChunkPosition chunk_position = 2;
}

message AcceptPlayer {
  PlayerAcceptState state = 1;
  uint32 challenge_id = 2;
  common.v1.Gameplay gameplay = 3;
  player.v1.Player player = 4;
  string denial_reason = 5;
}

enum PlayerAcceptState {
  DENIED = 0;
  ACCEPTED = 1;
  MOVED = 2;
}

message PlayerList {
  player.v1.PlayerId player_id = 1;
  repeated player.v1.Status list = 2;
}
