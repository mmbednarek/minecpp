syntax = "proto3";
package minecpp.proto.event.clientbound.v1;

import "google/protobuf/any.proto";
import "minecpp/proto/common/v1/Common.proto";
import "minecpp/proto/common/v1/Vector.proto";
import "minecpp/proto/player/v1/Id.proto";
import "minecpp/proto/player/v1/Player.proto";
import "minecpp/proto/entity/v1/Entity.proto";
import "minecpp/proto/chunk/v1/Chunk.proto";

message Event {
  google.protobuf.Any payload = 1;
  oneof recipient {
    RecipientSinglePlayer single_player = 2;
    RecipientMultiplePlayers multiple_players = 3;
    RecipientAllPlayers all_players = 4;
    RecipientExcluding excluding = 5;
  }
}

message RecipientSinglePlayer {
  player.v1.PlayerId player_id = 1;
}

message RecipientMultiplePlayers {
  repeated player.v1.PlayerId player_ids = 1;
}

message RecipientAllPlayers {
}

message RecipientExcluding {
  player.v1.PlayerId player_id = 1;
}

message AddPlayer {
  player.v1.PlayerId player_id = 1;
  string name = 2;
  common.v1.GameMode game_mode = 3;
  uint32 ping = 4;
}

message SpawnEntity {
  entity.v1.Entity entity = 1;
}

message SpawnPlayer {
  player.v1.PlayerId player_id = 1;
  entity.v1.PlayerEntity entity = 2;
}

message EntityMove {
  uint32 entity_id = 1;
  common.v1.Vector3i movement = 2;
  common.v1.Rotation rotation = 3;
  bool is_on_ground = 4;
}

message EntityLook {
  player.v1.PlayerId player_id = 1;
  uint32 entity_id = 2;
  common.v1.Rotation rotation = 3;
}

message PlayerPositionRotation {
  common.v1.Vector3 position = 1;
  common.v1.Rotation rotation = 2;
}

message SetSpawnPosition {
  uint64 position = 1;
  float angle = 2;
}

message Chat {
  string message = 1;
  int32 type = 2;
}

message RemovePlayer {
  player.v1.PlayerId player_id = 1;
  uint32 entity_id = 2;
}

message UpdateBlock {
  uint64 block_position = 1;
  uint32 state = 2;
}

message AnimateEntity {
  uint32 entity_id = 1;
  common.v1.EntityAnimation animation = 2;
}

message AcknowledgeBlockChange {
  int32 sequence_id = 1;
}

message LoadTerrain {
  common.v1.ChunkPosition central_chunk = 1;
  repeated common.v1.ChunkPosition coords = 2;
}

message TransferPlayer {
  uint64 engine_instance_id = 2;
}

message UpdatePlayerAbilities {
  player.v1.PlayerId player_id = 1;
  bool invulnerable = 2;
  bool is_flying = 3;
  bool allow_flying = 4;
  bool creative_mode = 5;
  float walk_speed = 7;
  float fly_speed = 8;
}

message UnloadChunk {
  player.v1.PlayerId player_id = 1;
  common.v1.ChunkPosition chunk_position = 2;
}

message PlayerList {
  repeated player.v1.Status list = 1;
}

message EntityList {
  repeated entity.v1.Entity entities = 1;
  repeated entity.v1.PlayerEntity player_entities = 2;
}

message SetEntityVelocity {
  uint32 entity_id = 1;
  common.v1.Vector3i velocity = 2;
}

message AcceptPlayer {
  common.v1.Gameplay gameplay = 1;
  entity.v1.Abilities abilities =  2;
  player.v1.Player player = 3;
}

message DenyPlayer {
  string denial_reason = 1;
}

message SetInventorySlot {
  player.v1.Slot slot = 1;
}

message SectionBlockLight {
  int32 y = 1;
  bytes block_light = 2;
}

message ChunkBlockLight {
  common.v1.ChunkPosition position = 1;
  repeated SectionBlockLight sections = 2;
}

message UpdateBlockLight {
  repeated ChunkBlockLight block_light = 1;
}

message ChunkData {
  chunk.v1.Chunk chunk = 1;
  bool is_initial_chunk = 2;
}

message SetCenterChunk {
  common.v1.ChunkPosition position = 1;
}

message SetEntityEquipment {
  uint32 entity_id = 1;
  entity.v1.EquipmentSlot equipment_slot = 2;
  player.v1.Slot item = 3;
}

message SetHealth {
  float health = 1;
  int32 food = 2;
  float food_saturation = 3;
}

message CollectItem {
  uint32 collected_entity_id = 1;
  uint32 collector_entity_id = 2;
  uint32 count = 3;
}

message RemoveEntity {
  uint32 entity_id = 1;
}

message TeleportEntity {
  uint32 entity_id = 1;
  common.v1.Vector3 position = 2;
  common.v1.Rotation rotation = 3;
  bool is_on_ground = 4;
}

message DisplayDeathScreen {
  uint32 victim_entity_id = 1;
  uint32 killer_entity_id = 2;
  string death_message = 3;
};

message Respawn {
  string dimension_type = 1;
  string dimension_name = 2;
  int64 hashed_seed = 3;
  common.v1.GameMode game_mode = 4;
  optional common.v1.GameMode previous_game_mode = 5;
  bool is_debug = 6;
  bool is_flat = 7;
  bool copy_metadata = 8;
  bool has_death_location = 9;
  string death_dimension = 10;
  common.v1.Vector3 death_position = 11;
};

message SetAbilities {
  entity.v1.Abilities abilities = 1;
}